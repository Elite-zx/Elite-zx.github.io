<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[HIT-OS]哈工大操作系统实验lab1~8</title>
      <link href="/2023/05/06/OS-Learning/HIT-Labs/"/>
      <url>/2023/05/06/OS-Learning/HIT-Labs/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><a name="Sy3c5"></a><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p><em>Learning operating system by coding it！</em></p><p><a name="LIwaN"></a></p><h1 id="实验0-实验环境搭建"><a class="markdownIt-Anchor" href="#实验0-实验环境搭建"></a> 实验0 实验环境搭建</h1><hr /><p><a href="https://hoverwinter.gitbooks.io/hit-oslab-manual/content/environment.html">reference1</a><br /><a href="https://blog.csdn.net/zy010101/article/details/108085192">reference2</a><br />遇到的问题：在编译linux0.11时，出现<code>fatal error：asm/ioctl.h: No such file or directory</code>，<code>loctl.h</code>这个文件是在库<code>linux-lib-dev</code>中的，而且我已经安装了这个库，但还是有这个错误<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679055607952-a7d970dc-d0af-4bf9-8a10-389fbf39cd71.png#averageHue=%23323130&amp;clientId=u3a7860c6-b5b9-4&amp;from=paste&amp;height=253&amp;id=ua58a300b&amp;originHeight=380&amp;originWidth=1554&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=169952&amp;status=done&amp;style=none&amp;taskId=u654359bb-fcf7-4d06-85f5-9faa172d7aa&amp;title=&amp;width=1036" alt="image.png" /><br /> 解决方法：使用i386版本的linux-libc-dev</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> linux-libc-dev:i386<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a name="CgYpM"></a></p><h1 id="实验1-操作系统的引导"><a class="markdownIt-Anchor" href="#实验1-操作系统的引导"></a> 实验1 操作系统的引导</h1><hr /><p><a name="rsI0N"></a></p><h2 id="1-改写bootsects"><a class="markdownIt-Anchor" href="#1-改写bootsects"></a> 1. 改写bootsect.s</h2><ol><li>我们只需要<code>bootsect.s</code>源码中打印字符串的部分，因为不涉及迁移<code>bootsect</code>从<code>0x07c00</code>到<code>0x90000</code>的操作，所以<code>bootsect.s</code>读入内存后还是在<code>0x07c00</code>的位置，因此要添加<code>mov es, #07c0</code>才能使<code>es:bp</code>指向正确的字符串起始位置。此外，<code>cx</code>参数的大小为字符串大小+6，这里的6是3个CR/LF (carriage return/line feed: 13 10)</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679306853262-7e6f4ca7-68d6-4641-83f8-e0edbf6e9a65.png#averageHue=%23f0f0f0&amp;clientId=ub2e2e66c-6eae-4&amp;from=paste&amp;height=293&amp;id=u332a1dd5&amp;originHeight=293&amp;originWidth=1264&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=104104&amp;status=done&amp;style=none&amp;taskId=u27f27fa8-2816-477c-8a4b-416f08ee4ee&amp;title=&amp;width=1264" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679120889905-e4fdb498-a155-4fbc-9485-851c42da41cc.png#averageHue=%23292928&amp;clientId=u2a122f00-1508-4&amp;from=paste&amp;height=164&amp;id=hO11h&amp;originHeight=246&amp;originWidth=994&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=69573&amp;status=done&amp;style=none&amp;taskId=u0269a0c9-fa2b-422e-b66d-5402077e146&amp;title=&amp;width=662.6666666666666" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679121050256-f419626e-7a21-4ac1-83f9-1b95d1360eb3.png#averageHue=%23292929&amp;clientId=u2a122f00-1508-4&amp;from=paste&amp;height=163&amp;id=TTKfL&amp;originHeight=245&amp;originWidth=1350&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=104566&amp;status=done&amp;style=none&amp;taskId=u6208cb08-47ef-43f9-90cb-c0dd2f14ca8&amp;title=&amp;width=900" alt="image.png" /></p><ol start="2"><li>改写<code>bootsect.s</code></li></ol><pre class="line-numbers language-none"><code class="language-none">entry _start_start:movah,#0x03! read cursor posxorbh,bhint0x10movcx,#34movbx,#0x0007! page 0, attribute 7 (normal)movbp,#msg1movax,#0x07c0moves,ax         ! set correct segment addressmovax,#0x1301! write string, move cursorint0x10inf_loop:        jmp inf_loop     ! keep not exitmsg1:.byte 13,10.ascii &quot;EliteX system is Loading ...&quot;.byte 13,10,13,10.org 510   ! jump over root_devboot_flag:.word 0xAA55         ! effective sign<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>要仅汇编<code>bootsect.s</code>得到<code>Image</code>，运行以下命令（在实模式下，as86工具用于汇编产生目标代码，ld86工具用于连接产生可执行文件）</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">as86 <span class="token parameter variable">-0</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-o</span> bootsect.o bootsect.sld86 <span class="token parameter variable">-0</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-o</span> bootsect bootsect.o<span class="token function">dd</span> <span class="token assign-left variable">bs</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>bootsect <span class="token assign-left variable">of</span><span class="token operator">=</span>Image <span class="token assign-left variable">skip</span><span class="token operator">=</span><span class="token number">32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li>结果</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679291194417-3bded04a-f0fa-42d5-881a-969e7b59420d.png#averageHue=%23171716&amp;clientId=ua87acfff-24aa-4&amp;from=paste&amp;height=411&amp;id=u13c84d5d&amp;originHeight=552&amp;originWidth=946&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=45537&amp;status=done&amp;style=none&amp;taskId=uaf3fd5c0-d375-488d-a6e2-9636e569b0e&amp;title=&amp;width=704.65625" alt="image.png" /><br /><a name="VRykQ"></a></p><h2 id="2-改写setups"><a class="markdownIt-Anchor" href="#2-改写setups"></a> 2. 改写setup.s</h2><p><a name="JS2dj"></a></p><h3 id="task1"><a class="markdownIt-Anchor" href="#task1"></a> task1</h3><ol><li>在<code>setup.s</code>中写入<code>bootsect.s</code>的内容，对字符串信息作修改，修改<code>es</code>为<code>0x07e0</code>，因为<code>setup</code>在内存紧跟<code>bootsect</code>(0x07c00 + 0x200)之后 (这里将<code>cs</code>的值通过<code>ax</code>赋给<code>es</code>，因为此时<code>cs</code>的值就是<code>0x07e0</code>）)</li></ol><pre class="line-numbers language-none"><code class="language-none">entry _start_start:movah,#0x03! read cursor posxorbh,bhint0x10movcx,#25movbx,#0x0007! page 0, attribute 7 (normal)movbp,#msg1movax,csmoves,axmovax,#0x1301! write string, move cursorint0x10inf_loop:jmp inf_loop msg1:.byte 13,10.ascii &quot;Now we are in SETUP&quot;.byte 13,10,13,10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679295121521-d9f5ba9a-a2f3-406c-95b2-c032f4093a17.png#averageHue=%23f8f6f3&amp;clientId=ua87acfff-24aa-4&amp;from=paste&amp;height=156&amp;id=u53cd6060&amp;originHeight=234&amp;originWidth=1106&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=true&amp;size=121487&amp;status=done&amp;style=none&amp;taskId=ueb27f2e8-c7ae-4f15-9709-13b57b4a98b&amp;title=int%200x13&amp;width=737.3333333333334" alt="int 0x13" title="int 0x13" /></p><ol start="2"><li>在<code>**bootsect.s**</code>中添加源码中载入<code>setup</code>的部分，并修改<code>SETUPSEG</code>为<code>0x07e0</code>，原因还是在于我们没有移动<code>**bootsect**</code>**，**去掉循环并修改<code>SETUPLEN</code>为<code>2</code>，因为对我们的改写后的<code>setup</code>，仅需读入两个扇区就够了（其实一个扇区的大小也够了）</li></ol><pre class="line-numbers language-none"><code class="language-none">SETUPLEN &#x3D; 1SETUPSEG &#x3D; 0x07e0entry _start_start:movah,#0x03! read cursor posxorbh,bhint0x10movcx,#34movbx,#0x0007! page 0, attribute 7 (normal)movbp,#msg1movax,#0x07c0moves,axmovax,#0x1301! write string, move cursorint0x10load_setup:movdx,#0x0000! drive 0, head 0movcx,#0x0002! sector 2, track 0movbx,#0x0200! address &#x3D; 512, in INITSEGmovax,#0x0200+SETUPLEN! service 2, nr of sectorsint0x13! read itjncok_load_setup! ok - continuemovdx,#0x0000movax,#0x0000! reset the disketteint0x13jload_setupok_load_setup:jmpi0,SETUPSEG msg1:.byte 13,10.ascii &quot;EliteX system is Loading ...&quot;.byte 13,10,13,10.org 510   ! jump over root_devboot_flag:.word 0xAA55         ! effective sign<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>修改<code>linux-0.11/tool/build.c</code>注释掉最后部分，以便我们借助MakeFile编译<code>bootsect.s</code>与<code>setup.s</code>，而不用两个分别手动编译</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679294169436-70675d89-6d65-4daf-8497-da686fe3a38b.png#averageHue=%230b0b0b&amp;clientId=ua87acfff-24aa-4&amp;from=paste&amp;height=339&amp;id=u8afde1bf&amp;originHeight=564&amp;originWidth=1029&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=160589&amp;status=done&amp;style=none&amp;taskId=u11ec5c70-12de-4770-8679-70f759df314&amp;title=&amp;width=619" alt="image.png" /></p><ol start="4"><li>结果</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679294501705-49ff1622-5adc-437a-8cff-1be4d2841e43.png#averageHue=%23191919&amp;clientId=ua87acfff-24aa-4&amp;from=paste&amp;height=490&amp;id=ub64002a5&amp;originHeight=536&amp;originWidth=826&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=38308&amp;status=done&amp;style=none&amp;taskId=ue6cf2b2d-8218-4f57-977c-2368cbcf023&amp;title=&amp;width=754.65625" alt="image.png" /><br /><a name="pW014"></a></p><h3 id="task2"><a class="markdownIt-Anchor" href="#task2"></a> task2</h3><ol><li>我们需要<code>setup.s</code>源码中获取硬件信息的部分，需要解决的问题是将这些数据打印在屏幕上，利用了功能号为<code>0x0E</code>的<code>0x10</code>号中断，指导书写了一个<code>print_nl</code>来打印回车换行符，而我直接在打印的字符串中加入<code>13 10</code>实现回车换行</li></ol><pre class="line-numbers language-none"><code class="language-none">INITSEG  &#x3D; 0x9000entry _start_start:    mov ah,#0x03     ; read cursor pos    xor bh,bh    int 0x10    mov cx,#25       ; Print &quot;NOW we are in SETUP&quot;    mov bx,#0x0007    mov bp,#msg2     mov ax,cs        ; cs: 0x07e0    mov es,ax    mov ax,#0x1301    int 0x10; Get Cursor Pos    mov ax,#INITSEG    mov ds,ax    mov ah,#0x03    xor bh,bh    int 0x10    mov [0],dx  ; store in 9000:0; Get Memory Size    mov ah,#0x88    int 0x15    mov [2],ax      ; store in 9000:2; Get hd0 data    mov ax,#0x0000    mov ds,ax       ; modify ds    lds si,[4*0x41]    mov ax,#INITSEG    mov es,ax           mov di,#0x0004  ; store in 9000:4    mov cx,#0x10    rep    movsb! Be Ready to Print    mov ax,cs       ; 0x07e0    mov es,ax    mov ax,#INITSEG ; 9000    mov ds,ax; print Cursor Position    mov cx,#18    mov bx,#0x0007    mov bp,#msg_cursor    mov ax,#0x1301    int 0x10    mov dx,[0]  ; pass hex number through register dx to function print_hex    call    print_hex; print Memory Size    mov ah,#0x03    xor bh,bh    int 0x10    mov cx,#14    mov bx,#0x0007    mov bp,#msg_memory    mov ax,#0x1301    int 0x10    mov dx,[2]      call    print_hex; print KB    mov ah,#0x03    xor bh,bh    int 0x10    mov cx,#2    mov bx,#0x0007    mov bp,#msg_kb    mov ax,#0x1301    int 0x10; print Cyles    mov ah,#0x03    xor bh,bh    int 0x10    mov cx,#7    mov bx,#0x0007    mov bp,#msg_cyles    mov ax,#0x1301    int 0x10    mov dx,[4]    call    print_hex; print Heads    mov ah,#0x03    xor bh,bh    int 0x10    mov cx,#8    mov bx,#0x0007    mov bp,#msg_heads    mov ax,#0x1301    int 0x10    mov dx,[6]    call    print_hex; print Secotrs    mov ah,#0x03    xor bh,bh    int 0x10    mov cx,#10    mov bx,#0x0007    mov bp,#msg_sectors    mov ax,#0x1301    int 0x10    mov dx,[12]    call    print_hexinf_loop:    jmp inf_loopprint_hex:    mov    cx,#4print_digit:    rol    dx,#4   ; rotate left    mov    ax,#0xe0f     and    al,dl   ; fetch low 4 bits    add    al,#0x30    ; 0~9    cmp    al,#0x3a        jl     outp    add    al,#0x07    ; a~f , add more 0x07outp:    int    0x10    loop   print_digit    retmsg2:    .byte 13,10    .ascii &quot;NOW we are in SETUP&quot;    .byte 13,10,13,10msg_cursor:    .byte 13,10    .ascii &quot;Cursor position:&quot;msg_memory:    .byte 13,10    .ascii &quot;Memory Size:&quot;msg_cyles:    .byte 13,10    .ascii &quot;Cyls:&quot;msg_heads:    .byte 13,10    .ascii &quot;Heads:&quot;msg_sectors:    .byte 13,10    .ascii &quot;Sectors:&quot;msg_kb:    .ascii &quot;KB&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>结果</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679390498885-fa17ae6d-b23d-42a3-b330-8ebfc78ec9e1.png#averageHue=%231d1d1c&amp;clientId=u65b4c6eb-4a7f-4&amp;from=paste&amp;height=453&amp;id=uded74e2b&amp;originHeight=559&amp;originWidth=896&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=43381&amp;status=done&amp;style=none&amp;taskId=uf6a85f2d-73a3-4faa-9cc6-46206197425&amp;title=&amp;width=725.328125" alt="image.png" /><br /><a name="zTa0D"></a></p><h1 id="实验2-系统调用"><a class="markdownIt-Anchor" href="#实验2-系统调用"></a> 实验2 系统调用</h1><hr /><p><a name="JOp3O"></a></p><h2 id="1-编写接口函数iam-whoami"><a class="markdownIt-Anchor" href="#1-编写接口函数iam-whoami"></a> 1. 编写接口函数iam, whoami</h2><p>跟<code>write</code>一样，在接口函数文件内调用宏函数<code>_syscall1</code>或<code>_syscall2</code>（依参数个数而定），程序内包括后续用于测试系统调用的<code>main</code>函数。<br />iam.c</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__LIBRARY__</span>   <span class="token comment">// 定义了这个宏，unistd.h中的一个条件编译块才会编译</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span><span class="token function">_syscall1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> iam<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">iam</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>whoami.c</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__LIBRARY__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token function">_syscall2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> whoami<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> username<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">whoami</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"username: %s\n"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="W3D3k"></a></p><h2 id="2-修改unistdh"><a class="markdownIt-Anchor" href="#2-修改unistdh"></a> 2. 修改unistd.h</h2><p>可以跳过这步，因为之后的编译过程所用到的<code>unistd.h</code>头文件并不在这个源码树下，而是在标准头文件<code>/usr/include</code>下。<br />在<code>linux-0.11/include/unistd.h</code>添加宏<code>_NR_whoami</code>、<code>_NR_iam</code>以在<code>_syscall*</code>函数中传递正确的参数给<code>0x80</code>号中断处理程序<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679572755150-a56cb4f4-d15c-4ae1-9805-281eeb789ef7.png#averageHue=%23292929&amp;clientId=uf07d0e56-512f-4&amp;from=paste&amp;height=413&amp;id=ufd549e7e&amp;originHeight=558&amp;originWidth=1370&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=241240&amp;status=done&amp;style=none&amp;taskId=u866e49d8-c96e-4501-a177-307f9157abc&amp;title=&amp;width=1014.814886503918" alt="image.png" /><br /><a name="u7wVb"></a></p><h2 id="3-修改_sys_call_table函数表"><a class="markdownIt-Anchor" href="#3-修改_sys_call_table函数表"></a> 3. 修改_sys_call_table函数表</h2><p>在<code>linux-0.11/include/linux/sys.h</code>添加函数指针<code>sys_whoami</code>、<code>sys_iam</code>，函数在<code>sys_call_table</code>数组中的位置必须和在<code>&lt;unistd.h&gt;</code>文件中的<code>__NR_xxxxxx</code>的值对应上。在文件开头加上<code>extern</code>是让编译器在其它文件寻找这两个函数<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679573228960-b5285a35-85b6-4209-8ae9-b138c0d50cb6.png#averageHue=%232a2a2a&amp;clientId=u33e52eb9-8f95-4&amp;from=paste&amp;height=514&amp;id=ud13dda37&amp;originHeight=694&amp;originWidth=1410&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=416921&amp;status=done&amp;style=none&amp;taskId=u00862be4-becc-4d75-a056-a82d7ed996f&amp;title=&amp;width=1044.4445182266602" alt="image.png" /><br /><a name="dhvNt"></a></p><h2 id="4-实现函数sys_whoami-sys_iam"><a class="markdownIt-Anchor" href="#4-实现函数sys_whoami-sys_iam"></a> 4. 实现函数sys_whoami, sys_iam</h2><p>在<code>linux-0.11/kernel/iamwho.c</code>中编写最终的执行函数，执行这两个函数是系统调用的最后一步<br />在 Linux-0.11 内核中，<code>get_fs_byte</code> 和 <code>put_fs_byte</code> 函数用于在用户空间和内核空间之间传输数据。<br /><code>get_fs_byte</code> 函数从用户空间读取一个字节到内核空间。它接受一个指向用户空间内存地址的指针，并返回从该地址读取的字节。<br /><code>put_fs_byte</code> 函数则将一个字节从内核空间写入用户空间。它接受一个字节值和一个指向用户空间内存地址的指针。它将字节值写入指定的用户空间地址。<br />这两个函数在数据传输过程中起到了关键作用，使得内核可以与用户空间的应用程序进行安全地数据交换。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;asm/segment.h></span>  <span class="token comment">// get_fs_byte, put_fs_byte</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;errno.h></span></span><span class="token keyword">char</span> str_pos<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sys_iam</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> c <span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">get_fs_byte</span><span class="token punctuation">(</span>name<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        str_pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token operator">++</span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">23</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        errno <span class="token operator">=</span> EINVAL<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"elitezx lab2 string:  %s\n"</span><span class="token punctuation">,</span>str_pos <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">sys_whoami</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>size<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>str_pos<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        errno <span class="token operator">=</span> EINVAL<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> str_pos<span class="token punctuation">[</span>ans<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">put_fs_byte</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>name<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="aSQwE"></a></p><h2 id="5-执行"><a class="markdownIt-Anchor" href="#5-执行"></a> 5. 执行</h2><p>关于这部分，指导书说的比较详细了，我这里再补充一些：挂载hdc目录到虚拟机操作系统上，实现hdc目录在linux-0.11与ubuntu22.04之间的文件共享，我们把用于系统调用的测试程序<code>iam.c</code>，<code>whoami.c</code>复制到hdc目录就可以在Bochs模拟器下的linux-0.11环境中编译执行这两个文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ./mount-hdc <span class="token function">cp</span> iam.c whoami.c hdc/usr/root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679722650168-38ca1876-eae9-4f73-bcd7-9049e23c5f19.png#averageHue=%231d1d1d&amp;clientId=uece2d1bc-2718-4&amp;from=paste&amp;height=376&amp;id=u8f16972f&amp;originHeight=507&amp;originWidth=777&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=32649&amp;status=done&amp;style=none&amp;taskId=u93898fba-d497-4c31-b847-ed2fc5b1fcd&amp;title=&amp;width=575.555596214266" alt="image.png" /><br />注意在<code>iam.c</code>,<code>whoami.c</code>程序内的头文件<code>&lt;unistd.h&gt;</code>是标准头文件，是由GCC编译器一同安装的，它们通常随着GCC一起打包并分发，通常位于<code>/usr/include</code>目录下，而不是在之前修过的源码树下的<code>include/unistd.h</code>, 因此我们要转入<code>hdc/usr/include</code>下修改<code>&lt;unistd.h&gt;</code>，加入两个宏<code>__NR_iam</code>,<code>__NR_whoami</code><br />编译</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc <span class="token parameter variable">-o</span> iam iam.cgcc <span class="token parameter variable">-o</span> <span class="token function">whoami</span> whoami.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a name="GQLfS"></a></p><h2 id="6-验证结果"><a class="markdownIt-Anchor" href="#6-验证结果"></a> 6. 验证结果</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679724796210-81f3aae1-2a44-4b80-aae6-3028a859b73f.png#averageHue=%23ab9f84&amp;clientId=uece2d1bc-2718-4&amp;from=paste&amp;height=430&amp;id=u8fb9b579&amp;originHeight=580&amp;originWidth=983&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=66303&amp;status=done&amp;style=none&amp;taskId=u266c3a1b-1d68-4099-b48b-b886c550c27&amp;title=&amp;width=728.1481995863879" alt="image.png" /><br /><a name="ALw3l"></a></p><h1 id="实验3-进程运行轨迹的跟踪与统计"><a class="markdownIt-Anchor" href="#实验3-进程运行轨迹的跟踪与统计"></a> 实验3 进程运行轨迹的跟踪与统计</h1><hr /><p><a name="Vy8dW"></a></p><h2 id="1-前提"><a class="markdownIt-Anchor" href="#1-前提"></a> 1. 前提</h2><p><a name="zXQo0"></a></p><h3 id="11-系统调用times"><a class="markdownIt-Anchor" href="#11-系统调用times"></a> 1.1. 系统调用times</h3><p><code>times</code>系统调用接受一个<code>struct tms*</code>类型的参数，该结构体用于保存进程和其子进程的 CPU 时间信息，同时 times 系统调用会返回一个滴答数，即时钟周期数，该滴答数表示自OS启动以来经过的时钟周期数。<br /><code>struct tms</code>类型在<code>include/sys/times.h</code>中定义如下：<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680080228119-8e4f099c-80bb-400b-a9c4-1707bb900cb4.png#averageHue=%23fcfbfa&amp;clientId=uf8821459-f9ef-4&amp;from=paste&amp;height=294&amp;id=u5c5af96f&amp;originHeight=463&amp;originWidth=915&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=86220&amp;status=done&amp;style=none&amp;taskId=u227088fb-be53-4659-8beb-57d4b3ebbc7&amp;title=&amp;width=581.77783203125" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680081641847-9ce0ae8e-ea7d-426d-982a-c4ab275e0050.png#averageHue=%23fdfcfc&amp;clientId=uf8821459-f9ef-4&amp;from=paste&amp;height=81&amp;id=u1e48b640&amp;originHeight=109&amp;originWidth=1188&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=24401&amp;status=done&amp;style=none&amp;taskId=u110b85ba-8c80-4079-ae38-3ccfc24a576&amp;title=&amp;width=880.0000621654414" alt="image.png" /><br /><code>tms_stime</code>和<code>tms_utime</code>分别记录了进程在内核态和用户态下消耗的CPU时间总和，它们的和就是进程从开始执行到调用times系统调用所经过的时间。<code>tms_stime</code>和<code>tms_utime</code>并不包括进程在睡眠状态或等待I/O操作中所消耗的时间，因此它们的和也不等于进程的实际运行时间。<br />注意这里时间的单位是CPU的滴答时间（tick），一个滴答数表示两个时钟中断的间隔。在Linux系统中，时钟中断通常由硬件定时器产生，定时器会以固定的频率向CPU发送中断信号。**每当时钟中断发生时，内核会将当前进程的时间片计数器减 1，内核会检查当前进程的时间片（counter）是否已经用完，如果用完了，就将当前进程放到就绪队列中，然后调用调度函数 schedule 选择一个新的进程运行。**这个频率通常是100Hz，即一秒发生100次，也就是说时间中断的间隔为10ms（1/100s），每隔10ms就发生一次时钟中断，linux内核中的<code>jiffies</code>变量就记录了时间中断的个数，即滴答数。那么可以看出这里的时间单位既然是滴答数，而滴答数10ms产生一个，那么实际时间应该是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>i</mi><mi>c</mi><mi>k</mi><mi>s</mi><mi mathvariant="normal">/</mi><mn>100</mn></mrow><annotation encoding="application/x-tex">ticks/100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">s</span><span class="mord">/</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span> (秒)，100是常量<code>HZ</code>的值<br />由此，如果想获取一个进程从开始到结束的CPU使用时间，即用户态下CPU时间和内核态下CPU时间之和，可用如下函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/times.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">tms</span> t<span class="token punctuation">;</span>    clock_t clock_time<span class="token punctuation">;</span>    <span class="token comment">// 获取进程的CPU时间统计信息</span>    clock_time <span class="token operator">=</span> <span class="token function">times</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 计算进程的总的CPU时间</span>    <span class="token keyword">double</span> cpu_time <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>tms_utime <span class="token operator">+</span> t<span class="token punctuation">.</span>tms_stime<span class="token punctuation">)</span> <span class="token operator">/</span> HZ<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Total CPU time: %.2f seconds\n"</span><span class="token punctuation">,</span> cpu_time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用到的<code>clock_t</code>在<code>include/time.h</code>中定义如下<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680082042776-a6814d15-253d-43cb-be0a-4d3e2fa9819e.png#averageHue=%23fdfcfb&amp;clientId=uf8821459-f9ef-4&amp;from=paste&amp;height=67&amp;id=uf3bbfd6f&amp;originHeight=91&amp;originWidth=1143&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=24657&amp;status=done&amp;style=none&amp;taskId=ub62b64bd-cb85-441a-bfbf-5d591e528b7&amp;title=&amp;width=846.6667264773564" alt="image.png" /><br /><a name="eLIVz"></a></p><h3 id="12-系统调用wait"><a class="markdownIt-Anchor" href="#12-系统调用wait"></a> 1.2. 系统调用wait</h3><p><code>wait</code> 函数是一个系统调用（位于<code>include/sys/wait.h</code>）。在Unix/Linux操作系统中，<code>wait</code>函数可以等待子进程结束，并获取子进程的退出状态。在使用<code>wait</code>函数时，如果子进程已经结束，<code>wait</code>函数会立即返回并返回子进程的退出状态；如果子进程还没有结束，<code>wait</code>函数会阻塞父进程，直到子进程结束并返回其退出状态。具体来说，<code>wait</code> 函数的作用如下：<br />1 如果当前进程没有子进程，<code>wait</code> 函数会立即返回 <code>-1</code>，并设置 <code>errno</code> 为 <code>ECHILD</code>，表示当前进程没有子进程需要等待。<br />2 如果当前进程有一个或多个子进程正在运行，调用 <code>wait</code> 函数会阻塞当前进程，直到其中一个子进程结束。当子进程结束时，<code>wait </code>函数会返回该子进程的进程 ID，并将该子进程的退出状态保存到一个整型变量<code>status</code>中。<br />3 如果当前进程有多个子进程正在运行，调用<code>wait</code>函数会等待其中任意一个子进程结束，并且无法指定要等待哪个子进程。如果需要等待特定的子进程，可以使用 <code>waitpid</code>函数代替<code>wait</code>函数。<br />需要注意的是，如果当前进程没有调用wait函数等待其子进程结束，那么当子进程结束时，其退出状态可能会一直保存在内核中，直到当前进程调用<code>wait</code>或<code>waitpid</code>函数获取该状态。如果当前进程没有获取子进程的退出状态，那么该子进程就会成为僵尸进程（Zombie Process），占用系统资源并且无法被正常清理。<br />因此，在编写多进程程序时，通常需要在父进程中调用<code>wait</code>或<code>waitpid</code>函数等待子进程结束，并获取其退出状态，以避免产生僵尸进程。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680090411853-3ca6d5fc-a85f-4018-b853-38d6b5eab55c.png#averageHue=%23f0f0f0&amp;clientId=ud7b45409-87b8-4&amp;from=paste&amp;height=245&amp;id=uc11188b1&amp;originHeight=383&amp;originWidth=1132&amp;originalType=binary&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;size=153979&amp;status=done&amp;style=none&amp;taskId=ue946029c-b4a7-4c74-903e-d7348704955&amp;title=&amp;width=724.48" alt="image.png" /><br />对linux0.11 wait函数必须接受一个<code>int</code>参数以保存子进程退出状态，如果你不想保存该信息，可传递<code>NULL</code>。而在现代linux中，该参数为可选参数。<br /><a name="qPe7c"></a></p><h3 id="13-linux011中进程的state值"><a class="markdownIt-Anchor" href="#13-linux011中进程的state值"></a> 1.3. linux0.11中进程的state值</h3><p>在Linux 0.11中，进程状态可以被表示为以下几个值：</p><ol><li><code>TASK_RUNNING</code>：进程正在执行，也就是说CPU正在执行它的指令。但是，如果一个进程的状态为<code>TASK_RUNNING</code>，而它又没有占用CPU时间片运行，那么它就是处于就绪态。</li><li><code>TASK_INTERRUPTIBLE</code>：进程正在等待某个事件的发生（例如，等待用户输入、等待网络数据等），它已经睡眠，并且可以响应一个信号以退出等待状态。</li><li><code>TASK_UNINTERRUPTIBLE</code>：和<code>TASK_INTERRUPTIBLE</code>一样，进程也是正在等待某个事件的发生，但是进程在等待期间不会响应信号，直到事件发生后才会退出等待状态，比如I/O操作。</li><li><code>TASK_STOPPED</code>：进程已经被停止，通常是收到了一个SIGSTOP信号。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680423221854-cc012464-a635-471f-8978-9e5a9bca7ae9.png#averageHue=%23fbf9f7&amp;clientId=u36208795-4bd0-4&amp;from=paste&amp;height=151&amp;id=u89a07fa0&amp;originHeight=204&amp;originWidth=1173&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=true&amp;size=108104&amp;status=done&amp;style=none&amp;taskId=u3d9817ff-dff7-4f86-84ad-0f193cbddb3&amp;title=include%2Flinux%2Fsched.h&amp;width=868.888950269413" alt="include/linux/sched.h" title="include/linux/sched.h" /><br /><a name="BqcgZ"></a></p><h2 id="2-processc"><a class="markdownIt-Anchor" href="#2-processc"></a> 2. process.c</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;sys/times.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;sys/wait.h></span></span><span class="token keyword">void</span> <span class="token function">cpuio_bound</span><span class="token punctuation">(</span><span class="token keyword">int</span> last<span class="token punctuation">,</span> <span class="token keyword">int</span> cpu_time<span class="token punctuation">,</span> <span class="token keyword">int</span> io_time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pid_t son_proc_pid<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> <span class="token punctuation">(</span>son_proc_pid<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">cpuio_bound</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">20</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child_process_pid: %d\n"</span><span class="token punctuation">,</span> son_proc_pid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">cpuio_bound</span><span class="token punctuation">(</span><span class="token keyword">int</span> last<span class="token punctuation">,</span> <span class="token keyword">int</span> cpu_time<span class="token punctuation">,</span> <span class="token keyword">int</span> io_time<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">tms</span> start<span class="token punctuation">,</span> pre<span class="token punctuation">;</span>clock_t sum_cpu_time <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>clock_t accumulate <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">times</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>sum_cpu_time <span class="token operator">&lt;</span> cpu_time<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">times</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span>sum_cpu_time <span class="token operator">=</span> <span class="token punctuation">(</span>pre<span class="token punctuation">.</span>tms_utime <span class="token operator">-</span> start<span class="token punctuation">.</span>tms_utime <span class="token operator">+</span> pre<span class="token punctuation">.</span>tms_stime <span class="token operator">-</span> pre<span class="token punctuation">.</span>tms_stime<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sum_cpu_time<span class="token operator">>=</span>last<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token function">sleep</span><span class="token punctuation">(</span>io_time<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>accumulate<span class="token operator">+=</span> io_time <span class="token operator">+</span> cpu_time<span class="token punctuation">)</span><span class="token operator">>=</span>last<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680091964283-677f3934-2877-4b47-bb90-8de524ca7631.png#averageHue=%23016b01&amp;clientId=ueafc2590-6fa1-4&amp;from=paste&amp;height=560&amp;id=u6a843c73&amp;originHeight=875&amp;originWidth=1271&amp;originalType=binary&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;size=321878&amp;status=done&amp;style=none&amp;taskId=u1fca88b5-6987-447d-a8dc-b9523e8f249&amp;title=&amp;width=813.44" alt="image.png" /><br /><a name="TtxLI"></a></p><h2 id="3-生成log的前置工作"><a class="markdownIt-Anchor" href="#3-生成log的前置工作"></a> 3. 生成log的前置工作</h2><ol><li>修改<code>linux-0.11/init/main.c</code>，将文件描述符<code>3</code>与<code>process.log</code>关联。文件描述符是一个非负整数，它是操作系统内部用来标识一个特定文件的引用。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680092845738-eb1c4f7b-85cd-4bda-8eaf-a3c9f2965bd9.png#averageHue=%23404040&amp;clientId=uf8821459-f9ef-4&amp;from=paste&amp;height=356&amp;id=u59def16c&amp;originHeight=480&amp;originWidth=1482&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=257225&amp;status=done&amp;style=none&amp;taskId=u48dfe7b1-b671-4b96-b4c4-ab3217f6fa5&amp;title=&amp;width=1097.777855327596" alt="image.png" /></p><ol start="2"><li>在内核中添加<code>fprintk</code>函数用于在程序中调用以写入log文件</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/sched.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token keyword">static</span> <span class="token keyword">char</span> logbuf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">fprintk</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fmt<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    va_list args<span class="token punctuation">;</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span> file<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">m_inode</span> <span class="token operator">*</span> inode<span class="token punctuation">;</span>    <span class="token function">va_start</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> fmt<span class="token punctuation">)</span><span class="token punctuation">;</span>    count<span class="token operator">=</span><span class="token function">vsprintf</span><span class="token punctuation">(</span>logbuf<span class="token punctuation">,</span> fmt<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">va_end</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment">/* 如果输出到stdout或stderr，直接调用sys_write即可 */</span>    <span class="token punctuation">&#123;</span>        <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">"push %%fs\n\t"</span>            <span class="token string">"push %%ds\n\t"</span>            <span class="token string">"pop %%fs\n\t"</span>            <span class="token string">"pushl %0\n\t"</span>            <span class="token string">"pushl $logbuf\n\t"</span> <span class="token comment">/* 注意对于Windows环境来说，是_logbuf,下同 */</span>            <span class="token string">"pushl %1\n\t"</span>            <span class="token string">"call sys_write\n\t"</span> <span class="token comment">/* 注意对于Windows环境来说，是_sys_write,下同 */</span>            <span class="token string">"addl $8,%%esp\n\t"</span>            <span class="token string">"popl %0\n\t"</span>            <span class="token string">"pop %%fs"</span>            <span class="token double-colon punctuation">::</span><span class="token string">"r"</span> <span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"r"</span> <span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">"ax"</span><span class="token punctuation">,</span><span class="token string">"cx"</span><span class="token punctuation">,</span><span class="token string">"dx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token comment">/* 假定>=3的描述符都与文件关联。事实上，还存在很多其它情况，这里并没有考虑。*/</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>file<span class="token operator">=</span>task<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>filp<span class="token punctuation">[</span>fd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">/* 从进程0的文件描述符表中得到文件句柄 */</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        inode<span class="token operator">=</span>file<span class="token operator">-></span>f_inode<span class="token punctuation">;</span>        <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">"push %%fs\n\t"</span>            <span class="token string">"push %%ds\n\t"</span>            <span class="token string">"pop %%fs\n\t"</span>            <span class="token string">"pushl %0\n\t"</span>            <span class="token string">"pushl $logbuf\n\t"</span>            <span class="token string">"pushl %1\n\t"</span>            <span class="token string">"pushl %2\n\t"</span>            <span class="token string">"call file_write\n\t"</span>            <span class="token string">"addl $12,%%esp\n\t"</span>            <span class="token string">"popl %0\n\t"</span>            <span class="token string">"pop %%fs"</span>            <span class="token double-colon punctuation">::</span><span class="token string">"r"</span> <span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"r"</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"r"</span> <span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">"ax"</span><span class="token punctuation">,</span><span class="token string">"cx"</span><span class="token punctuation">,</span><span class="token string">"dx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>修改fork.c</li></ol><p>进程在创建后就立马被设置为就绪态<code>TASK_RUNNING</code><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680418919364-03d91541-3641-4d47-a424-34ea2bca802d.png#averageHue=%23340a19&amp;clientId=uf67f330f-a4ae-4&amp;from=paste&amp;height=204&amp;id=u37425a43&amp;originHeight=276&amp;originWidth=1287&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=89012&amp;status=done&amp;style=none&amp;taskId=u293f4087-df5d-429c-990e-d462e4a802f&amp;title=&amp;width=953.3334006792281" alt="image.png" /></p><ol start="4"><li>修改sched.c</li></ol><p>在进程的状态切换点打印进程的状态信息</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* *  linux/kernel/sched.c * *  (C) 1991  Linus Torvalds */</span><span class="token comment">/* * 'sched.c' is the main kernel file. It contains scheduling primitives * (sleep_on, wakeup, schedule etc) as well as a number of simple system * call functions (type getpid(), which just extracts a field from * current-task */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/sched.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/kernel.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/sys.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/fdreg.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;asm/system.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;asm/io.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;asm/segment.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">_S</span><span class="token expression"><span class="token punctuation">(</span>nr<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_BLOCKABLE</span> <span class="token expression"><span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token function">_S</span><span class="token punctuation">(</span>SIGKILL<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">_S</span><span class="token punctuation">(</span>SIGSTOP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token keyword">void</span> <span class="token function">show_task</span><span class="token punctuation">(</span><span class="token keyword">int</span> nr<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">4096</span><span class="token operator">-</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"%d: pid=%d, state=%d, "</span><span class="token punctuation">,</span>nr<span class="token punctuation">,</span>p<span class="token operator">-></span>pid<span class="token punctuation">,</span>p<span class="token operator">-></span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>    i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"%d (of %d) chars free in kernel stack\n\r"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">show_stat</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>NR_TASKS<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">show_task</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LATCH</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1193180</span><span class="token operator">/</span>HZ<span class="token punctuation">)</span></span></span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">mem_use</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">timer_interrupt</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">system_call</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">union</span> task_union <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> task<span class="token punctuation">;</span>    <span class="token keyword">char</span> stack<span class="token punctuation">[</span>PAGE_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">union</span> task_union init_task <span class="token operator">=</span> <span class="token punctuation">&#123;</span>INIT_TASK<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">volatile</span> jiffies<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">long</span> startup_time<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>current <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>init_task<span class="token punctuation">.</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>last_task_used_math <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span> task<span class="token punctuation">[</span>NR_TASKS<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>init_task<span class="token punctuation">.</span>task<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">long</span> user_stack <span class="token punctuation">[</span> PAGE_SIZE<span class="token operator">>></span><span class="token number">2</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> <span class="token operator">*</span> a<span class="token punctuation">;</span>    <span class="token keyword">short</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> stack_start <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">&amp;</span> user_stack <span class="token punctuation">[</span>PAGE_SIZE<span class="token operator">>></span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token number">0x10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/* *  'math_state_restore()' saves the current math information in the * old math state array, and gets the new ones from the current task */</span><span class="token keyword">void</span> <span class="token function">math_state_restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>last_task_used_math <span class="token operator">==</span> current<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">"fwait"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>last_task_used_math<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">"fnsave %0"</span><span class="token operator">::</span><span class="token string">"m"</span> <span class="token punctuation">(</span>last_task_used_math<span class="token operator">-></span>tss<span class="token punctuation">.</span>i387<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    last_task_used_math<span class="token operator">=</span>current<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-></span>used_math<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">"frstor %0"</span><span class="token operator">::</span><span class="token string">"m"</span> <span class="token punctuation">(</span>current<span class="token operator">-></span>tss<span class="token punctuation">.</span>i387<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">"fninit"</span><span class="token operator">::</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        current<span class="token operator">-></span>used_math<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* *  'schedule()' is the scheduler function. This is GOOD CODE! There * probably won't be any reason to change this, as it should work well * in all circumstances (ie gives IO-bound processes good response etc). * The one thing you might take a look at is the signal-handler code here. * *   NOTE!!  Task 0 is the 'idle' task, which gets called when no other * tasks can run. It can not be killed, and it cannot sleep. The 'state' * information in task[0] is never used. */</span><span class="token keyword">void</span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>next<span class="token punctuation">,</span>c<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span> p<span class="token punctuation">;</span>    <span class="token comment">/* check alarm, wake up any interruptible tasks that have got a signal */</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>LAST_TASK <span class="token punctuation">;</span> p <span class="token operator">></span> <span class="token operator">&amp;</span>FIRST_TASK <span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>alarm <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>alarm <span class="token operator">&lt;</span> jiffies<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>signal <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>SIGALRM<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>alarm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>signal <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>_BLOCKABLE <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>blocked<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>state<span class="token operator">==</span>TASK_INTERRUPTIBLE<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>state<span class="token operator">=</span>TASK_RUNNING<span class="token punctuation">;</span>                <span class="token comment">/*可中断睡眠 => 就绪*/</span>                <span class="token function">fprintk</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"%d\tJ\t%d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>pid<span class="token punctuation">,</span>jiffies<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">/* this is the scheduler proper: */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> NR_TASKS<span class="token punctuation">;</span>        p <span class="token operator">=</span> <span class="token operator">&amp;</span>task<span class="token punctuation">[</span>NR_TASKS<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span><span class="token operator">--</span>p<span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>state <span class="token operator">==</span> TASK_RUNNING <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>counter <span class="token operator">></span> c<span class="token punctuation">)</span>                c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>counter<span class="token punctuation">,</span> next <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>LAST_TASK <span class="token punctuation">;</span> p <span class="token operator">></span> <span class="token operator">&amp;</span>FIRST_TASK <span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span>                <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>counter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>counter <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>priority<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*编号为next的进程 运行*/</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>current<span class="token operator">-></span>pid <span class="token operator">!=</span> task<span class="token punctuation">[</span>next<span class="token punctuation">]</span> <span class="token operator">-></span>pid<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">/*时间片到时程序 => 就绪*/</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>current<span class="token operator">-></span>state <span class="token operator">==</span> TASK_RUNNING<span class="token punctuation">)</span>            <span class="token function">fprintk</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"%d\tJ\t%d\n"</span><span class="token punctuation">,</span>current<span class="token operator">-></span>pid<span class="token punctuation">,</span>jiffies<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fprintk</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"%d\tR\t%d\n"</span><span class="token punctuation">,</span>task<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token operator">-></span>pid<span class="token punctuation">,</span>jiffies<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">switch_to</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">sys_pause</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    current<span class="token operator">-></span>state <span class="token operator">=</span> TASK_INTERRUPTIBLE<span class="token punctuation">;</span>    <span class="token comment">/**当前进程  运行 => 可中断睡眠*/</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>current<span class="token operator">-></span>pid <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">fprintk</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"%d\tW\t%d\n"</span><span class="token punctuation">,</span>current<span class="token operator">-></span>pid<span class="token punctuation">,</span>jiffies<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>init_task<span class="token punctuation">.</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"task[0] trying to sleep"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tmp <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token operator">*</span>p <span class="token operator">=</span> current<span class="token punctuation">;</span>    current<span class="token operator">-></span>state <span class="token operator">=</span> TASK_UNINTERRUPTIBLE<span class="token punctuation">;</span>    <span class="token comment">/**当前进程进程 => 不可中断睡眠*/</span>    <span class="token function">fprintk</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"%d\tW\t%d\n"</span><span class="token punctuation">,</span>current<span class="token operator">-></span>pid<span class="token punctuation">,</span>jiffies<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        tmp<span class="token operator">-></span>state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">/**原等待队列 第一个进程 => 唤醒（就绪）*/</span>        <span class="token function">fprintk</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"%d\tJ\t%d\n"</span><span class="token punctuation">,</span>tmp<span class="token operator">-></span>pid<span class="token punctuation">,</span>jiffies<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">interruptible_sleep_on</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>init_task<span class="token punctuation">.</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"task[0] trying to sleep"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tmp<span class="token operator">=</span><span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token operator">*</span>p<span class="token operator">=</span>current<span class="token punctuation">;</span>    repeat<span class="token operator">:</span>current<span class="token operator">-></span>state <span class="token operator">=</span> TASK_INTERRUPTIBLE<span class="token punctuation">;</span>    <span class="token comment">/**这一部分属于 唤醒队列中间进程，通过goto实现唤醒 队列头进程 过程中Wait*/</span>    <span class="token function">fprintk</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"%d\tW\t%d\n"</span><span class="token punctuation">,</span>current<span class="token operator">-></span>pid<span class="token punctuation">,</span>jiffies<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>p <span class="token operator">!=</span> current<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">/**当前进程进程 => 可中断睡眠 同上*/</span>        <span class="token function">fprintk</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"%d\tJ\t%d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>pid<span class="token punctuation">,</span>jiffies<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">goto</span> repeat<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">*</span>p<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        tmp<span class="token operator">-></span>state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">/**原等待队列 第一个进程 => 唤醒（就绪）*/</span>        <span class="token function">fprintk</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"%d\tJ\t%d\n"</span><span class="token punctuation">,</span>tmp<span class="token operator">-></span>pid<span class="token punctuation">,</span>jiffies<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">/**唤醒 最后进入等待序列的 进程*/</span>        <span class="token function">fprintk</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"%d\tJ\t%d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>pid<span class="token punctuation">,</span>jiffies<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span>p<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * OK, here are some floppy things that shouldn't be in the kernel * proper. They are here because the floppy needs a timer, and this * was the easiest way of doing it. */</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span> wait_motor<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span>  mon_timer<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> moff_timer<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> current_DOR <span class="token operator">=</span> <span class="token number">0x0C</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">ticks_to_floppy_on</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> nr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> selected<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> mask <span class="token operator">=</span> <span class="token number">0x10</span> <span class="token operator">&lt;&lt;</span> nr<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nr<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"floppy_on: nr>3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    moff_timer<span class="token punctuation">[</span>nr<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">;</span><span class="token comment">/* 100 s = very big :-) */</span>    <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* use floppy_off to turn it off */</span>    mask <span class="token operator">|=</span> current_DOR<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>selected<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mask <span class="token operator">&amp;=</span> <span class="token number">0xFC</span><span class="token punctuation">;</span>        mask <span class="token operator">|=</span> nr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mask <span class="token operator">!=</span> current_DOR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">outb</span><span class="token punctuation">(</span>mask<span class="token punctuation">,</span>FD_DOR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mask <span class="token operator">^</span> current_DOR<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xf0</span><span class="token punctuation">)</span>            mon_timer<span class="token punctuation">[</span>nr<span class="token punctuation">]</span> <span class="token operator">=</span> HZ<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mon_timer<span class="token punctuation">[</span>nr<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>            mon_timer<span class="token punctuation">[</span>nr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        current_DOR <span class="token operator">=</span> mask<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mon_timer<span class="token punctuation">[</span>nr<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">floppy_on</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> nr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">ticks_to_floppy_on</span><span class="token punctuation">(</span>nr<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">sleep_on</span><span class="token punctuation">(</span>nr<span class="token operator">+</span>wait_motor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">floppy_off</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> nr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    moff_timer<span class="token punctuation">[</span>nr<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">3</span><span class="token operator">*</span>HZ<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">do_floppy_timer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> mask <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">4</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span>mask <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>mask <span class="token operator">&amp;</span> current_DOR<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mon_timer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">--</span>mon_timer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token function">wake_up</span><span class="token punctuation">(</span>i<span class="token operator">+</span>wait_motor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>moff_timer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            current_DOR <span class="token operator">&amp;=</span> <span class="token operator">~</span>mask<span class="token punctuation">;</span>            <span class="token function">outb</span><span class="token punctuation">(</span>current_DOR<span class="token punctuation">,</span>FD_DOR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span>            moff_timer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TIME_REQUESTS</span> <span class="token expression"><span class="token number">64</span></span></span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">timer_list</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> jiffies<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">timer_list</span> <span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> timer_list<span class="token punctuation">[</span>TIME_REQUESTS<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span> next_timer <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add_timer</span><span class="token punctuation">(</span><span class="token keyword">long</span> jiffies<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">timer_list</span> <span class="token operator">*</span> p<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>jiffies <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> timer_list <span class="token punctuation">;</span> p <span class="token operator">&lt;</span> timer_list <span class="token operator">+</span> TIME_REQUESTS <span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token operator">-></span>fn<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">>=</span> timer_list <span class="token operator">+</span> TIME_REQUESTS<span class="token punctuation">)</span>            <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"No more time requests free"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">-></span>fn <span class="token operator">=</span> fn<span class="token punctuation">;</span>        p<span class="token operator">-></span>jiffies <span class="token operator">=</span> jiffies<span class="token punctuation">;</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> next_timer<span class="token punctuation">;</span>        next_timer <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>next <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>next<span class="token operator">-></span>jiffies <span class="token operator">&lt;</span> p<span class="token operator">-></span>jiffies<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            p<span class="token operator">-></span>jiffies <span class="token operator">-=</span> p<span class="token operator">-></span>next<span class="token operator">-></span>jiffies<span class="token punctuation">;</span>            fn <span class="token operator">=</span> p<span class="token operator">-></span>fn<span class="token punctuation">;</span>            p<span class="token operator">-></span>fn <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token operator">-></span>fn<span class="token punctuation">;</span>            p<span class="token operator">-></span>next<span class="token operator">-></span>fn <span class="token operator">=</span> fn<span class="token punctuation">;</span>            jiffies <span class="token operator">=</span> p<span class="token operator">-></span>jiffies<span class="token punctuation">;</span>            p<span class="token operator">-></span>jiffies <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token operator">-></span>jiffies<span class="token punctuation">;</span>            p<span class="token operator">-></span>next<span class="token operator">-></span>jiffies <span class="token operator">=</span> jiffies<span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">do_timer</span><span class="token punctuation">(</span><span class="token keyword">long</span> cpl<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">extern</span> <span class="token keyword">int</span> beepcount<span class="token punctuation">;</span>    <span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">sysbeepstop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>beepcount<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">--</span>beepcount<span class="token punctuation">)</span>            <span class="token function">sysbeepstop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cpl<span class="token punctuation">)</span>        current<span class="token operator">-></span>utime<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        current<span class="token operator">-></span>stime<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>next_timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        next_timer<span class="token operator">-></span>jiffies<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>next_timer <span class="token operator">&amp;&amp;</span> next_timer<span class="token operator">-></span>jiffies <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fn <span class="token operator">=</span> next_timer<span class="token operator">-></span>fn<span class="token punctuation">;</span>            next_timer<span class="token operator">-></span>fn <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            next_timer <span class="token operator">=</span> next_timer<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current_DOR <span class="token operator">&amp;</span> <span class="token number">0xf0</span><span class="token punctuation">)</span>        <span class="token function">do_floppy_timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">--</span>current<span class="token operator">-></span>counter<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    current<span class="token operator">-></span>counter<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cpl<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">sys_alarm</span><span class="token punctuation">(</span><span class="token keyword">long</span> seconds<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> old <span class="token operator">=</span> current<span class="token operator">-></span>alarm<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>old<span class="token punctuation">)</span>        old <span class="token operator">=</span> <span class="token punctuation">(</span>old <span class="token operator">-</span> jiffies<span class="token punctuation">)</span> <span class="token operator">/</span> HZ<span class="token punctuation">;</span>    current<span class="token operator">-></span>alarm <span class="token operator">=</span> <span class="token punctuation">(</span>seconds<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">(</span>jiffies<span class="token operator">+</span>HZ<span class="token operator">*</span>seconds<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>old<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">sys_getpid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> current<span class="token operator">-></span>pid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">sys_getppid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> current<span class="token operator">-></span>father<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">sys_getuid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> current<span class="token operator">-></span>uid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">sys_geteuid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> current<span class="token operator">-></span>euid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">sys_getgid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> current<span class="token operator">-></span>gid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">sys_getegid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> current<span class="token operator">-></span>egid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">sys_nice</span><span class="token punctuation">(</span><span class="token keyword">long</span> increment<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-></span>priority<span class="token operator">-</span>increment<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>        current<span class="token operator">-></span>priority <span class="token operator">-=</span> increment<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">sched_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">desc_struct</span> <span class="token operator">*</span> p<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sigaction</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">16</span><span class="token punctuation">)</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"Struct sigaction MUST be 16 bytes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">set_tss_desc</span><span class="token punctuation">(</span>gdt<span class="token operator">+</span>FIRST_TSS_ENTRY<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>init_task<span class="token punctuation">.</span>task<span class="token punctuation">.</span>tss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">set_ldt_desc</span><span class="token punctuation">(</span>gdt<span class="token operator">+</span>FIRST_LDT_ENTRY<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>init_task<span class="token punctuation">.</span>task<span class="token punctuation">.</span>ldt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> gdt<span class="token operator">+</span><span class="token number">2</span><span class="token operator">+</span>FIRST_TSS_ENTRY<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>NR_TASKS<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        task<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        p<span class="token operator">-></span>a<span class="token operator">=</span>p<span class="token operator">-></span>b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        p<span class="token operator">++</span><span class="token punctuation">;</span>        p<span class="token operator">-></span>a<span class="token operator">=</span>p<span class="token operator">-></span>b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        p<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* Clear NT, so that we won't have troubles with that later on */</span>    <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">"pushfl ; andl $0xffffbfff,(%esp) ; popfl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ltr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lldt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">outb_p</span><span class="token punctuation">(</span><span class="token number">0x36</span><span class="token punctuation">,</span><span class="token number">0x43</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* binary, mode 3, LSB/MSB, ch 0 */</span>    <span class="token function">outb_p</span><span class="token punctuation">(</span>LATCH <span class="token operator">&amp;</span> <span class="token number">0xff</span> <span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* LSB */</span>    <span class="token function">outb</span><span class="token punctuation">(</span>LATCH <span class="token operator">>></span> <span class="token number">8</span> <span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* MSB */</span>    <span class="token function">set_intr_gate</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>timer_interrupt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">outb</span><span class="token punctuation">(</span><span class="token function">inb_p</span><span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token operator">~</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">set_system_gate</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>system_call<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sys_pause在Linux0.11中，<code>sys_pause()</code>系统调用的主要作用是让进程暂停执行，直到接收到一个信号。当进程调用<code>sys_pause()</code>系统调用时，它会将自己的状态设置为<code>TASK_INTERRUPTIBLE</code>，并且将其添加到等待信号队列中。然后，进程会进入睡眠状态，直到收到一个信号或者被其他进程显式地唤醒。<br />这个系统调用通常用于实现等待信号的操作，比如等待一个定时器信号或者等待一个IO操作完成的信号。在这种情况下，进程可以使用<code>sys_pause()</code>系统调用进入睡眠状态，而不必浪费CPU资源等待信号的到来。当信号到来时，内核会唤醒进程，并且将信号传递给进程的信号处理程序进行处理。<br />需要注意的是，在Linux 2.6以后的版本中，<code>sys_pause()</code>系统调用已经被废弃，被<code>sys_rt_sigsuspend()</code>系统调用所取代。<code>sys_rt_sigsuspend()</code>系统调用可以实现类似的等待信号的操作，并且提供更多的控制选项。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680156794185-dce974ae-e57c-4560-b22c-5f6bf5caee22.png#averageHue=%23fbf8f6&amp;clientId=u11640b7c-d1e3-4&amp;from=paste&amp;height=364&amp;id=u46c71fba&amp;originHeight=491&amp;originWidth=1238&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=243762&amp;status=done&amp;style=none&amp;taskId=u9adb656e-5edb-4706-9773-14fee2abbf6&amp;title=&amp;width=917.037101818869" alt="image.png" /></p><ol start="5"><li>修改exit.c</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">do_exit</span><span class="token punctuation">(</span><span class="token keyword">long</span> code<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token function">free_page_tables</span><span class="token punctuation">(</span><span class="token function">get_base</span><span class="token punctuation">(</span>current<span class="token operator">-></span>ldt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">get_limit</span><span class="token punctuation">(</span><span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free_page_tables</span><span class="token punctuation">(</span><span class="token function">get_base</span><span class="token punctuation">(</span>current<span class="token operator">-></span>ldt<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">get_limit</span><span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>NR_TASKS <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>father <span class="token operator">==</span> current<span class="token operator">-></span>pid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>father <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>state <span class="token operator">==</span> TASK_ZOMBIE<span class="token punctuation">)</span>                <span class="token comment">/* assumption task[1] is always init */</span>                <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">send_sig</span><span class="token punctuation">(</span>SIGCHLD<span class="token punctuation">,</span> task<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>NR_OPEN <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-></span>filp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">sys_close</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">iput</span><span class="token punctuation">(</span>current<span class="token operator">-></span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>    current<span class="token operator">-></span>pwd<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">iput</span><span class="token punctuation">(</span>current<span class="token operator">-></span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    current<span class="token operator">-></span>root<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">iput</span><span class="token punctuation">(</span>current<span class="token operator">-></span>executable<span class="token punctuation">)</span><span class="token punctuation">;</span>    current<span class="token operator">-></span>executable<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-></span>leader <span class="token operator">&amp;&amp;</span> current<span class="token operator">-></span>tty <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>        tty_table<span class="token punctuation">[</span>current<span class="token operator">-></span>tty<span class="token punctuation">]</span><span class="token punctuation">.</span>pgrp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>last_task_used_math <span class="token operator">==</span> current<span class="token punctuation">)</span>        last_task_used_math <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-></span>leader<span class="token punctuation">)</span>        <span class="token function">kill_session</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    current<span class="token operator">-></span>state <span class="token operator">=</span> TASK_ZOMBIE<span class="token punctuation">;</span>    current<span class="token operator">-></span>exit_code <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token function">fprintk</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"%ld\tE\t%ld\n"</span><span class="token punctuation">,</span>current<span class="token operator">-></span>pid<span class="token punctuation">,</span>jiffies<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">tell_father</span><span class="token punctuation">(</span>current<span class="token operator">-></span>father<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* just to suppress warnings */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>旁注：do_exit函数与sys_waitpid函数</strong></p><blockquote><p>在 Linux 0.11 中，<code>do_exit()</code> 函数负责终止一个进程。当一个进程调用 <code>do_exit()</code> 时，它会执行多个清理操作，包括释放进程持有的任何资源，如打开的文件和内存，并向父进程通知进程的退出状态。如果进程有任何子进程，则 <code>do_exit()</code> 也通过递归调用 <code>do_exit()</code> 终止它们。<br /><code>sys_waitpid() </code>函数用于等待子进程终止并检索其退出状态。当进程调用 <code>sys_waitpid()</code> 时，它会阻塞，直到其中一个子进程终止。如果子进程已经终止，<code>sys_waitpid() </code>将立即返回该子进程的退出状态。否则，它将继续阻塞，直到子进程终止。<br />除了等待特定的子进程外，<code>sys_waitpid() </code>还可以用于等待任何子进程终止，方法是通过传递<code> -1</code> 的 <code>pid</code> 参数。当一个进程有多个子进程并且想要等待第一个终止时，这很有用。</p></blockquote><p><a name="PLMGK"></a></p><h2 id="4-生成log"><a class="markdownIt-Anchor" href="#4-生成log"></a> 4. 生成log</h2><p>先共享文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./mount-hdc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>移动多进程程序<code>process.c</code>到linux-0.11目录下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> process.c hdc/usr/root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680102556459-4dae45b1-9b54-41b1-ac91-af3f975f8622.png#averageHue=%230cb804&amp;clientId=uc1e146a1-ff2e-4&amp;from=paste&amp;height=202&amp;id=u1b11e17d&amp;originHeight=182&amp;originWidth=801&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=18239&amp;status=done&amp;style=none&amp;taskId=u50fc4245-9bac-45f5-96f1-e1e5dd0e51c&amp;title=&amp;width=890.000023576949" alt="image.png" /><br />编译运行, 最后执行一个<code>sync</code>命令，确保将文件系统中的所有缓存数据写入磁盘<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680156855136-d0cd08e2-6520-4ccf-b809-43de45b15990.png#averageHue=%23222121&amp;clientId=u11640b7c-d1e3-4&amp;from=paste&amp;height=376&amp;id=uf77324e2&amp;originHeight=507&amp;originWidth=786&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=29997&amp;status=done&amp;style=none&amp;taskId=u51aea8a4-a9b1-412e-bbf5-7de3992819e&amp;title=&amp;width=582.2222633518829" alt="image.png" /><br /><strong>旁注: sync命令</strong></p><blockquote><p>sync 命令是用于将文件系统中的所有缓存数据写入磁盘的命令。在 Linux 中，当一个进程修改了一个文件时，这个修改不会立即写入磁盘，而是会先被写入内存中的缓存，以提高文件系统的性能。然而，如果系统崩溃或出现其他问题，这些修改可能会丢失。因此，为了保证数据的完整性，我们需要将缓存数据定期地写入磁盘中。<br />sync 命令会将所有的缓存数据写入磁盘中，并将所有被修改的元数据（如 i-node、目录结构等）更新到磁盘中。这样可以保证所有的修改都被写入到磁盘中，从而避免了数据的丢失。通常在关机前执行 sync 命令，以确保所有数据都已被保存到磁盘中。<br />需要注意的是，执行 sync 命令并不能保证磁盘数据的完全一致性。在磁盘数据的写入过程中，如果发生了异常情况，可能会导致数据的损坏或丢失。因此，在执行 sync 命令后，建议再执行一次磁盘检查命令（如 fsck 命令）来确保文件系统的完整性。</p></blockquote><p>将生成的<code>process.log</code>移动到虚拟机下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./mount-hdc<span class="token function">cp</span> hdc/var/process.log process.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看process.log，进程0在log关联文件描述符之前就已经在运行，因此未出现在log文件中<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680415902178-9c4c2da7-7edb-4723-b55a-e9fe72e794e9.png#averageHue=%232e2d3c&amp;clientId=uf67f330f-a4ae-4&amp;from=paste&amp;height=494&amp;id=u30477769&amp;originHeight=667&amp;originWidth=989&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=72543&amp;status=done&amp;style=none&amp;taskId=u9090ad80-0a07-40ab-b6df-2b16198c3e3&amp;title=&amp;width=732.5926443447992" alt="image.png" /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680157216292-d2746d2e-ef7a-47b7-ae49-89ac6630d367.png#averageHue=%232e3345&amp;clientId=u11640b7c-d1e3-4&amp;from=paste&amp;height=340&amp;id=u6d455e29&amp;originHeight=459&amp;originWidth=1069&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=121217&amp;status=done&amp;style=none&amp;taskId=u8f7744b6-ff01-47a1-a81c-74e61b5412a&amp;title=&amp;width=791.8519077902835" alt="image.png" /><br /><a name="h8nod"></a></p><h2 id="5-分析log"><a class="markdownIt-Anchor" href="#5-分析log"></a> 5. 分析log</h2><p>用指导书给的py脚本程序<code>stat_log.py</code>分析log文件，在分析之前将py脚本文件的第一行<code>#!/usr/bin/python</code>改为<code>#!/usr/bin/python2</code>（已安装python2）以适配版本，否则在python3环境下<code>print</code>函数会出错<br />为该脚本文件分配可执行权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x stat_log.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行脚本，分析进程9、10、11、12的运行情况（多个指标：平均周转时间，平均等待时间）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./stat_log.py process.log <span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token number">12</span> <span class="token parameter variable">-g</span> <span class="token operator">|</span> <span class="token function">less</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680423652089-e86380f3-f4e9-4d79-ad11-0a1ebc9798ad.png#averageHue=%23231227&amp;clientId=uccfc5aea-4473-4&amp;from=paste&amp;height=474&amp;id=ud8daee23&amp;originHeight=640&amp;originWidth=1147&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=107108&amp;status=done&amp;style=none&amp;taskId=u28cc7fdb-6a4e-4903-b874-35caa352db5&amp;title=&amp;width=849.6296896496307" alt="image.png" /><br /><a name="NJnrE"></a></p><h2 id="6-修改时间片重新分析log"><a class="markdownIt-Anchor" href="#6-修改时间片重新分析log"></a> 6. 修改时间片，重新分析log</h2><p>进程的时间片是进程的<code>counter</code>值，而counter在schedule函数中根据<code>priority</code>动态设置，因此进程的时间片受<code>counter</code>和<code>prioriy</code>两个变量的影响。进程的<code>priority</code>继承自父进程，进而所有进程的<code>priority</code>都来自于进程0 。<br />linux0.11中，<code>priority</code>和<code>counter</code>在<code>include/linux/sched.h</code>中定义<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680424066512-421f988e-49a3-4b66-a9b3-4e984c083da7.png#averageHue=%23f9f8f7&amp;clientId=uc4ca57e0-594c-4&amp;from=paste&amp;height=179&amp;id=u3cf28712&amp;originHeight=242&amp;originWidth=1399&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=102392&amp;status=done&amp;style=none&amp;taskId=udc7dd1be-caaf-44ac-8d33-1569af77da3&amp;title=&amp;width=1036.2963695029061" alt="image.png" /><br />我们修改这个值，然后重新执行process程序，分析log。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680425118028-6426a982-4e91-4b81-8fc4-7c2f2dcf7319.png#averageHue=%23320a1a&amp;clientId=uc4ca57e0-594c-4&amp;from=paste&amp;height=204&amp;id=uc99c017b&amp;originHeight=334&amp;originWidth=1215&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=77552&amp;status=done&amp;style=none&amp;taskId=u885ffd8c-f755-4bc9-8037-be7eab07b04&amp;title=&amp;width=742.0000610351562" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680425135373-cbb971da-57f6-43f9-a92b-c665b29e7410.png#averageHue=%23310a1b&amp;clientId=uc4ca57e0-594c-4&amp;from=paste&amp;height=196&amp;id=u78f7b710&amp;originHeight=287&amp;originWidth=1092&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=66299&amp;status=done&amp;style=none&amp;taskId=u61617740-70c7-46bb-b3a7-329f0fd3129&amp;title=&amp;width=744.888916015625" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680425366848-3d2e176f-aaed-410d-a132-af6ac4df180c.png#averageHue=%23343e56&amp;clientId=uc4ca57e0-594c-4&amp;from=paste&amp;height=361&amp;id=ubd18199b&amp;originHeight=487&amp;originWidth=1101&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=83283&amp;status=done&amp;style=none&amp;taskId=u1a1720f5-a694-44f6-97d8-f4d20b23ae7&amp;title=&amp;width=815.5556131684772" alt="image.png" /><br />可以看到这里的时间平均周转时间变多了，有以下两种可能：</p><ol><li>当进程的执行时间很长时，增加时间片大小可能会导致进程在等待时间片结束时的等待时间变长，因为进程需要等待更长的时间才能获得 CPU</li><li>当进程的数量非常多时，增加时间片大小可能会导致进程在就绪队列中等待的时间变长，因为每个进程需要等待更长的时间才能获得 CPU。</li></ol><p>因此，时间片大小的设置需要根据具体情况进行调整，不能简单地认为增加时间片大小一定会减少平均周转时间。需要根据系统中进程的数量、执行时间等因素来选择合适的时间片大小，从而达到更好的系统性能。<br /><a name="R9GH2"></a></p><h1 id="实验4-基于内核栈切换的进程切换"><a class="markdownIt-Anchor" href="#实验4-基于内核栈切换的进程切换"></a> 实验4 基于内核栈切换的进程切换</h1><hr /><p>我这个实验做的不是很好，建议本实验参考其他的博客<br /><a name="XtNKt"></a></p><h2 id="1-修改schedule函数"><a class="markdownIt-Anchor" href="#1-修改schedule函数"></a> 1.  修改schedule函数</h2><p>在TSS切换中，依赖TR寄存器找到下一个进程的tss，从而实现切换，因此在switch_to中没有next的PCB。要在<code>switch_to</code>函数中，将TSS的切换改为内核栈的切换，首先要在<code>schedule</code>函数中给<code>switch_to</code>函数传入next的PCB。因为这里没有TSS的切换，需要再单独做LDT表的切换。<br />在函数声明中，参数列表是从左到右依次列出的，而在函数栈帧中，参数是从右到左依次压入的。因此调用<code>switch_to</code>函数后，当前进程的内核中依次压入了LDT(next)，pnext和返回地址<br />因为这里涉及函数调用和栈，所以补充一下<code>%esp</code>和<code>%ebp</code>的知识：</p><blockquote><p>ESP寄存器用于指向当前栈帧的顶部，即栈中当前可用的最高地址。而EBP寄存器则通常用于指向当前函数的栈帧，也称为帧指针。EBP寄存器存储的是当前栈帧的起始位置，也就是栈中当前函数的参数和局部变量存储的位置。在函数执行期间，ESP寄存器的值会随着栈中数据的压入和弹出而不断变化，以保持其始终指向当前栈帧的顶部。而EBP寄存器的值通常不会被修改，以保持其一直指向当前函数的栈帧。这样可以确保函数能够正确地访问和修改栈帧中的参数、局部变量和返回地址等信息，而不会干扰其他函数的栈帧。<br />在函数调用过程中，处理器会将该函数的参数值和返回地址等信息压入当前函数的栈帧中，并将ESP寄存器的值减少相应的字节数。如果在函数执行期间没有再将其他数据压入栈中，那么ESP寄存器的值将等于EBP寄存器的值，即它们都指向栈帧的底部。需要注意的是，函数栈帧的大小通常是在编译时确定的，因此在函数调用前，编译器就已经为该函数分配了足够的栈空间。如果在函数执行期间需要动态分配更多的栈空间，那么ESP和EBP寄存器的值就会发生变化，以指向新分配的栈空间的位置<br />因此，ESP指向栈帧的顶部，EBP指向栈帧的起始位置，两者配合使用，能够在函数执行期间正确地访问和修改栈帧中的数据。</p></blockquote><p><strong>旁注：LDT表实现进程间的地址隔离</strong></p><blockquote><p>在x86架构中，进程与LDT（Local Descriptor Table）有密切的关系，LDT可以用来隔离和保护不同进程的地址空间。<br />LDT是一种描述符表，用于存储局部数据段和局部代码段的信息。与全局描述符表（GDT）不同，LDT表是针对每个进程单独维护的，每个进程都可以有自己的LDT表。LDT表的主要作用是实现地址空间的隔离，以保护、不同进程的内存空间不被其他进程访问或修改。<br />在x86架构中，进程的地址空间通常被划分为多个段，每个段都有自己的基地址和大小。通过使用LDT表中的描述符，可以将进程的地址空间划分为多个不同的段，并且每个进程都有自己独立的LDT表，这样可以实现不同进程的地址空间之间的隔离和保护。<strong>进程中的所有数据段和代码段都必须使用LDT中的描述符进行描述，以便在进程运行时能够正确地访问和修改这些段中的数据</strong>。<br />在Linux 0.11内核中，进程的LDT表存储在进程控制块（PCB）中，每个进程都有自己独立的LDT表。当进程被调度执行时，LDT表的选择子被存储在进程的TSS（Task State Segment）中，用于访问进程的LDT表。通过使用LDT表，可以实现不同进程之间的地址空间隔离和保护，提高系统的安全性和稳定性。<br />总之，LDT表是实现进程地址空间隔离和保护的重要手段，可以帮助操作系统实现不同进程之间的资源隔离和保护。在x86架构下，LDT表和进程的地址空间划分密切相关，每个进程都有自己独立的LDT表和地址空间划分。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>next<span class="token punctuation">,</span>c<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span> p<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>pnext <span class="token operator">=</span> <span class="token operator">&amp;</span>init_task<span class="token punctuation">.</span>task <span class="token punctuation">;</span>  <span class="token comment">//指向下一个进程的PCB的PCB指针,初始化指向进程0</span><span class="token comment">/* check alarm, wake up any interruptible tasks that have got a signal */</span><span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>LAST_TASK <span class="token punctuation">;</span> p <span class="token operator">></span> <span class="token operator">&amp;</span>FIRST_TASK <span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>alarm <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>alarm <span class="token operator">&lt;</span> jiffies<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>signal <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>SIGALRM<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>alarm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>signal <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>_BLOCKABLE <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>blocked<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>state<span class="token operator">==</span>TASK_INTERRUPTIBLE<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>state<span class="token operator">=</span>TASK_RUNNING<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* this is the scheduler proper: */</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">=</span> NR_TASKS<span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>task<span class="token punctuation">[</span>NR_TASKS<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span><span class="token operator">--</span>p<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>state <span class="token operator">==</span> TASK_RUNNING <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>counter <span class="token operator">></span> c<span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>counter<span class="token punctuation">,</span> next <span class="token operator">=</span> i<span class="token punctuation">,</span> pnext <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>LAST_TASK <span class="token punctuation">;</span> p <span class="token operator">></span> <span class="token operator">&amp;</span>FIRST_TASK <span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>counter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>counter <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>priority<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">switch_to</span><span class="token punctuation">(</span>pnext<span class="token punctuation">,</span> <span class="token function">_LDT</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//  传递下一个进程的PCB (切换执行序列)和LDT (切换内存空间)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="R5KpS"></a></p><h2 id="2-修改switch_to函数"><a class="markdownIt-Anchor" href="#2-修改switch_to函数"></a> 2. 修改switch_to函数</h2><p><code>switch_to</code>函数是一个宏函数，位于<code>include/linux/sched.h</code>中，我们先注释掉这个原版<code>switch_to</code>，在<code>kernel/system_call.s</code>中编写新的<code>switch_to</code>函数。</p><pre class="line-numbers language-none"><code class="language-none">ESP0&#x3D; 0x04KERNEL_STACK    &#x3D; 0x0C # kernel_stack变量在task_struct中的偏移量switch_to:        pushl %ebp     # 压入C函数schedule的栈帧        movl %esp,%ebp # 将当前进程的栈顶指针esp拷贝给%ebp，使它指向刚刚压入的esp值        pushl %ecx     # 这几个寄存器可能是调用函数schedule中用到的寄存器，因此先保存        pushl %ebx        pushl %eax        movl 8(%ebp),%ebx   #取出传入的pnext参数，即下一个进程的PCB指针        cmpl %ebx,current           je 1f               # next是否是当前进程，如果是，则向前(Forward)跳转到标号1开始执行，不执行转换# PCB        movl %ebx,%eax        xchgl %eax,current  # exchange value, 切换进程PCB, 此时%eax指向当前进程，current指向下一个进程# TSS 使用户栈能找到内核栈，借用进程0的tss保存内核栈的esp0信息        movl tss, %ecx  # 在kernel&#x2F;sched.c中定义tss &#x3D; &amp; init_task.task.tss        addl $4096, %ebx   # 让ebx指向页表最高地址处，这里也是内核栈的基址        movl %ebx, ESP0(%ecx) # 修改tss中的esp0(偏移量为4)，使它指向内核栈的栈顶位置，此时就是栈基址# switch kernel_stack   切换的关键        movl %esp, KERNEL_STACK(%eax) # 取出CPU.esp 保存到当前进程的PCB中，task_struct中需要添加kernel_stack变量，并修改INIT_TASK        movl 8(%ebp),%ebx # 重新取出下一个进程的PCB        movl KERNEL_STACK(%ebx), %esp # 将下一个进程的PCB中的内核栈的栈顶信息esp放入CPU中# switch LDT        movl 12(%ebp), %ecx  # 取出传入的 LDT(next)参数        lldt %cx  # lldt指令用于将LDT的段选择子加载到LDTR寄存器中，LDTR寄存器是一个16位的寄存器，存储LDT的段选择子，硬件根据LDTR在GDT中查找以获取LDT的地址        movl $0x17,%ecx  # 重置 fs寄存器        mov %cx,%fs        cmpl %eax,last_task_used_math        jne 1f        clts1:          popl %eax  # 返回C函数schedule，恢复寄存器(特别是帧指针%ebp)        popl %ebx        popl %ecx        popl %ebp        ret.align 2first_return_from_kernel:  # 一段包含iret的代码，用于返回用户栈        popl %edx        popl %edi        popl %esi        pop %gs        pop %fs        pop %es        pop %ds        iret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680610298744-b96a1fb9-0bd5-42c3-92fa-db7cf014e26f.png#averageHue=%230e1d24&amp;clientId=uab8d30b7-e158-4&amp;from=paste&amp;height=359&amp;id=u135e04c6&amp;originHeight=570&amp;originWidth=307&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=25038&amp;status=done&amp;style=none&amp;taskId=uc3a9f8de-69d4-45ee-9bd4-59869b11bbe&amp;title=&amp;width=193.4074249267578" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680607901100-80e1fef7-6227-4666-8b92-b7f9e77c5157.png#averageHue=%2340403f&amp;clientId=ud7da80e5-6267-4&amp;from=paste&amp;height=213&amp;id=u9cffa745&amp;originHeight=288&amp;originWidth=1249&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=131127&amp;status=done&amp;style=none&amp;taskId=uf8d01083-566e-4751-9d00-bfefb9601b0&amp;title=&amp;width=925.1852505426231" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680607923866-24c74850-2ebb-41f3-b6f8-a6bf868dc1ec.png#averageHue=%23443a2c&amp;clientId=ud7da80e5-6267-4&amp;from=paste&amp;height=126&amp;id=u80a62313&amp;originHeight=170&amp;originWidth=972&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=79341&amp;status=done&amp;style=none&amp;taskId=uff96a90b-a025-4fab-9392-f3ca2b5aeca&amp;title=&amp;width=720.0000508626338" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680613819720-4f2243c4-a2ac-4182-8b85-b8b5c9075826.png#averageHue=%23414040&amp;clientId=uf8dab7e5-7478-4&amp;from=paste&amp;height=194&amp;id=u8850a003&amp;originHeight=262&amp;originWidth=1029&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=87892&amp;status=done&amp;style=none&amp;taskId=u3d364175-505c-40bc-b73e-0a56a05f9ab&amp;title=&amp;width=762.2222760675413" alt="image.png" /><br /><a name="Brx25"></a></p><h2 id="3-修改copy_process函数"><a class="markdownIt-Anchor" href="#3-修改copy_process函数"></a> 3.  修改copy_process函数</h2><p>在fork.c的copy_process部分添加以下代码用于设置进程的内核栈， 并注释掉设置tss的部分</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;*set up kernel stack *&#x2F;long * krnstack &#x3D;(long)(PAGE_SIZE + (long)p);*(--krnstack) &#x3D; ss &amp; 0xffff;  # 压入SS:SP*(--krnstack) &#x3D; esp;*(--krnstack) &#x3D; eflags;*(--krnstack) &#x3D; cs &amp; 0xffff;  # 压入CS:IP*(--krnstack) &#x3D; eip;*(--krnstack) &#x3D; ds &amp; 0xffff;*(--krnstack) &#x3D; es &amp; 0xffff;*(--krnstack) &#x3D; fs &amp; 0xffff;*(--krnstack) &#x3D; gs &amp; 0xffff;*(--krnstack) &#x3D; esi;*(--krnstack) &#x3D; edi;*(--krnstack) &#x3D; edx;*(--krnstack) &#x3D; (long) first_return_from_kernel; &#x2F;&#x2F; a code segment with iret instruction*(--krnstack) &#x3D; ebp;*(--krnstack) &#x3D; ecx;*(--krnstack) &#x3D; ebx;*(--krnstack) &#x3D; 0;p-&gt;kernel_stack &#x3D; krnstack;  # 设置PCB中的内核栈栈顶指针信息为初始化后的栈顶指针<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="jdsWH"></a></p><h1 id="实验5-信号量的实现与应用"><a class="markdownIt-Anchor" href="#实验5-信号量的实现与应用"></a> 实验5 信号量的实现与应用</h1><p><a name="omgks"></a></p><h2 id="1-前提-2"><a class="markdownIt-Anchor" href="#1-前提-2"></a> 1. 前提</h2><p><a name="DxhB5"></a></p><h3 id="1-系统调用open打开文件"><a class="markdownIt-Anchor" href="#1-系统调用open打开文件"></a> (1) 系统调用open打开文件</h3><p>要使用系统调用方式打开文件，可以使用 open 系统调用。该系统调用的原型定义在 &lt;fcntl.h&gt; 头文件中，如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token keyword">int</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token class-name">mode_t</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中，pathname 参数是要打开的文件名，可以是相对路径或绝对路径，可以包含目录名和文件名；flags 参数是打开文件的选项和标志，比如只读、只写、追加、创建等；mode 参数是创建文件时的权限，仅在创建文件时使用，可以指定文件的读写权限。<br />常用的打开选项和标志包括：</p><ul><li>O_RDONLY：只读模式打开文件。</li><li>O_WRONLY：只写模式打开文件。</li><li>O_RDWR：读写模式打开文件。</li><li>O_CREAT：如果文件不存在则创建文件。</li><li>O_TRUNC：如果文件已存在则清空文件内容。</li><li>O_APPEND：在文件末尾追加内容。</li><li>O_EXCL：在创建文件时，如果文件已存在则返回错误。</li></ul><p>如果成功打开文件，系统调用返回一个非负整数，即文件描述符（file descriptor），用于后续访问文件内容。如果出错，则返回一个负值，表示出错的类型。<br />对第2个参数flags，可以使用了<code>|</code>运算符将多个选项参数组合在一起。这是因为 open 系统调用的选项参数是一个位掩码，每个选项都有一个对应的位标志，可以使用位运算符组合多个选项。<br />对第3个参数mode，文件的访问权限是一个八进制数，表示文件的所有者、所属组和其他用户对文件的访问权限。<br />每个访问权限位的含义如下：</p><ul><li>读权限：4</li><li>写权限：2</li><li>执行权限：1</li></ul><p>在使用 open 系统调用创建文件时，可以通过一个八进制数来指定文件的访问权限。通常情况下，可以将三个访问权限位组合在一起，得到一个八进制数，作为 mode 参数传递给 open 系统调用。例如，如果要将文件的访问权限设置为所有用户都有<strong>写</strong>权限，可以使用以下代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">,</span> O_CREAT <span class="token operator">|</span> O_WRONLY<span class="token punctuation">,</span> <span class="token number">0222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 0开头的数字表示这是一个八进制数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a name="xl1MX"></a></p><h3 id="2-系统调用write写入文件"><a class="markdownIt-Anchor" href="#2-系统调用write写入文件"></a> (2) 系统调用write写入文件</h3><p>在 C 语言中，write 函数用于向文件或者文件描述符写入数据，其函数原型为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token class-name">ssize_t</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>write 函数的三个参数分别表示：</p><ol><li>fd：文件描述符，它是一个整数，用于指定要写入数据的文件或设备。在 Linux 系统中，标准输入、标准输出和标准错误分别对应文件描述符 0、1 和 2。用户可以使用 open 函数打开其他文件或设备，并获得相应的文件描述符。</li><li>buf：指向要写入数据的缓冲区的指针。在写入数据之前，用户需要将数据存储在缓冲区中，然后将缓冲区的地址传递给 write 函数。</li><li>count：要写入的字节数。用户需要指定要写入数据的长度，以字节数为单位。如果缓冲区中的数据长度小于 count，则 write 函数只会写入部分数据；如果缓冲区中的数据长度大于 count，则 write 函数只会写入 count 字节的数据。</li></ol><p>当 write() 函数成功写入数据时，内核会更新文件偏移量，以便下一次读写操作从正确的位置开始。<br />需要注意的是，write 函数返回值是 ssize_t 类型，表示成功写入的字节数，如果返回值为负数，则表示写入失败。<br /><a name="dvXWS"></a></p><h3 id="3-系统调用read从文件读取数据"><a class="markdownIt-Anchor" href="#3-系统调用read从文件读取数据"></a> (3) 系统调用read从文件读取数据</h3><p>在 Linux 系统中，read() 是一个用于从文件描述符中读取数据的系统调用。该调用的原型如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token class-name">ssize_t</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>read() 函数有三个参数：</p><ol><li>fd：要读取的文件的文件描述符。</li><li>buf：用于存储读取数据的缓冲区。</li><li>count：要读取的字节数。</li></ol><p>read() 函数会从指定的文件描述符 fd 中读取 count 个字节的数据，并将其存储到 buf 缓冲区中。函数返回实际读取的字节数，如果读取出错，则返回 -1。<br />read() 函数在读取数据时可能会阻塞进程，直到有数据可读或发生错误。如果读取到文件末尾，函数返回 0。如果读取的字节数小于 count，则可能是因为已经到达文件末尾或者因为发生了错误。<br />当使用 read() 函数读取数据时，内核会将文件偏移量更新为读取数据后的下一个位置。例如，如果你使用 read() 函数从文件的位置 100 处读取 50 个字节的数据，则文件偏移量会从 100 更新为 150 (100~149)。这样，下一次读取数据操作将从文件位置 150 处开始。使用 lseek() 函数可以显式地设置文件偏移量。<br />read() 函数可以用于读取文件、套接字、管道等类型的文件描述符。<br /><a name="QqDWZ"></a></p><h3 id="4-系统调用lseek移动文件指针"><a class="markdownIt-Anchor" href="#4-系统调用lseek移动文件指针"></a> (4) 系统调用lseek移动文件指针</h3><p>lseek函数用于在文件中移动文件指针的位置。该函数的原型如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token class-name">off_t</span> <span class="token function">lseek</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token class-name">off_t</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> whence<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// off_t 是long的别名，在&lt;sys/types.h>中定义</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中，fd 是已打开文件的文件描述符，offset 是需要移动的偏移量，whence 则用于指定相对于何处进行偏移，其取值可以为 SEEK_SET、SEEK_CUR 或 SEEK_END。这三个常量在&lt;unistd.h&gt; 头文件中定义<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680944981675-ec549d1d-1e5d-4922-bd94-824e9a2fc219.png#averageHue=%23faf8f6&amp;clientId=u8d570fae-75fa-4&amp;from=paste&amp;height=131&amp;id=PmS6E&amp;originHeight=177&amp;originWidth=1031&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=84788&amp;status=done&amp;style=none&amp;taskId=u91542c12-b250-4808-bb4f-493451efd95&amp;title=&amp;width=763.7037576536784" alt="image.png" /></p><ul><li>当 whence 值为 SEEK_SET时，文件指针将被设置为相对于文件开头偏移 offset 个字节的位置。</li><li>当 whence 值为 SEEK_CUR时，文件指针将被设置为相对于当前位置偏移 offset 个字节的位置。</li><li>当 whence 值为 SEEK_END时，文件指针将被设置为相对于文件末尾偏移 offset 个字节的位置。</li></ul><p>lseek() 函数返回新的文件指针位置，如果出现错误则返回 -1。通过调用 lseek() 函数可以实现随机访问文件的功能，比如读取文件中的任意部分内容、覆盖文件中的任意部分内容等。<br /><a name="SXM4Y"></a></p><h2 id="2-创建semaphore类型"><a class="markdownIt-Anchor" href="#2-创建semaphore类型"></a> 2. 创建semaphore类型</h2><p>在<code>include/linux/sem.h</code>写入以下内容</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_SEM</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_SEM</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;linux/sched.h></span>   <span class="token comment">// for task_struct definition</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SEM_TABLE_LEN</span> <span class="token expression"><span class="token number">20</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SEM_NAME_LEN</span><span class="token expression"><span class="token number">20</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">semaphore</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> value<span class="token punctuation">;</span><span class="token keyword">char</span> name<span class="token punctuation">[</span>SEM_NAME_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>queue<span class="token punctuation">;</span>   <span class="token comment">// wait queue</span><span class="token punctuation">&#125;</span><span class="token class-name">sem_t</span><span class="token punctuation">;</span><span class="token class-name">sem_t</span> sem_table<span class="token punctuation">[</span>SEM_TABLE_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="V2My1"></a></p><h2 id="3-创建信号量相关的系统调用"><a class="markdownIt-Anchor" href="#3-创建信号量相关的系统调用"></a> 3. 创建信号量相关的系统调用</h2><p>在<code>kernel/sem.c</code>中写入以下内容，包括信号量的创建<code>sys_sem_open</code>，P操作<code>sys_sem_wait</code>，V操作<code>sys_sem_post</code>，和释放信号量<code>sys_sem_unlink</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;linux/sem.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;linux/tty.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;linux/kernel.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;linux/fdreg.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;asm/system.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;asm/io.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;asm/segment.h></span></span><span class="token comment">// #include&lt;string.h>  // avoid unknowned error</span><span class="token keyword">int</span> cnt<span class="token punctuation">;</span>   <span class="token comment">// the number of semaphores in sem_table, auto initial to zero</span><span class="token class-name">sem_t</span> <span class="token operator">*</span> <span class="token function">sys_sem_open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">int</span> name_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> isExist <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> sem_name_len <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> kernel_sem_name<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"\0"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token class-name">sem_t</span> <span class="token operator">*</span> p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">get_fs_byte</span><span class="token punctuation">(</span>name<span class="token operator">+</span>name_len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>         kernel_sem_name<span class="token punctuation">[</span>name_len<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token operator">++</span>name_len<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">// printk("name_len: %d\tstrlen: %d\n",name_len,strlen(kernel_sem_name));</span><span class="token keyword">if</span><span class="token punctuation">(</span>name_len <span class="token operator">></span> SEM_NAME_LEN<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>cnt<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token comment">/*find duplicate*/</span><span class="token punctuation">&#123;</span>sem_name_len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>sem_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// printk("%d:%s!\t%d:%s!\n",sem_name_len,sem_table[cnt].name,name_len,kernel_sem_name);</span><span class="token keyword">if</span><span class="token punctuation">(</span>sem_name_len <span class="token operator">==</span> name_len <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>kernel_sem_name<span class="token punctuation">,</span> sem_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>isExist <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isExist<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//printk("i am consumer!\n");</span>p <span class="token operator">=</span> sem_table<span class="token operator">+</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>sem_table<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> kernel_sem_name<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// printk("ID:(%d)\t %d\t%s!\t%d\t%s!\n",cnt,strlen(sem_table[cnt].name),sem_table[cnt].name,strlen(kernel_sem_name),kernel_sem_name);</span>sem_table<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>p <span class="token operator">=</span> sem_table<span class="token operator">+</span>cnt<span class="token punctuation">;</span><span class="token operator">++</span>cnt<span class="token punctuation">;</span>        <span class="token comment">//printk("i am producer!\n");</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">sys_sem_wait</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>sem<span class="token operator">-></span>value <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>sem<span class="token operator">-></span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">sys_sem_post</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">++</span>sem<span class="token operator">-></span>value <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">wake_up</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>sem<span class="token operator">-></span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">sys_sem_unlink</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> name_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">get_fs_byte</span><span class="token punctuation">(</span>name<span class="token operator">+</span>name_len<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">++</span>name_len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>name_len <span class="token operator">></span> SEM_NAME_LEN<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">char</span> kernel_sem_name<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>name_len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>kernel_sem_name<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">get_fs_byte</span><span class="token punctuation">(</span>name<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> isExist <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> sem_name_len <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>cnt<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sem_name_len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>sem_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sem_name_len <span class="token operator">==</span> name_len <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>kernel_sem_name<span class="token punctuation">,</span> sem_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>isExist <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isExist<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> tmp <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>tmp<span class="token operator">=</span>i<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>cnt<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sem_table<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">=</span> sem_table<span class="token punctuation">[</span>tmp<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// overwrite</span><span class="token punctuation">&#125;</span><span class="token operator">--</span>cnt<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将sys_function添加到内核的系统调用已在lab2讲解过，这里只上截图<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681191314333-f237a891-d3aa-4009-a70a-caa03b5251f4.png#averageHue=%23320a1c&amp;clientId=ue6d07154-992c-4&amp;from=paste&amp;height=157&amp;id=ucafea307&amp;originHeight=212&amp;originWidth=1043&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=53782&amp;status=done&amp;style=none&amp;taskId=ubdbcf372-278d-4ac4-8df2-a83d86793b1&amp;title=&amp;width=772.5926471705011" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681191398952-f295a310-8abb-420f-8dfd-82875874d4d9.png#averageHue=%232e0c2a&amp;clientId=ue6d07154-992c-4&amp;from=paste&amp;height=471&amp;id=u3a5df7fe&amp;originHeight=636&amp;originWidth=1626&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=238875&amp;status=done&amp;style=none&amp;taskId=uc4ed164c-d7db-431b-9e93-835b878669b&amp;title=&amp;width=1204.4445295294677" alt="image.png" /><br />修改Makefile<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681191512033-b378a545-c5bb-4d3e-98d1-4666b3b778fb.png#averageHue=%23310a1c&amp;clientId=ue6d07154-992c-4&amp;from=paste&amp;height=121&amp;id=udb2561cb&amp;originHeight=163&amp;originWidth=1167&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=38144&amp;status=done&amp;style=none&amp;taskId=ub0cbced6-d5cf-4454-a9af-16ec0f280e6&amp;title=&amp;width=864.4445055110017" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681191532529-6e747c92-5ffb-4cff-bbfd-f3f0fee9c7c3.png#averageHue=%23370a1a&amp;clientId=ue6d07154-992c-4&amp;from=paste&amp;height=159&amp;id=ub275bef1&amp;originHeight=215&amp;originWidth=1422&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=63428&amp;status=done&amp;style=none&amp;taskId=u9f808bbe-8499-4256-8136-da26c49b809&amp;title=&amp;width=1053.333407743483" alt="image.png" /><br /><a name="kx8cN"></a></p><h2 id="4-创建生产者-消费者进程"><a class="markdownIt-Anchor" href="#4-创建生产者-消费者进程"></a> 4. 创建生产者-消费者进程</h2><p>在<code>pc.c</code>中写入以下内容</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__LIBRARY__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;linux/sem.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;linux/sched.h></span></span><span class="token function">_syscall2</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span><span class="token operator">*</span><span class="token punctuation">,</span> sem_open<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token function">_syscall1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">,</span> sem_wait<span class="token punctuation">,</span> <span class="token class-name">sem_t</span><span class="token operator">*</span><span class="token punctuation">,</span> sem<span class="token punctuation">)</span><span class="token function">_syscall1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">,</span> sem_post<span class="token punctuation">,</span> <span class="token class-name">sem_t</span><span class="token operator">*</span><span class="token punctuation">,</span> sem<span class="token punctuation">)</span><span class="token function">_syscall1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> sem_unlink<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token keyword">int</span> NR_CONSUMER <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> NR_PRODUCTS <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span> <span class="token keyword">const</span> <span class="token keyword">int</span> BUFFER_SIZE <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> pro_nr<span class="token punctuation">,</span> csm_pro_nr<span class="token punctuation">;</span> <span class="token comment">/*product number, consumed product number*/</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> FILENAME <span class="token operator">=</span> <span class="token string">"/usr/root/buffer_file"</span><span class="token punctuation">;</span> <span class="token comment">/*default buffer file*/</span><span class="token class-name">sem_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">,</span> <span class="token operator">*</span>full<span class="token punctuation">,</span> <span class="token operator">*</span>empty<span class="token punctuation">;</span><span class="token keyword">int</span> f_in<span class="token punctuation">;</span>   <span class="token comment">/* for producer*/</span><span class="token keyword">int</span> f_out<span class="token punctuation">;</span>  <span class="token comment">/* for consumer*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> file_name <span class="token operator">=</span> argc <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> FILENAME<span class="token punctuation">;</span><span class="token keyword">int</span> pid<span class="token punctuation">;</span><span class="token keyword">int</span> cnt<span class="token punctuation">;</span> <span class="token comment">/* must declare cnt here */</span><span class="token comment">/*open buffer file */</span>f_in <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> O_CREAT<span class="token operator">|</span>O_TRUNC<span class="token operator">|</span>O_WRONLY<span class="token punctuation">,</span> <span class="token number">0222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f_out <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span>O_TRUNC<span class="token operator">|</span>O_RDONLY<span class="token punctuation">,</span> <span class="token number">0444</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*create semaphores*/</span>mutex <span class="token operator">=</span> <span class="token function">sem_open</span><span class="token punctuation">(</span><span class="token string">"MUTEX"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>full <span class="token operator">=</span> <span class="token function">sem_open</span><span class="token punctuation">(</span><span class="token string">"FULL"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>empty <span class="token operator">=</span> <span class="token function">sem_open</span><span class="token punctuation">(</span><span class="token string">"EMPTY"</span><span class="token punctuation">,</span>BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*parent process as producer*/</span>pro_nr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pid <span class="token operator">=</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pid %d:\t producer created!\n"</span><span class="token punctuation">,</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>pro_nr <span class="token operator">&lt;</span> NR_PRODUCTS<span class="token punctuation">)</span> <span class="token comment">/*until product all products then producer exit*/</span><span class="token punctuation">&#123;</span><span class="token function">sem_wait</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_wait</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>pro_nr <span class="token operator">%</span> BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">lseek</span><span class="token punctuation">(</span>f_in<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*10 products per turn*/</span><span class="token function">write</span><span class="token punctuation">(</span>f_in<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>pro_nr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pro_nr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pid %d:\t produces product %d!\n"</span><span class="token punctuation">,</span> pid<span class="token punctuation">,</span> pro_nr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>pro_nr<span class="token punctuation">;</span><span class="token function">sem_post</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_post</span><span class="token punctuation">(</span>full<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*child process create child processes to be consumer*/</span><span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>cnt <span class="token operator">=</span> NR_CONSUMER<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>cnt<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>pid<span class="token operator">=</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pid <span class="token operator">=</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pid %d:\t consumer %d created!\n"</span><span class="token punctuation">,</span> pid<span class="token punctuation">,</span> NR_CONSUMER<span class="token operator">-</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>csm_pro_nr <span class="token operator">==</span> NR_PRODUCTS<span class="token punctuation">)</span> <span class="token keyword">goto</span> OK<span class="token punctuation">;</span><span class="token function">sem_wait</span><span class="token punctuation">(</span>full<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_wait</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">read</span><span class="token punctuation">(</span>f_out<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>csm_pro_nr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>csm_pro_nr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">/*end of file,reset*/</span><span class="token punctuation">&#123;</span><span class="token function">lseek</span><span class="token punctuation">(</span>f_out<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>f_out<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>csm_pro_nr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>csm_pro_nr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pid:%d:\t consumer %d consume product %d\n"</span><span class="token punctuation">,</span>pid<span class="token punctuation">,</span> NR_CONSUMER<span class="token operator">-</span>cnt<span class="token punctuation">,</span>csm_pro_nr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_post</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_post</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>OK<span class="token operator">:</span><span class="token function">sem_unlink</span><span class="token punctuation">(</span><span class="token string">"MUTEX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_unlink</span><span class="token punctuation">(</span><span class="token string">"FULL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_unlink</span><span class="token punctuation">(</span><span class="token string">"EMPTY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>f_in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>f_out<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="d4Zs9"></a></p><h2 id="5-验证结果"><a class="markdownIt-Anchor" href="#5-验证结果"></a> 5. 验证结果</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#current catalogue: OSLab5</span>./mount-hdc<span class="token comment">#更新标准库</span><span class="token function">cp</span> include/unistd.h hdc/usr/include   <span class="token function">cp</span> include/linux/sem.h hdc/usr/include <span class="token comment">#run</span><span class="token function">cp</span> pc.c hdc/usr/root./run<span class="token comment">#在bochs中执行</span>gcc <span class="token parameter variable">-o</span> pc pc.c./pc <span class="token operator">></span> sem_output <span class="token comment"># 将输出结果重定向到文件sem_output，便于查看</span><span class="token function">sync</span>  <span class="token comment">#将所有的缓存数据写入磁盘，lab3中出现过</span><span class="token comment">#回到ubuntu执行</span>./mount-hdc<span class="token function">cp</span> hdc/usr/root/sem_output sem_outputgedit sem_output<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681190311067-7da9d91d-d3ad-429e-aa5f-9b1248637268.png#averageHue=%23222222&amp;clientId=ue6d07154-992c-4&amp;from=paste&amp;height=370&amp;id=ue8d7e426&amp;originHeight=499&amp;originWidth=723&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=31439&amp;status=done&amp;style=none&amp;taskId=u02dc2475-2333-4f29-9398-9089b4f3b91&amp;title=&amp;width=535.555593388564" alt="image.png" /><br />查看sem_output验证信号量机制的正确性<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681191987779-91ab0753-403e-4c53-b14e-003cf1bc245d.png#averageHue=%232d2c2a&amp;clientId=ue6d07154-992c-4&amp;from=paste&amp;height=551&amp;id=u70a1ec26&amp;originHeight=744&amp;originWidth=915&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=163272&amp;status=done&amp;style=none&amp;taskId=u21388cc9-64a2-48f8-a033-aca3b00b29a&amp;title=&amp;width=677.7778256577262" alt="image.png" /><br />可以看出，producer每生产一轮，即填满容量为10的缓冲区后，5个consumer就开始消耗缓冲区，消耗完后producer又生产一轮，直到达到最大产品数量<code>NR_PRODUCTS = 50</code>(0~49)后退出，consumer在消耗完所有产品后也退出<br /><a href="https://www.cnblogs.com/mirage-mc/p/12913993.html">reference</a><br /><a name="UBxgK"></a></p><h1 id="实验6-地址映射与共享"><a class="markdownIt-Anchor" href="#实验6-地址映射与共享"></a> 实验6 地址映射与共享</h1><p><a name="PCY7K"></a></p><h2 id="1-跟踪地址翻译过程"><a class="markdownIt-Anchor" href="#1-跟踪地址翻译过程"></a> 1. 跟踪地址翻译过程</h2><ol><li>启动调试，获取i的逻辑地址为<code>ds:0x3004</code>，ds表明该地址属于由ds寄存器指示的段 (后续称ds段)</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682391942338-17dbc47e-efbe-4991-ac01-66a58fe29761.png#averageHue=%2361d6df&amp;clientId=u2a189deb-d8a3-4&amp;from=paste&amp;height=396&amp;id=u2fe5db91&amp;originHeight=535&amp;originWidth=1762&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=161011&amp;status=done&amp;style=none&amp;taskId=ucdae2cfd-9baf-417b-b5a5-19a5e7b74ce&amp;title=&amp;width=1305.1852773867909" alt="image.png" /></p><ol start="2"><li>通过段表(LDT)，确定ds段的起始地址，进而将逻辑地址转化为虚拟地址。段表由LDTR指示，运行命令<code>sreg</code>查看LDTR的值，该寄存器用于从GDT中取出进程的LDT地址</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682392972667-b8028c87-04e2-4da8-adcf-d9c895eabed1.png#averageHue=%230c0b0a&amp;clientId=ud47c8188-ce02-4&amp;from=paste&amp;height=322&amp;id=u637c9f1f&amp;originHeight=435&amp;originWidth=1050&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=186768&amp;status=done&amp;style=none&amp;taskId=u42a2cb9c-2fc1-4b4e-8722-de778d6716e&amp;title=&amp;width=777.777832721981" alt="image.png" /><br />LDTR的值为<code>0x68 = 0x0000 0000 0110 1000</code>，取3~15位表示段选择子<code>1101</code>，说明目标LDT在GDT的第13项(从0索引)<br />GDT的地址已经由gdtr指出为<code>0x00005cb8</code>，因为GDT每项段描述符占8个字节，因此查看GDT的<code>0x00005cb8+8*13</code>处的8个字节，这8个字节就是目标LDT的段描述符<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682393215941-b8c0d04e-4f8b-4ada-97ad-911b7141413a.png#averageHue=%23393938&amp;clientId=ud47c8188-ce02-4&amp;from=paste&amp;height=84&amp;id=u9a33146e&amp;originHeight=113&amp;originWidth=1195&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=46789&amp;status=done&amp;style=none&amp;taskId=u3711d3a6-2bff-411f-add3-cd062bb1d5f&amp;title=&amp;width=885.1852477169211" alt="image.png" /><br />根据段描述符的结构，从0x<strong>52d0</strong>0068 0x<strong>00</strong>0082<strong>fd</strong>(0~64bits）提取出<code>0x00fd52d0</code>，这就是目标LDT的基地址<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682399305124-bdd7f27d-075f-4c4a-9a65-b7860c7dd623.png#averageHue=%23fefefe&amp;clientId=u51acf4b0-f2b0-4&amp;from=paste&amp;height=177&amp;id=u622fb3b7&amp;originHeight=239&amp;originWidth=803&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=32904&amp;status=done&amp;style=none&amp;taskId=u2a4729cd-97c0-43ac-825d-5ce252d761a&amp;title=&amp;width=594.8148568340483" alt="image.png" /><br />ds段的基地址由ds寄存器(段选择子)在LDT中指示，我们先用<code>sreg</code>查看ds的值<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682399914102-d58b5df4-485d-4607-9f50-2e4b00465752.png#averageHue=%230b0c09&amp;clientId=u51acf4b0-f2b0-4&amp;from=paste&amp;height=125&amp;id=u9052b12d&amp;originHeight=169&amp;originWidth=986&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=77799&amp;status=done&amp;style=none&amp;taskId=ucbc01f60-3bc3-438e-aacd-43cedd3cc58&amp;title=&amp;width=730.3704219655936" alt="image.png" /><br />段选择子ds的值是0x0017 = 0x <strong>0000 0000 0001 0</strong>111 (16bits)，根据段选择子的结构<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682399993383-cfebc5a1-1647-4904-b1c1-9063b2340ec1.png#averageHue=%231e1c1b&amp;clientId=u51acf4b0-f2b0-4&amp;from=paste&amp;height=133&amp;id=u32177cff&amp;originHeight=180&amp;originWidth=892&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=11920&amp;status=done&amp;style=none&amp;taskId=ub641d6b7-7444-4531-bc8d-931428ae182&amp;title=&amp;width=660.7407874171496" alt="image.png" /><br />从ds中提取出段选择符的索引<code>0x10</code>，可见ds段在LDT的第3项(从0编号)，于是接下来查看目标LDT的前四项(每项占四个字节)<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682400415663-fca789c0-f4cb-4158-a1ee-871abca1e98b.png#averageHue=%232b2b2b&amp;clientId=u51acf4b0-f2b0-4&amp;from=paste&amp;height=111&amp;id=u3c133be0&amp;originHeight=150&amp;originWidth=1694&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=50932&amp;status=done&amp;style=none&amp;taskId=ucf49bcf4-23b3-4875-b05d-f39c9cacbcb&amp;title=&amp;width=1254.8149034581293" alt="image.png" /><br />获取了目标LDT中第3个段描述符的数据: 0x<strong>0000</strong>3fff 0x<strong>10</strong>c0f3<strong>00</strong>，根据段描述符的结构，提取出基地址: <code>1000 0000</code>，自此我们可以将<code>i</code>逻辑地址转化为虚拟地址(线性地址)了<br />虚拟地址：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mo>+</mo><mi>o</mi><mi>f</mi><mi>f</mi><mi>s</mi><mi>e</mi><mi>t</mi><mo>=</mo><mn>0</mn><mi>x</mi><mn>1000</mn><mtext> </mtext><mn>0000</mn><mo>+</mo><mn>0</mn><mi>x</mi><mn>3004</mn><mo>=</mo><mn>0</mn><mi>x</mi><mn>1000</mn><mtext> </mtext><mn>3004</mn></mrow><annotation encoding="application/x-tex">base +offset=0x1000\,0000 + 0x3004 =0x1000\,3004</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">a</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mord mathnormal">x</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord mathnormal">x</span><span class="mord">3</span><span class="mord">0</span><span class="mord">0</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord mathnormal">x</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mord">0</span><span class="mord">4</span></span></span></span></p><ol start="3"><li>将虚拟地址映射到的物理地址</li></ol><p>根据虚拟地址结构，可知<code>0x1000 3004 = 0x0001 0000...0000 0011 000..0 0100</code>表示的物理地址在页目录64对应的页表中，页号为3(页号连续，因此由第3个页表项指示)，页内偏移为4<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682401178166-181bac16-0d2e-47a5-a656-3f6a96a16ea4.png#averageHue=%23050403&amp;clientId=u51acf4b0-f2b0-4&amp;from=paste&amp;height=156&amp;id=u56695781&amp;originHeight=210&amp;originWidth=649&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=11892&amp;status=done&amp;style=none&amp;taskId=ubb61ef02-e3cd-4bab-b8a8-1e21ad2d939&amp;title=&amp;width=480.7407747014911" alt="image.png" /><br />内存中页目录表的位置由寄存器CR3指示，使用<code>creg</code>查看CR3寄存器的值<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682401466094-7fdd4c1a-1ada-4345-960e-2cd27d0154ca.png#averageHue=%232f2e2e&amp;clientId=u51acf4b0-f2b0-4&amp;from=paste&amp;height=187&amp;id=ucb35aee7&amp;originHeight=253&amp;originWidth=1240&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=97062&amp;status=done&amp;style=none&amp;taskId=u2dc0d307-8e48-4cd6-9958-bd26cfd8156&amp;title=&amp;width=918.5185834050061" alt="image.png" /><br />CR3的值为0x00000000，所以页目录表从地址0x00000000开始，我们要获取第64项，页目录表每项占4个字节，因此使用<code>xp /2w 0+64*4</code>查看第64项的内容<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682401965918-a0fffb1d-1153-4de3-93fd-e7c0178570fe.png#averageHue=%23353434&amp;clientId=u51acf4b0-f2b0-4&amp;from=paste&amp;height=90&amp;id=uf298b392&amp;originHeight=121&amp;originWidth=1092&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=47037&amp;status=done&amp;style=none&amp;taskId=ub64f8ec9-bd77-47ac-8594-bec0aa10c5a&amp;title=&amp;width=808.8889460308602" alt="image.png" /><br />得到第64个页目录项的内容为: 0x<strong>00fa7</strong>027 0x00000000，根据页目录项的结构，前20位表示所指向的页表的地址的高20位 (<a href="https://stackoverflow.com/questions/26858196/why-does-page-directory-entries-need-20-bits-to-point-210-page-tables">why</a>）为<code>0x00fa7</code>，因为页表物理地址的低12位为0（对齐到4KB的倍数），因此页表的最终的物理地址为<code>0x00fa7000</code><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682402023037-66c0d317-113a-4a4f-8681-31a71bc759df.png#averageHue=%23e5e5e5&amp;clientId=u51acf4b0-f2b0-4&amp;from=paste&amp;height=242&amp;id=u15511423&amp;originHeight=327&amp;originWidth=551&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=61946&amp;status=done&amp;style=none&amp;taskId=ue2fe15e8-a2cb-4888-8886-e513e46cc59&amp;title=&amp;width=408.14817698077286" alt="image.png" /><br />一个页表项占4个字节，使用<code>xp /2w 0x00fa7000+4*3</code>查找目标页表的第3个页表项(物理页框)<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682403935085-f76a7727-58a8-4ede-a0cd-cb73c3bf7051.png#averageHue=%230b0b0b&amp;clientId=u51acf4b0-f2b0-4&amp;from=paste&amp;height=84&amp;id=u5f7c6a64&amp;originHeight=113&amp;originWidth=1078&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=62441&amp;status=done&amp;style=none&amp;taskId=u3f8c8e4c-e96f-4f43-9699-47ea9589fe7&amp;title=&amp;width=798.5185749279004" alt="image.png" /><br />得到第3个页表项的内容为0x<strong>00fa6</strong>067 0x00000000<br />根据页表项的结构，前20项表示物理页框的高20位地址: 0x00fa6 (物理页面大小为4KB，基地址与4KB对齐，为 0x**** **** **** **** **** 0000 0000 0000) ,因此目标物理页框的基地址为0x00fa6000<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682403115415-dfde4404-b9c2-4a6c-bb2f-2f2999918190.png#averageHue=%23efefef&amp;clientId=u51acf4b0-f2b0-4&amp;from=paste&amp;height=406&amp;id=u89e16b01&amp;originHeight=548&amp;originWidth=961&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=108043&amp;status=done&amp;style=none&amp;taskId=u4e8e6d00-8b0f-4a14-86a6-41307468cde&amp;title=&amp;width=711.8519021388797" alt="image.png" /><br />最后我们加上页内偏移4，得到最终的物理地址<code>0x00fa6004</code></p><ol start="4"><li>验证</li></ol><p>执行<code>xp /w 0x00fa6004</code>查看我们确定的物理地址的数据内容<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682404195303-e372e6e4-8bc3-4140-b265-30c690f38f74.png#averageHue=%23272726&amp;clientId=u51acf4b0-f2b0-4&amp;from=paste&amp;height=58&amp;id=u33afc753&amp;originHeight=78&amp;originWidth=822&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=18550&amp;status=done&amp;style=none&amp;taskId=ueddd5279-0ae1-4928-aace-a3f07eb3360&amp;title=&amp;width=608.8889319023508" alt="image.png" /><br />这个值与<code>i</code>在程序中的值相一致<br />用命令<code>setpmem 0x00fa6004 4 0</code>将<code>0x00fa6004</code>开始的4个字节(i为int型)全部设置为0，即设置i为0，则程序从原本的无限循环中退出<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682404491015-b0f59a2a-6474-4d82-b72e-b3f7cca247b0.png#averageHue=%232b2b2b&amp;clientId=u51acf4b0-f2b0-4&amp;from=paste&amp;height=116&amp;id=ud088a520&amp;originHeight=156&amp;originWidth=1326&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=47887&amp;status=done&amp;style=none&amp;taskId=u664cbb0f-3689-4614-8261-b74085ec6eb&amp;title=&amp;width=982.2222916089016" alt="image.png" /><br /><a name="Thxvd"></a></p><h2 id="2-添加共享内存功能"><a class="markdownIt-Anchor" href="#2-添加共享内存功能"></a> 2. 添加共享内存功能</h2><p><a name="prXmy"></a></p><h3 id="1-前提-通过brk划分虚拟内存"><a class="markdownIt-Anchor" href="#1-前提-通过brk划分虚拟内存"></a> (1) 前提: 通过brk划分虚拟内存</h3><p>进程栈和堆之间的内存空间可以映射到共享的物理页面，brk作为指向进程堆的末尾的指针（即下图中处于下方的虚线），将brk加上进程数据段在虚拟内存中的基址，便可以得到brk的虚拟地址，以这个地址为起点，划分出大小为PAGE_SIZE的虚拟内存，再将这部分虚拟内存通过<code>put_page</code>映射到共享内存上<br /><img src="https://i.stack.imgur.com/1aV6B.png#from=url&amp;id=Lavvc&amp;originHeight=193&amp;originWidth=128&amp;originalType=binary&amp;ratio=1.6500000953674316&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" /><br /><a name="loSCp"></a></p><h3 id="2-创建用于管理共享内存的数据结构"><a class="markdownIt-Anchor" href="#2-创建用于管理共享内存的数据结构"></a> (2) 创建用于管理共享内存的数据结构</h3><p><code>linux-0.11/include/linux/shm.h</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__SHM</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__SHM</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SHM_SIZE</span> <span class="token expression"><span class="token number">32</span> </span><span class="token comment">/*Maximum number of shared pages*/</span></span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token class-name">key_t</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">shm</span><span class="token punctuation">&#123;</span>        <span class="token class-name">key_t</span> key<span class="token punctuation">;</span>          <span class="token keyword">unsigned</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>          <span class="token keyword">unsigned</span> <span class="token keyword">long</span> page<span class="token punctuation">;</span> <span class="token comment">/*shared page address */</span><span class="token punctuation">&#125;</span>shm<span class="token punctuation">;</span>shm shm_list<span class="token punctuation">[</span>SHM_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="VLVYG"></a></p><h3 id="3-创建共享内存相关的系统调用"><a class="markdownIt-Anchor" href="#3-创建共享内存相关的系统调用"></a> (3) 创建共享内存相关的系统调用</h3><p><code>linux-0.11/kernel/shm.c</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__LIBRARY__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/kernel.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/sched.h></span> <span class="token comment">/*for current define*/</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/shm.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/mm.h></span> <span class="token comment">/* PAGE_SIZE,get_free_page */</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span><span class="token comment">/*function: apply for a shared page, return shm_id according to key*/</span><span class="token keyword">int</span> <span class="token function">sys_shmget</span><span class="token punctuation">(</span><span class="token class-name">key_t</span> key<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">void</span><span class="token operator">*</span> page<span class="token punctuation">;</span>      <span class="token comment">/*printk("hello, i am here for debug!\n");*/</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">></span> PAGE_SIZE<span class="token punctuation">)</span> <span class="token comment">/*size beyond border*/</span>        <span class="token punctuation">&#123;</span>                <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"size beyond PAGE_SIZE!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                errno <span class="token operator">=</span> EINVAL<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>SHM_SIZE<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>shm_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">==</span> key<span class="token punctuation">)</span>   <span class="token comment">/*constructed before*/</span>                <span class="token punctuation">&#123;</span>                        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"constructed before!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> i<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        page <span class="token operator">=</span> <span class="token function">get_free_page</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>page<span class="token punctuation">)</span>   <span class="token comment">/*no free memory*/</span>        <span class="token punctuation">&#123;</span>                <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"no free page!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                errno <span class="token operator">=</span> ENOMEM<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"shmget get memory's address is 0x%08x\n"</span><span class="token punctuation">,</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>SHM_SIZE<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shm_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token comment">// record for manage</span>                <span class="token punctuation">&#123;</span>                        shm_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>                         shm_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>page <span class="token operator">=</span> page<span class="token punctuation">;</span>                        shm_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>                        <span class="token keyword">return</span> i<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">/*shm_list is full and key is invalid*/</span>        <span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">sys_shmat</span><span class="token punctuation">(</span><span class="token keyword">int</span> shmid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> data_base<span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> brk<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>shmid<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> shmid<span class="token operator">>=</span>SHM_SIZE <span class="token operator">||</span> shm_list<span class="token punctuation">[</span>shmid<span class="token punctuation">]</span><span class="token punctuation">.</span>page <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>                errno <span class="token operator">=</span> EINVAL<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        data_base <span class="token operator">=</span> <span class="token function">get_base</span><span class="token punctuation">(</span>current<span class="token operator">-></span>ldt<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*I know get_base from copy_mem() function*/</span>        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"current data_base = 0x%08x, new page = 0x%08x\n"</span><span class="token punctuation">,</span>data_base<span class="token punctuation">,</span>shm_list<span class="token punctuation">[</span>shmid<span class="token punctuation">]</span><span class="token punctuation">.</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* brk is the end of heap section,         * the virtual memory space between heap and stack can map to shared physical page,         * so slice this part of virtual memory to map the shared page */</span>        <span class="token comment">/*logic address convert to virtual address by adding base address*/</span>        brk <span class="token operator">=</span> current<span class="token operator">-></span>brk<span class="token operator">+</span>data_base<span class="token punctuation">;</span>        current<span class="token operator">-></span>brk <span class="token operator">+=</span>PAGE_SIZE<span class="token punctuation">;</span>        <span class="token function">put_page</span><span class="token punctuation">(</span>shm_list<span class="token punctuation">[</span>shmid<span class="token punctuation">]</span><span class="token punctuation">.</span>page<span class="token punctuation">,</span> brk<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>current<span class="token operator">-></span>brk <span class="token operator">-</span> PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*logic address*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="wE6Zi"></a></p><h3 id="4-创建生产者进程"><a class="markdownIt-Anchor" href="#4-创建生产者进程"></a> (4) 创建生产者进程</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__LIBRARY__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;linux/sem.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;linux/sched.h></span></span><span class="token function">_syscall2</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span><span class="token operator">*</span><span class="token punctuation">,</span> sem_open<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token function">_syscall1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">,</span> sem_wait<span class="token punctuation">,</span> <span class="token class-name">sem_t</span><span class="token operator">*</span><span class="token punctuation">,</span> sem<span class="token punctuation">)</span>    <span class="token function">_syscall1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">,</span> sem_post<span class="token punctuation">,</span> <span class="token class-name">sem_t</span><span class="token operator">*</span><span class="token punctuation">,</span> sem<span class="token punctuation">)</span>    <span class="token function">_syscall1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> sem_unlink<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    <span class="token function">_syscall2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> shmget<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span>    <span class="token function">_syscall1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">,</span> shmat<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> shmid<span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> NR_PRODUCTS <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span> <span class="token keyword">const</span> <span class="token keyword">int</span> BUFFER_SIZE <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> SHM_KEY <span class="token operator">=</span> <span class="token number">2023</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> shm_id<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> ptr<span class="token punctuation">;</span>  <span class="token comment">/*point to the shared memory*/</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token comment">/* products number */</span>    <span class="token keyword">int</span> buffer_pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token class-name">sem_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">,</span> <span class="token operator">*</span>full<span class="token punctuation">,</span> <span class="token operator">*</span>empty<span class="token punctuation">;</span>    mutex <span class="token operator">=</span> <span class="token function">sem_open</span><span class="token punctuation">(</span><span class="token string">"MUTEX"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    full <span class="token operator">=</span> <span class="token function">sem_open</span><span class="token punctuation">(</span><span class="token string">"FULL"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    empty <span class="token operator">=</span> <span class="token function">sem_open</span><span class="token punctuation">(</span><span class="token string">"EMPTY"</span><span class="token punctuation">,</span>BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    shm_id <span class="token operator">=</span> <span class="token function">shmget</span><span class="token punctuation">(</span>SHM_KEY<span class="token punctuation">,</span>BUFFER_SIZE<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>shm_id <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"shmget failed!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">shmat</span><span class="token punctuation">(</span>shm_id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"shmat failed!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>NR_PRODUCTS<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">sem_wait</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sem_wait</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        ptr<span class="token punctuation">[</span>buffer_pos<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pid %d:\tproducer produces product %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sem_post</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sem_post</span><span class="token punctuation">(</span>full<span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer_pos <span class="token operator">=</span> <span class="token punctuation">(</span>buffer_pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>BUFFER_SIZE<span class="token punctuation">;</span>  <span class="token comment">/*end of the buffer,refresh*/</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="GfZrr"></a></p><h3 id="5-创建消费者进程"><a class="markdownIt-Anchor" href="#5-创建消费者进程"></a> (5) 创建消费者进程</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__LIBRARY__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;linux/sem.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;linux/sched.h></span></span><span class="token function">_syscall2</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span><span class="token operator">*</span><span class="token punctuation">,</span> sem_open<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token function">_syscall1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">,</span> sem_wait<span class="token punctuation">,</span> <span class="token class-name">sem_t</span><span class="token operator">*</span><span class="token punctuation">,</span> sem<span class="token punctuation">)</span><span class="token function">_syscall1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">,</span> sem_post<span class="token punctuation">,</span> <span class="token class-name">sem_t</span><span class="token operator">*</span><span class="token punctuation">,</span> sem<span class="token punctuation">)</span><span class="token function">_syscall1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> sem_unlink<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token function">_syscall2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> shmget<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token function">_syscall1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">,</span> shmat<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> shmid<span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token keyword">int</span> NR_PRODUCTS <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span> <span class="token keyword">const</span> <span class="token keyword">int</span> BUFFER_SIZE <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> SHM_KEY <span class="token operator">=</span> <span class="token number">2023</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> shm_id<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> ptr<span class="token punctuation">;</span>    <span class="token keyword">int</span> used_cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">/*products count*/</span>    <span class="token keyword">int</span> buffer_pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">sem_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">,</span> <span class="token operator">*</span>full<span class="token punctuation">,</span> <span class="token operator">*</span>empty<span class="token punctuation">;</span>mutex <span class="token operator">=</span> <span class="token function">sem_open</span><span class="token punctuation">(</span><span class="token string">"MUTEX"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>full <span class="token operator">=</span> <span class="token function">sem_open</span><span class="token punctuation">(</span><span class="token string">"FULL"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>empty <span class="token operator">=</span> <span class="token function">sem_open</span><span class="token punctuation">(</span><span class="token string">"EMPTY"</span><span class="token punctuation">,</span>BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        shm_id <span class="token operator">=</span> <span class="token function">shmget</span><span class="token punctuation">(</span>SHM_KEY<span class="token punctuation">,</span>BUFFER_SIZE<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>shm_id <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"shmget failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">shmat</span><span class="token punctuation">(</span>shm_id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"shmat failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">sem_wait</span><span class="token punctuation">(</span>full<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sem_wait</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pid %d consumer consumes products %d\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ptr<span class="token punctuation">[</span>buffer_pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sem_post</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sem_post</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer_pos <span class="token operator">=</span> <span class="token punctuation">(</span>buffer_pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>BUFFER_SIZE<span class="token punctuation">;</span>  <span class="token comment">/*end of the buffer,refresh*/</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">++</span>used_cnt <span class="token operator">==</span> NR_PRODUCTS<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sem_unlink</span><span class="token punctuation">(</span><span class="token string">"EMPTY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sem_unlink</span><span class="token punctuation">(</span><span class="token string">"MUTEX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sem_unlink</span><span class="token punctuation">(</span><span class="token string">"FULL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="krol7"></a></p><h3 id="6-添加到系统调用和修改makefile"><a class="markdownIt-Anchor" href="#6-添加到系统调用和修改makefile"></a> (6) 添加到系统调用和修改MakeFile</h3><ol><li>添加到系统调用</li></ol><p>如之前的lab一样，验证结果时将unistd.h复制到hdc/usr/include目录下，记得将shm.h也复制到对应目录中<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682520527179-52dba4f9-2fca-42f4-a647-f84bcc96483c.png#averageHue=%23020101&amp;clientId=u4414e13a-93d5-4&amp;from=paste&amp;height=283&amp;id=u569df7d6&amp;originHeight=378&amp;originWidth=1131&amp;originalType=binary&amp;ratio=1.100000023841858&amp;rotation=0&amp;showTitle=false&amp;size=78872&amp;status=done&amp;style=none&amp;taskId=udd4d35b1-2183-47dc-b07a-d9ed4a2cf95&amp;title=&amp;width=846.1817626953125" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682520564992-dc556e6f-47fa-458d-8125-5a2f99510aa5.png#averageHue=%230a0908&amp;clientId=u4414e13a-93d5-4&amp;from=paste&amp;height=368&amp;id=u9b1b2c93&amp;originHeight=652&amp;originWidth=1557&amp;originalType=binary&amp;ratio=1.100000023841858&amp;rotation=0&amp;showTitle=false&amp;size=184908&amp;status=done&amp;style=none&amp;taskId=u80068af6-8005-48d8-9237-55e59b18553&amp;title=&amp;width=877.6334228515625" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682520600836-449dd10e-b55b-47f2-bf13-145e43483016.png#averageHue=%23040202&amp;clientId=u4414e13a-93d5-4&amp;from=paste&amp;height=334&amp;id=u2a625bd5&amp;originHeight=436&amp;originWidth=1164&amp;originalType=binary&amp;ratio=1.100000023841858&amp;rotation=0&amp;showTitle=false&amp;size=89550&amp;status=done&amp;style=none&amp;taskId=u7b41d7f9-6266-4a0a-a74f-eccd206e206&amp;title=&amp;width=892.1817626953125" alt="image.png" /></p><ol start="2"><li>修改MakeFile</li></ol><p><code>linux-0.11/kernel/Makefile</code><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682520876366-81586b4c-c432-4e3c-8e53-e64cff3cdaa4.png#averageHue=%23050404&amp;clientId=u4414e13a-93d5-4&amp;from=paste&amp;height=152&amp;id=u00d33052&amp;originHeight=167&amp;originWidth=1093&amp;originalType=binary&amp;ratio=1.100000023841858&amp;rotation=0&amp;showTitle=false&amp;size=25627&amp;status=done&amp;style=none&amp;taskId=ubd76bfd9-0a7c-475b-a3b2-3b08f53f50f&amp;title=&amp;width=993.636342099876" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682520946452-d6ac0a1c-64c6-4e8e-9d73-1d25e0cceeb8.png#averageHue=%23080706&amp;clientId=u4414e13a-93d5-4&amp;from=paste&amp;height=221&amp;id=u609f0929&amp;originHeight=385&amp;originWidth=1891&amp;originalType=binary&amp;ratio=1.100000023841858&amp;rotation=0&amp;showTitle=false&amp;size=110463&amp;status=done&amp;style=none&amp;taskId=u7504a2f2-1ac2-4237-a4ad-93c287b33b0&amp;title=&amp;width=1086.6334228515625" alt="image.png" /><br /><a name="eTe1e"></a></p><h3 id="7-踩的坑"><a class="markdownIt-Anchor" href="#7-踩的坑"></a> (7) 踩的坑</h3><ol><li>编译shm.c时，总是出现<code>parse error before int</code>的错误，耗时调试了一个小时还是无法解决，Google后发现原因在于linux0.11下的C标准为C89，要求声明变量的语句只能出现在非声明语句的前面 (声明同时又赋值语句的可以)</li><li>lab5的sem.c写的有问题，consumer进程一直处于sleep状态，添加了几条打印语句后发现，consumer进程和producer进程未使用同一套信号量，原因在于sem.c的sys_sem_open函数内定义kernel_sem_name未显式的初始化，我以为该变量会<a href="https://stackoverflow.com/questions/18688971/c-char-array-initialization-what-happens-if-there-are-less-characters-in-the-st">默认初始化为0值</a> (‘\0’)，但在c89的标准下，未显式初始化的字符数组不会被默认初始化，这将导致未知的行为，发现这点花了我不少时间。在显式初始化<code>char kernel_sem_name[25]=&#123;&quot;\0&quot;&#125;;</code>后结果正确</li><li>consumer进程会出现&quot;kernel panic: trying to free free page&quot;，出现这个问题的原因是producer进程和consumer进程共用一个页面，producer生产完全部产品后先退出同时释放共享内存，这将导致consumer进程退出时试图释放已经释放的页面，解决方法是注释掉memery.c文件中free_page函数中的相关panic语句</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682520309825-394372a9-02a9-4c5f-9dc2-58ee03e3ed95.png#averageHue=%23050403&amp;clientId=u4414e13a-93d5-4&amp;from=paste&amp;height=525&amp;id=ufc7965e9&amp;originHeight=577&amp;originWidth=1085&amp;originalType=binary&amp;ratio=1.100000023841858&amp;rotation=0&amp;showTitle=false&amp;size=113475&amp;status=done&amp;style=none&amp;taskId=ub39a6e29-54eb-479a-974d-29d06b20ef8&amp;title=&amp;width=986.3636149847807" alt="image.png" /><br /><a name="LfbWf"></a></p><h2 id="3-验证结果"><a class="markdownIt-Anchor" href="#3-验证结果"></a> 3. 验证结果</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682510527892-a3dc49b2-e1cb-46bb-96c5-fe0e7e047d40.png#averageHue=%23272726&amp;clientId=uba223810-dc1f-4&amp;from=paste&amp;height=452&amp;id=u977d19ee&amp;originHeight=508&amp;originWidth=779&amp;originalType=binary&amp;ratio=1.6500000953674316&amp;rotation=0&amp;showTitle=false&amp;size=43535&amp;status=done&amp;style=none&amp;taskId=u31918d60-b5af-4e51-a992-7b44e3423cc&amp;title=&amp;width=693.116455078125" alt="image.png" /></p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;mount-hdccp hdc&#x2F;usr&#x2F;root&#x2F;c_output c_output.txtcp hdc&#x2F;usr&#x2F;root&#x2F;p_output p_output.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682510598690-ebda0760-043b-4bd9-b4bc-9f315b8a4cba.png#averageHue=%23090807&amp;clientId=uba223810-dc1f-4&amp;from=paste&amp;height=358&amp;id=uc2dd2f1e&amp;originHeight=590&amp;originWidth=1009&amp;originalType=binary&amp;ratio=1.6500000953674316&amp;rotation=0&amp;showTitle=false&amp;size=125426&amp;status=done&amp;style=none&amp;taskId=uf6ab358f-a3c6-4563-94bb-da662b0e4e8&amp;title=&amp;width=611.5151161705297" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682510624205-9d8041cb-2d82-441f-b820-b7426cf66505.png#averageHue=%230e0c0b&amp;clientId=uba223810-dc1f-4&amp;from=paste&amp;height=383&amp;id=ub33ee8cf&amp;originHeight=632&amp;originWidth=911&amp;originalType=binary&amp;ratio=1.6500000953674316&amp;rotation=0&amp;showTitle=false&amp;size=128917&amp;status=done&amp;style=none&amp;taskId=ue065134f-aa21-4611-a01c-608e7acf726&amp;title=&amp;width=552.1211802094673" alt="image.png" /><br /><a name="af4rt"></a></p><h1 id="实验7-终端设备的控制"><a class="markdownIt-Anchor" href="#实验7-终端设备的控制"></a> 实验7 终端设备的控制</h1><p><a name="DOBmZ"></a></p><h2 id="1-添加新的f12响应函数"><a class="markdownIt-Anchor" href="#1-添加新的f12响应函数"></a> 1. 添加新的f12响应函数</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> switch_by_f12_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">press_f12_handle</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>switch_by_f12_flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        switch_by_f12_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        switch_by_f12_flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683088730582-9f8b8b48-b558-4aa7-89bf-e102157de2fd.png#averageHue=%232a2e37&amp;clientId=u3918d10e-6997-4&amp;from=paste&amp;height=233&amp;id=ub2b26a91&amp;originHeight=349&amp;originWidth=878&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=54042&amp;status=done&amp;style=none&amp;taskId=uc6734c4c-d973-4e3e-a381-9fccec6e2d4&amp;title=&amp;width=585.3333333333334" alt="image.png" /><br /><a name="uYQSo"></a></p><h2 id="2-设置响应函数入口"><a class="markdownIt-Anchor" href="#2-设置响应函数入口"></a> 2. 设置响应函数入口</h2><p>键盘输入后，操作系统会将键盘扫描码做为下标，调用key_table函数数组中保存的与该按键对应的响应函数，因此要让CPU在按下f12之后跳转到新的响应函数执行需要修改key_table，从该数组一旁的注释就可以看出f12对应的scan code是88D (58H)<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683098473823-070b4fb1-1f7a-4a45-9cb0-961bb203c5c9.png#averageHue=%232a2e38&amp;clientId=ubcc39749-940b-4&amp;from=paste&amp;height=135&amp;id=u7de7afa4&amp;originHeight=202&amp;originWidth=1049&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=54945&amp;status=done&amp;style=none&amp;taskId=ub84941cf-e8e4-4871-8ba7-82283d9a8a6&amp;title=&amp;width=699.3333333333334" alt="image.png" /><br /><a name="deXFF"></a></p><h2 id="3-修改con_write函数"><a class="markdownIt-Anchor" href="#3-修改con_write函数"></a> 3. 修改con_write函数</h2><p>con_write函数执行最终的输出显示器操作，该函数先用GETCH从输出缓冲区中提取一个字节字符到变量<code>c</code>，再写入显存中。我们根据flag修改变量<code>c</code>的值即可，为了实验结果更可观，我们选择只对字母和数字的输出进行转换<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683099712562-f91a9cf7-9e84-48c2-93e3-579a4f5ae4b5.png#averageHue=%23292e37&amp;clientId=ubcc39749-940b-4&amp;from=paste&amp;height=319&amp;id=u15b1877a&amp;originHeight=479&amp;originWidth=1191&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=81623&amp;status=done&amp;style=none&amp;taskId=uaa55ccf7-f1cd-41f6-8464-e0155d69970&amp;title=&amp;width=794" alt="image.png" /><br /><a name="EB7eC"></a></p><h2 id="4-修改ttyh"><a class="markdownIt-Anchor" href="#4-修改ttyh"></a> 4. 修改tty.h</h2><p>在头文件中包含<code>switch_by_f12_flag</code>变量和响应函数的声明，以便在其他文件中使用<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683098924984-6c3708f3-4872-4e7b-ad63-08a64288554e.png#averageHue=%232a2f39&amp;clientId=ubcc39749-940b-4&amp;from=paste&amp;height=281&amp;id=uf5d8217e&amp;originHeight=422&amp;originWidth=874&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=72774&amp;status=done&amp;style=none&amp;taskId=u57c1131d-6702-4fab-a6e7-85f3a862c71&amp;title=&amp;width=582.6666666666666" alt="image.png" /><br /><a name="eWnw0"></a></p><h2 id="5-验证结果-2"><a class="markdownIt-Anchor" href="#5-验证结果-2"></a> 5. 验证结果</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683100157855-0a67f662-2689-4526-8f5e-9a36485b54a8.png#averageHue=%23d6b078&amp;clientId=ubcc39749-940b-4&amp;from=paste&amp;height=361&amp;id=ucf7e2da6&amp;originHeight=542&amp;originWidth=921&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=48978&amp;status=done&amp;style=none&amp;taskId=uf25e680f-9f62-495d-9d8a-e452c1bff0f&amp;title=&amp;width=614" alt="image.png" /><br /><a name="LY6DX"></a></p><h1 id="实验8-proc文件系统的实现"><a class="markdownIt-Anchor" href="#实验8-proc文件系统的实现"></a> 实验8 proc文件系统的实现</h1><p><a name="wqaCO"></a></p><h2 id="前提"><a class="markdownIt-Anchor" href="#前提"></a> 前提</h2><p><a name="SCacJ"></a></p><h3 id="vsprintf函数"><a class="markdownIt-Anchor" href="#vsprintf函数"></a> vsprintf函数</h3><p>vsprintf 是一个C库函数，用于将可变参数列表（va_list）中的值格式化为字符串，并将结果字符串存储在指定的字符数组（缓冲区）中。vsprintf 是 sprintf 函数的可变参数版本，通常在需要处理可变数量参数的情况下使用。<br />vsprintf 函数的原型如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">vsprintf</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> va_list ap<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数说明：</p><ol><li>str：指向目标字符数组（缓冲区）的指针，用于存储格式化后的字符串。</li><li>format：一个格式字符串，它描述了如何将参数列表中的值格式化为字符串。格式字符串可以包含普通字符和转换说明符（例如 %d、%s 等）。</li><li>ap：一个 va_list 类型的参数列表，用于存储需要格式化的值。</li></ol><p>返回值：vsprintf 函数返回写入目标字符数组（不包括最后的空字符）的字符数。如果发生错误，返回负值。<br />因为该函数接受一个va_list类型的参数而不是一个通常使用的可变参数，因此我们要使用va_start函数获取一个va_list的参数<br />va_start 是C语言标准库中的一个宏，用于处理可变参数列表。va_start 用于在可变参数函数中初始化一个 va_list 类型的变量，使其指向传入的第一个可变参数。通常与 va_arg 和 va_end 宏一起使用，分别用于访问可变参数列表中的参数和完成参数列表的处理 (va_end释放为 va_list 类型的变量分配的资源)。<br />va_start 宏的原型如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">va_start</span><span class="token punctuation">(</span>va_list ap<span class="token punctuation">,</span> last_arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>ap：一个 va_list 类型的变量，用于存储指向可变参数列表的状态。</li><li>last_arg：函数参数列表中最后一个<strong>固定参数</strong>的名称 (可变参数在固定参数之后)。在初始化 va_list 时，va_start 会找到此固定参数在内存中的位置，从而确定可变参数列表的起始位置。<br /><a name="HKqfx"></a></li></ol><h3 id="mknod系统调用"><a class="markdownIt-Anchor" href="#mknod系统调用"></a> mknod系统调用</h3><p>mknod 系统调用用于创建特殊文件（设备文件）在文件系统中。特殊文件通常用于表示设备，如字符设备和块设备。字符设备通常用于表示可逐字符读写的设备，如终端设备；块设备通常用于表示可按块读写的设备，如磁盘设备。本实验用它来创建proc文件。<br />mknod 系统调用的主要参数包括：</p><ol><li>路径名（pathname）：要创建的特殊文件的路径名。</li><li>文件模式（mode）：描述新创建的特殊文件类型和权限的位掩码。文件类型可以是字符设备（S_IFCHR）或块设备（S_IFBLK）。</li><li>设备号（dev）：设备号用于唯一标识设备。通常分为主设备号和次设备号。主设备号用于标识设备类型或驱动程序，而次设备号用于标识同一类型设备的实例。</li></ol><p>当调用 mknod 系统调用时，操作系统会执行以下操作：</p><ol><li>根据提供的路径名找到目标目录。</li><li>在目标目录中创建一个新的目录项，设置其文件名和 inode 号(更新目录树)。</li><li>分配一个新的 inode，并将其与目录项关联。</li><li>设置 inode 的属性，如文件类型（字符设备或块设备）、权限和设备号等。</li><li>更新文件系统元数据，如目录和 inode 的更改时间等。</li></ol><p>创建特殊文件后，应用程序可以使用设备文件与相应的设备进行通信。例如，通过 open、read、write 和 ioctl 系统调用与设备驱动程序进行交互。这使得设备操作看起来与普通文件操作相似，简化了应用程序的开发。<br /><a name="L6DWu"></a></p><h2 id="添加proc类型文件"><a class="markdownIt-Anchor" href="#添加proc类型文件"></a> 添加proc类型文件</h2><p>OS根据文件类型选择不同处理函数，从而实现对不同类型的文件的操作，我们先在linux0.11中添加proc类型文件，之后再编写对应的处理函数就能完成proc文件系统的添加了。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683344038857-05b21492-6ac6-44e0-b550-cfa4e091c11f.png#averageHue=%232a2f39&amp;clientId=u9002f12d-0e7b-4&amp;from=paste&amp;height=453&amp;id=ub1b8ac4b&amp;originHeight=566&amp;originWidth=939&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=117376&amp;status=done&amp;style=none&amp;taskId=u902c17e5-7d02-45ea-a89f-cb91bafcf81&amp;title=&amp;width=751.2" alt="image.png" /><br /><a name="J0puW"></a></p><h2 id="修改mknod系统调用"><a class="markdownIt-Anchor" href="#修改mknod系统调用"></a> 修改mknod系统调用</h2><p>我们已经提到，mknod用于创建特殊文件，即块设备文件和字符流文件。现在我们要给它添加对proc文件的支持。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683344565695-25d10cda-e3c2-4db0-b456-342d34252c93.png#averageHue=%232c333d&amp;clientId=u9002f12d-0e7b-4&amp;from=paste&amp;height=148&amp;id=u81eb111d&amp;originHeight=185&amp;originWidth=955&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=42267&amp;status=done&amp;style=none&amp;taskId=u5e6d4240-b9ac-400f-8674-5c86c82cae3&amp;title=&amp;width=764" alt="image.png" /><br /><a name="Z3MKP"></a></p><h2 id="创建proc目录文件proc普通文件"><a class="markdownIt-Anchor" href="#创建proc目录文件proc普通文件"></a> 创建proc目录文件，proc普通文件</h2><p>在系统初始化时，根目录文件挂载之后 (这样传递给mknod的路径才有效)，创建proc文件系统的目录文件和文件。<br />因为此时在用户态，因此要通过添加系统调用的方式使用mkdir和mknod，而不能直接使用sys_mkdir和sys_mknod<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683346720336-d633b22f-bc22-4b07-a373-54bac4c02511.png#averageHue=%232a2f39&amp;clientId=u9002f12d-0e7b-4&amp;from=paste&amp;height=169&amp;id=u77aca2e7&amp;originHeight=211&amp;originWidth=1192&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=54630&amp;status=done&amp;style=none&amp;taskId=ua835db87-8c11-40fc-8647-5f478bb0d3a&amp;title=&amp;width=953.6" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683344746244-3a83df22-0727-478b-b33c-7629995477af.png#averageHue=%232a2f39&amp;clientId=u9002f12d-0e7b-4&amp;from=paste&amp;height=386&amp;id=uf6850421&amp;originHeight=483&amp;originWidth=992&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=106228&amp;status=done&amp;style=none&amp;taskId=ua5ef05d2-fdcd-43b0-8e65-129289cd21d&amp;title=&amp;width=793.6" alt="image.png" /><br /><a name="gW5xS"></a></p><h2 id="验证文件是否创建成功"><a class="markdownIt-Anchor" href="#验证文件是否创建成功"></a> 验证文件是否创建成功</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683345269096-07a4e3fa-4d74-4671-b7b4-8788f81f56f1.png#averageHue=%231c1c1c&amp;clientId=u9002f12d-0e7b-4&amp;from=paste&amp;height=179&amp;id=ubff94101&amp;originHeight=224&amp;originWidth=525&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=9192&amp;status=done&amp;style=none&amp;taskId=u6a360e8c-a94f-4bb8-b4d0-bef4f08b435&amp;title=&amp;width=420" alt="image.png" /><br />可以看到，我们已经成功在根目录下创建了proc目录文件，并在该文件下创建了proc普通文件，这三个文件分别表示系统进程信息，系统硬件信息，系统存储信息<br />这里使用cat输出了一行信息和一行报错，要明白这两条信息怎么来的，首先要知道cat命令背后执行了什么操作: 用sys_open打开一个文件，用sys_read将文件内容读入缓冲区，最后用printf打印缓冲区的内容到屏幕上<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683345351627-af875807-b6e7-4414-87dc-3931056261db.png#averageHue=%23fefbf6&amp;clientId=u9002f12d-0e7b-4&amp;from=paste&amp;height=114&amp;id=u0eb7e43e&amp;originHeight=142&amp;originWidth=741&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=60182&amp;status=done&amp;style=none&amp;taskId=u5688375e-3cee-4ccd-8b3f-87e4ee3d67a&amp;title=&amp;width=592.8" alt="image.png" /><br />通过查看sys_read的源码，我们可以找到这两条信息的来源。当sys_read打开proc类型文件没有对应的处理函数时，就会出现这两条信息，因此我们接下来为proc类型文件编写对应的处理函数proc_read即可<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683345501591-9a30e972-a450-4a62-b646-c3cf609c774a.png#averageHue=%232a303a&amp;clientId=u9002f12d-0e7b-4&amp;from=paste&amp;height=574&amp;id=ub3f0c372&amp;originHeight=718&amp;originWidth=1163&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=158548&amp;status=done&amp;style=none&amp;taskId=ua74627e7-72f8-428b-9e9d-f492c9565ed&amp;title=&amp;width=930.4" alt="image.png" /><br />为proc文件添加处理分支<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683359020684-3518ed23-5359-432a-be5e-d9fa88f8691e.png#averageHue=%232a2f38&amp;clientId=u511059e4-198a-4&amp;from=paste&amp;height=193&amp;id=u47a43b1e&amp;originHeight=241&amp;originWidth=1203&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=47427&amp;status=done&amp;style=none&amp;taskId=ue8f26e3f-5760-413d-8759-456062cf094&amp;title=&amp;width=962.4" alt="image.png" /><br /><a name="PNhv9"></a></p><h2 id="编写proc文件处理函数"><a class="markdownIt-Anchor" href="#编写proc文件处理函数"></a> 编写proc文件处理函数</h2><p>添加<code>linux-0.11/fs/proc_read.c</code>，这里只完成了进程信息的获取</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;asm/segment.h></span>  <span class="token comment">// put_fs_byte</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/fs.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/kernel.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/sched.h></span>  <span class="token comment">// process-related variables: task struct, FIRST_TASK</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h></span>       <span class="token comment">//  vs_start va_end</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">char</span> krnbuf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'\0'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">vsprintf</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fmt<span class="token punctuation">,</span> va_list args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fmt<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    va_list args<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token comment">// initalize args to first changeable parameter</span>    <span class="token function">va_start</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> fmt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// vsprintf function returns the number of characters written to the buffer</span>    i <span class="token operator">=</span> <span class="token function">vsprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> fmt<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">va_end</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">get_psinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> buf_offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    buf_offset <span class="token operator">+=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span>krnbuf <span class="token operator">+</span> buf_offset<span class="token punctuation">,</span> <span class="token string">"%s"</span><span class="token punctuation">,</span>                          <span class="token string">"pid\tstate\tfather\tcounter\tstart_time\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>LAST_TASK<span class="token punctuation">;</span> p <span class="token operator">>=</span> <span class="token operator">&amp;</span>FIRST_TASK<span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            buf_offset <span class="token operator">+=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span>krnbuf <span class="token operator">+</span> buf_offset<span class="token punctuation">,</span> <span class="token string">"%d\t"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>            buf_offset <span class="token operator">+=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span>krnbuf <span class="token operator">+</span> buf_offset<span class="token punctuation">,</span> <span class="token string">"%d\t"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>            buf_offset <span class="token operator">+=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span>krnbuf <span class="token operator">+</span> buf_offset<span class="token punctuation">,</span> <span class="token string">"%d\t"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>father<span class="token punctuation">)</span><span class="token punctuation">;</span>            buf_offset <span class="token operator">+=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span>krnbuf <span class="token operator">+</span> buf_offset<span class="token punctuation">,</span> <span class="token string">"%d\t"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>            buf_offset <span class="token operator">+=</span>                <span class="token function">sprintf</span><span class="token punctuation">(</span>krnbuf <span class="token operator">+</span> buf_offset<span class="token punctuation">,</span> <span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>start_time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> buf_offset<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">proc_read</span><span class="token punctuation">(</span><span class="token keyword">int</span> dev<span class="token punctuation">,</span> <span class="token class-name">off_t</span> <span class="token operator">*</span>pos<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>pos <span class="token operator">/</span> BLOCK_SIZE <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// already read a whole block, start write</span>    <span class="token punctuation">&#123;</span>        <span class="token function">get_psinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>krnbuf<span class="token punctuation">[</span><span class="token operator">*</span>pos <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment">// end of message</span>        <span class="token function">put_fs_byte</span><span class="token punctuation">(</span>krnbuf<span class="token punctuation">[</span><span class="token operator">*</span>pos <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span>                    buf <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// synchronous replication</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">*</span>pos <span class="token operator">+=</span> i<span class="token punctuation">;</span> <span class="token comment">// change f_pos</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span>  <span class="token comment">// return the actual number of bytes read</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="ej6HQ"></a></p><h2 id="修改makefile"><a class="markdownIt-Anchor" href="#修改makefile"></a> 修改Makefile</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683359075672-0ca43074-35e7-4167-97fa-921965a0eee0.png#averageHue=%232b3038&amp;clientId=u511059e4-198a-4&amp;from=paste&amp;height=290&amp;id=u7d54a842&amp;originHeight=362&amp;originWidth=1110&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=63292&amp;status=done&amp;style=none&amp;taskId=u92de2be4-4696-4b77-b24a-9546f172053&amp;title=&amp;width=888" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683359107388-9a8e3ccf-81d7-4d45-b5ff-0eadbe9eaf32.png#averageHue=%232f353f&amp;clientId=u511059e4-198a-4&amp;from=paste&amp;height=138&amp;id=uef988170&amp;originHeight=173&amp;originWidth=1139&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=38277&amp;status=done&amp;style=none&amp;taskId=u4190510b-24d2-419c-b480-af056ec9165&amp;title=&amp;width=911.2" alt="image.png" /><br /><a name="GwS7w"></a></p><h2 id="验证结果"><a class="markdownIt-Anchor" href="#验证结果"></a> 验证结果</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683358947951-c0766d83-d70a-46b7-8dbd-f0880676086b.png#averageHue=%23202020&amp;clientId=u511059e4-198a-4&amp;from=paste&amp;height=394&amp;id=u29a576cb&amp;originHeight=493&amp;originWidth=801&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=24025&amp;status=done&amp;style=none&amp;taskId=u18bf1a2d-4fd4-431e-a56b-c40069b6f49&amp;title=&amp;width=640.8" alt="image.png" /><br /><a href="https://www.cnblogs.com/mirage-mc/tag/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AF%BE%E8%AE%BE/">reference</a></p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
          <category> HIT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Foundation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[HIT-OS]哈工大操作系统过程记录</title>
      <link href="/2023/05/06/OS-Learning/HIT-OS-Record/"/>
      <url>/2023/05/06/OS-Learning/HIT-OS-Record/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>学完整个哈工大的操作系统课程，做完所有labs, 用了一个月多一点的时间，有这样一个伴随着lab的操作系统课程入门，是一件很值得高兴的事情，毕竟直接去看<em>操作系统概念</em>或<em>现代操作系统</em>是一件很乏味的事情。那些实验，对我一个OS新手，确实有点难度，但是学习从来都是一个从不会到会再到熟练精通的过程，有意义的事情再晚去做，它依旧是有意义的，从这里开始，做正确的事情。结合自己的理解和chatgpt的帮助写下了这篇笔记，目的是在于学完计算机网络之后能快速把OS的知识拾起来，也想要帮助其他学习HIT-OS的人</p><h1 id="1-操作系统的引导"><a class="markdownIt-Anchor" href="#1-操作系统的引导"></a> 1. 操作系统的引导</h1><h2 id="1-bootsect载入os"><a class="markdownIt-Anchor" href="#1-bootsect载入os"></a> 1) bootsect载入OS</h2><ol><li>PC刚开机时，CPU处于实模式，这个模式下CPU按照<code>CS&lt;&lt;4 + IP</code>的形式寻址，此时<code>CS:IP</code>指向<code>0xFFFF0</code>,即存储在ROM上的BIOS程序，于是CPU自动执行BIOS程序，这段程序首先检查硬件设施，接着从磁盘读入首扇区（主引导扇区-Master Boot Record-MBR，共512个字节）到内存<code>0x07c00</code>处，并设置<code>CS:IP</code>指向这个地址</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679119740253-b8f8f867-4a18-4c03-a85e-8a31386d83b7.png#averageHue=%23edeae9&amp;clientId=u2a122f00-1508-4&amp;from=paste&amp;height=169&amp;id=u77f40013&amp;originHeight=534&amp;originWidth=1381&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=200254&amp;status=done&amp;style=none&amp;taskId=u45fc5224-5afa-4b6b-8f01-556c7d49007&amp;title=&amp;width=438" alt="image.png" /></p><ol start="2"><li>CPU开始执行MBR的程序，即<code>**bootsect**</code>(作用：将磁盘上的操作系统读入内存，计算机本质上是CPU取指执行，要让操作系统发挥作用，首先得把它加载到内存上)，这段程序先将自己（整个首扇区256 words）转移到新地址<code>0x90000</code>处（目的在于腾出位置存放操作系统，原因在于防止后续移动操作系统覆盖了<code>setup</code>），并跳转到该新地址处继续执行后面的指令</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679119877979-6bfd437c-9e69-4b90-8eac-c3eb069d0cbd.png#averageHue=%23f1eeed&amp;clientId=u2a122f00-1508-4&amp;from=paste&amp;height=201&amp;id=u37034e05&amp;originHeight=586&amp;originWidth=1412&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=259242&amp;status=done&amp;style=none&amp;taskId=ud4a86482-cd05-495d-bb3e-f98b0e112d4&amp;title=&amp;width=485" alt="image.png" /></p><ol start="3"><li>后续指令从磁盘的第2个扇区开始读入四个扇区(扇区从1开始编号，也就是说读取首扇区后面的四个扇区，即<code>set-up</code>模块)到<code>0x90200</code>处，即首扇区之后</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679126644325-57f84ac1-d11d-44d9-baa6-c0843051e165.png#averageHue=%23ede9e7&amp;clientId=u2a122f00-1508-4&amp;from=paste&amp;height=363&amp;id=u5c0afe88&amp;originHeight=544&amp;originWidth=1149&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=230854&amp;status=done&amp;style=none&amp;taskId=u51b88390-0b76-4ad3-9f89-23c09e8cca2&amp;title=&amp;width=766" alt="image.png" /></p><ol start="4"><li>读入setup模块后，在屏幕上打印一段信息：<code>&quot;Loading system ...&quot;</code>，<code>es:bp</code>指向字符串的起始位置，<code>cx</code>存储要打印的字符数信息，然后读入<code>system</code>模块(也就是操作系统主体)，至此<code>bootsect</code>执行完毕，操作系统被从磁盘读入了内存，接着CPU开始执行<code>setup</code></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679120558491-c4909d6b-77ac-425f-aebc-be81c9afcd80.png#averageHue=%23f2edec&amp;clientId=u2a122f00-1508-4&amp;from=paste&amp;height=238&amp;id=ua2a73b24&amp;originHeight=637&amp;originWidth=1279&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=231308&amp;status=done&amp;style=none&amp;taskId=ud0cf570d-7ba1-467c-a01c-adf63b4b60c&amp;title=&amp;width=478" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679120569291-bed29b3c-7445-4c68-b354-b2402245bfea.png#averageHue=%23fbf8f6&amp;clientId=u2a122f00-1508-4&amp;from=paste&amp;height=151&amp;id=u150e7540&amp;originHeight=432&amp;originWidth=1414&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=189939&amp;status=done&amp;style=none&amp;taskId=uff397373-846f-449b-a8b1-8056594916f&amp;title=&amp;width=495" alt="image.png" /></p><h2 id="2-setup建立os"><a class="markdownIt-Anchor" href="#2-setup建立os"></a> 2) setup建立OS</h2><ol><li>操作系统要想掌控计算机就需要先知道计算机的基本信息 ，于是<code>setup</code>首先通过系统调用获取计算机内存大小（扩展内存：RAM中高于1MB的部分），并将这一信息放在地址<code>0x90002</code>处。接着<code>setup</code>将<code>system</code>模块移动到内存<code>0x0</code>处，该模块将一直占用从<code>0x0</code>开始的这段内存</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679126332156-4f769ffa-b741-4f97-840f-daf982cc60f5.png#averageHue=%23f1ecea&amp;clientId=u2a122f00-1508-4&amp;from=paste&amp;height=298&amp;id=u2ca93c28&amp;originHeight=584&amp;originWidth=1206&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=225342&amp;status=done&amp;style=none&amp;taskId=u5f178056-66dd-4d6e-8ba2-56c935e00bc&amp;title=&amp;width=616" alt="image.png" /></p><ol start="2"><li>接着CPU显然就该开始执行<code>system</code>模块了，<code>setup</code>通过<code>jmpi 0, 8</code>这条指令跳转到<code>system</code>模块，但是在这之前，<code>setup</code>要完成CPU从实模式到保护模式的切换，本质上就是将寻址模式由<code>segment:offset</code>16位寻址模式(<code>cs&lt;&lt;4 : ip</code>，寻址范围：1MB)，转变为这样一种32位寻址模式（寻址范围4GB）：CS不再是段寄存器，而是一个段选择子，表示的不再是段地址，而是表示一个在GDT（全局描述符表）中的表项的位置，每个表项是64位但能抽取出一个32位的段地址，将该地址与ip（此时变为32位ip，之前是16位）相加后，得到最终地址。<code>setup</code>完成这样的转换的方法是将<code>cr0</code>寄存器的最后一位置0。至此，<code>jmpi 0, 8</code>不再被解释为<code>jmp 0x80</code>而是解释为<code>jmp 0x0000</code>，于是CPU开始执行<code>0x0</code>地址开始的<code>system</code>模块 （注意下图的DPL，在后续讲用户态-内核态时会用到）</li></ol><p><strong>旁注:</strong></p><blockquote><p>CS 寄存器的值实际上是一个 16 位的段选择子，它指向了一个描述代码段的段描述符，该段描述符中包含了代码段的起始地址、大小、特权级别等信息。当 CPU 执行代码时，会根据 CS 寄存器中的段选择子和段描述符来确定代码段的位置和访问权限</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679127322157-93f3c567-2696-4e26-b4e2-e8d9d87ad5ee.png#averageHue=%23eee8e8&amp;clientId=u2a122f00-1508-4&amp;from=paste&amp;height=196&amp;id=u9b36171e&amp;originHeight=294&amp;originWidth=1089&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=84749&amp;status=done&amp;style=none&amp;taskId=ueaca35f1-598b-4d00-9817-60d024bb0f5&amp;title=&amp;width=726" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679132006277-905916cb-7ca1-4e61-8958-110a7cb84ee9.png#averageHue=%23f3edec&amp;clientId=u2a122f00-1508-4&amp;from=paste&amp;height=391&amp;id=uefd98192&amp;originHeight=622&amp;originWidth=1159&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=152057&amp;status=done&amp;style=none&amp;taskId=u489392c3-caf3-464a-b2b3-6124b6e217e&amp;title=&amp;width=728.6666870117188" alt="image.png" /></p><h2 id="3-head初始化os"><a class="markdownIt-Anchor" href="#3-head初始化os"></a> 3) head初始化OS</h2><ol><li>这里的初始化指的是OS为管理各种计算机硬件如内存而初始化多个数据结构，以掌控这些硬件信息，在步入<code>head</code>之前，我们应当思考一个问题，那就是操作系统内核是由许多文件组成的，内核编译后形成<code>image</code>，<code>image</code>就是一个<code>bootsect-setup-system</code>结构的二进制文件，叫做内核映像，把这个内核映像放在一个计算机磁盘的首扇区便可以如前文那样启动操作系统，那么内核编译是如何保证<code>bootsect.s</code>编译得到的<code>bootsect</code>置于<code>image</code>文件的首部呢，如何保证<code>bootsect-setup-system</code>这样的结构呢？而且<code>system</code>模块内也有很多可执行文件，其中位于第一部分的就是由<code>head.s</code>编译得到的<code>head</code>，如何保证<code>head</code>位于<code>system</code>的头部呢？     答案是利用<code>MakeFile</code>工具，这里简单叙述一下<code>MakeFile</code>：</li></ol><blockquote><p>MakeFile是一个用于自动化构建程序的工具。它是一个文本文件，其中包含了构建程序所需的指令和依赖关系，它可以使用依赖关系来控制编译的顺序。如果某个目标文件依赖于其他文件，那么在编译这个目标文件之前，需要先编译它所依赖的文件。可以使用依赖关系来控制编译的顺序。如果某个目标文件依赖于其他文件，那么在编译这个目标文件之前，需要先编译它所依赖的文件。</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679133549338-c6c82286-3a7a-4743-8041-74b3b2819d7e.png#averageHue=%23f1eeed&amp;clientId=u2a122f00-1508-4&amp;from=paste&amp;height=309&amp;id=ub2a411e4&amp;originHeight=545&amp;originWidth=1215&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=152995&amp;status=done&amp;style=none&amp;taskId=ue007c3dc-23cd-46fc-8de3-2a0be7a1bb0&amp;title=&amp;width=688" alt="image.png" /><br />因此通过利用<code>MakeFile</code>我们可以控制在编译结果中各部分的先后顺序</p><ol start="2"><li><code>head</code>完成一些初始化的操作，如初始化GDT（用于寻址，<code>setup</code>部分只是为了跳转到<code>system</code>而部分初始化了该表）, IDT（用于调用中断处理程序，只是创建一个空的 IDT 表，还未填入中断门等内容），页表。<code>head</code>部分与之前的<code>bootsect</code>和<code>setup</code>在汇编语言上也不同，由于CPU从实模式转换到保护模式，因此<code>head</code>由32位汇编语言构成，<code>ax</code>变为<code>eax</code>，汇编指令也从intel 8086格式转变为AT&amp;T格式</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679134037052-764e9ae6-2e27-49e5-9ff6-81d6e15ff0b0.png#averageHue=%23efeceb&amp;clientId=u2a122f00-1508-4&amp;from=paste&amp;height=348&amp;id=u5ded99e3&amp;originHeight=618&amp;originWidth=1196&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=215709&amp;status=done&amp;style=none&amp;taskId=u14eb7012-e69a-4d41-87c7-4a6e72f8fe6&amp;title=&amp;width=673.3333740234375" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679551407156-2aac6199-21f9-4f4e-8a0f-453d635a0d76.png#averageHue=%23faf7f4&amp;clientId=u43b1baba-c55a-4&amp;from=paste&amp;height=329&amp;id=ue4c833e3&amp;originHeight=561&amp;originWidth=1215&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=314552&amp;status=done&amp;style=none&amp;taskId=u6879e2d8-9f40-45e8-a686-576b2e8b6f4&amp;title=&amp;width=712.0000610351562" alt="image.png" /></p><ol start="3"><li><code>head</code>在设置完页表后会跳转到<code>main</code>，这个函数由<code>main.c</code>文件编译得到，跳转方式利用了函数调用的栈机制：<code>head</code>先压入<code>main</code>的地址，在执行<code>ret</code>后，栈中弹出该地址赋给<code>cs:ip</code>，CPU跳转到<code>main</code>开始执行。<code>head</code>在压入<code>main</code>之前压入了<code>L6</code>，这样做会导致从<code>main</code>返回后系统进入<code>L6：jmp L6</code>的死循环，计算机就会死机，因此<code>main</code>函数永远不会返回</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679134604110-6a3a5cee-65fe-4282-8f7b-490e51184179.png#averageHue=%23f1eded&amp;clientId=u2a122f00-1508-4&amp;from=paste&amp;height=340&amp;id=u13a2ab84&amp;originHeight=611&amp;originWidth=1115&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=155571&amp;status=done&amp;style=none&amp;taskId=u5fba1cea-6e40-45d0-8f02-fc5a29e8cb8&amp;title=&amp;width=620.3333740234375" alt="image.png" /></p><h2 id="4-main继续初始化os"><a class="markdownIt-Anchor" href="#4-main继续初始化os"></a> 4) main继续初始化OS</h2><p><code>main</code>继续完成初始化OS的操作（包括设置中断门填充IDT表：<code>trap_init</code>，<code>sched_init</code>），这里主要讲一下对内存的初始化，OS用数组管理内存，对每个字节，OS用<code>0</code>表示该字节空闲（内存位图BitMap），从<code>mem_init</code>部分的代码可以看出这里使用了之前<code>setup</code>初始化的计算机内存大小信息，并以一个页（4K）为单位初始化内存信息<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679551991276-19b46334-8a4f-4a1d-bb44-35f8f55b8bcb.png#averageHue=%23f9f7f5&amp;clientId=u43b1baba-c55a-4&amp;from=paste&amp;height=310&amp;id=uca2a31c9&amp;originHeight=419&amp;originWidth=1109&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=277599&amp;status=done&amp;style=none&amp;taskId=u983ca21e-5335-41e2-880f-7598c182449&amp;title=&amp;width=821.4815395130256" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679135412565-5aadf52a-dd1b-476a-95fd-c37492337bd6.png#averageHue=%23f2f0ef&amp;clientId=u2a122f00-1508-4&amp;from=paste&amp;height=288&amp;id=uc44e670a&amp;originHeight=618&amp;originWidth=1118&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=165100&amp;status=done&amp;style=none&amp;taskId=u6ff9840a-856d-4597-8735-cb2ff5d3729&amp;title=&amp;width=520.3333435058594" alt="image.png" /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679135480174-c07974a6-4a78-435b-baf2-84425aa096ce.png#averageHue=%23f3f1ef&amp;clientId=u2a122f00-1508-4&amp;from=paste&amp;height=288&amp;id=ua01a783d&amp;originHeight=648&amp;originWidth=1167&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=221637&amp;status=done&amp;style=none&amp;taskId=u7fa611ae-f441-40fa-a143-8a0010719bc&amp;title=&amp;width=518" alt="image.png" /></p><h1 id="2-彻底理解系统调用"><a class="markdownIt-Anchor" href="#2-彻底理解系统调用"></a> 2. 彻底理解系统调用</h1><h2 id="1os接口的本质是os提供的函数"><a class="markdownIt-Anchor" href="#1os接口的本质是os提供的函数"></a> 1）OS接口的本质是OS提供的函数</h2><p>无论用户是通过命令行还是图形界面来操作计算机，本质上都是在运行C语言程序，而这些C语言程序不同于普通的C语言程序的点在于它们调用了特殊的函数，即OS提供的函数，去完成特定的任务，如用<code>fork</code>函数创建一个进程，用<code>open</code>函数打开一个文件。因此这些C语言程序与OS打交道的方式就是这些函数调用，进而完成对计算机硬件的操作，所以我们可以得出OS提供给用户的接口就是这些特殊的函数，用户通过函数调用来使用它们。这里的函数调用有另外的术语，叫系统调用（system call）</p><blockquote><p>系统调用（System call）是操作系统内核提供给应用程序使用的一组编程接口，它们允许应用程序请求操作系统内核执行某些特权操作，例如读写文件、创建进程、网络通信等。应用程序可以通过系统调用与操作系统内核进行交互，从而获得操作系统提供的各种服务和资源。<br />系统调用通常是操作系统内核提供的一组函数或指令，应用程序可以通过调用这些函数或指令来请求操作系统内核执行某些操作。系统调用的实现通常是由操作系统内核提供的一组中断服务例程或系统调用门（System Call Gate）来完成的。当应用程序发起系统调用时，操作系统内核会根据系统调用号来确定要执行的操作，并在内核态下执行相应的操作，最后将结果返回给应用程序。</p></blockquote><h2 id="2dpl-cpl机制分离用户态和内核态"><a class="markdownIt-Anchor" href="#2dpl-cpl机制分离用户态和内核态"></a> 2）DPL-CPL机制分离用户态和内核态</h2><p>系统调用之所以不同于普通的函数调用，就在于它能执行其它函数所不能执行的操作，如访问在OS内核（地址<code>0x0</code>开始的那段内存）的数据，那为什么普通函数不能直接访问OS内核呢？这源自于OS内核所在的内存叫内核段（对应内核态），应用程序所在的内存叫用户段(对应用户态)。之前我们提到过的<code>GDT</code>，<code>head</code>阶段在初始化它时，会将所有内存段（代码段，数据段）的信息写入<code>GDT</code>，其中就包括内存段的<code>DPL(Descriptor Privilege Level)</code>信息，该信息表示各内存段的的优先级。对于OS内核所在的内存段，<code>DPL</code>是<code>0</code>，也就是最高优先级。对应用程序所在的内存段，<code>DPL</code>是<code>3</code>，也就是最低优先级。<br />讲到这里，我们已经知道了应用程序和OS内核所在的内存段的优先级不同（称前者在用户段，后者在内核段），且该信息由<code>DPL</code>记录并保存在<code>GDT</code>这一数据结构中。那么要实现这两个态的隔离，即用户段不能访问优先级高于它的内核段，要涉及<code>CPL</code>的概念：</p><blockquote><p>CPL 表示当前代码的运行特权级别。在执行代码时，CPL 将根据代码段描述符中的 DPL 来设置。如果 CPL 等于或高于代码段描述符中的 DPL，则允许代码执行。否则，就会发生“General Protection Fault”（GPF）异常，导致程序终止。</p></blockquote><p>也就是说，当CPU在执行应用程序时，CS:IP指向用户段的指令，CPU根据当前代码段的DPL设置<code>CPL</code>（CS的最后两位）为<code>3</code>。如果应用程序此时要访问OS内核，那么CPU会先比较CS中的<code>CPL</code>和描述OS内核优先级的<code>DPL</code>，如果<code>DPL&gt;=CPL</code>则说明目标代码段的优先级不如当前代码段的优先级高，可以直接访问，但是在这里<code>0&gt;=3</code>不成立，所以不可以直接访问。以上机制均是由计算机硬件实现。既然用户段不能访问内核段，但用户段又有这个需求，所以才有了系统调用，给了用户段间接访问内核段的途径<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679221010902-1b7781df-3c96-42a8-947a-0dff1b0eb3f4.png#averageHue=%23444858&amp;clientId=u1b499f07-28c8-4&amp;from=paste&amp;height=437&amp;id=ud9e594d4&amp;originHeight=656&amp;originWidth=996&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=true&amp;size=244781&amp;status=done&amp;style=none&amp;taskId=u26a1c6f6-6e63-4f78-8551-246f6cbfb87&amp;title=GDT%E8%A1%A8%E9%A1%B9%E7%9A%84%E5%86%85%E5%AE%B9&amp;width=664" alt="GDT表项的内容" title="GDT表项的内容" /></p><h2 id="3进入内核-int-0x80-中断"><a class="markdownIt-Anchor" href="#3进入内核-int-0x80-中断"></a> 3）进入内核: int 0x80 中断</h2><p>在用户程序中使用的系统调用，如<code>fork</code>，<code>open</code>等函数，本质上是一段含有中断的代码，这个中断指的就是<code>int 0x80</code>中断指令，执行这条指令能够让CPU从用户态转换到内核态。现在用一个例子来更详细的说明：<br />我现在编写了一个C程序并在里面调用了<code>open</code>函数，CPU执行<code>open</code>函数内部的<code>int 0x80</code>指令就会引发<code>0x80</code>号中断，然后OS就会根据中断向量号<code>0x80</code>查找中断向量表进而执行相应的中断处理程序。<code>0x80</code>号中断对应的中断处理程序是专门用于处理系统调用的，这个程序完成这样一件事情：根据传入的<code>open</code>这个系统调用的系统调用号（在<code>%eax</code>中）查找相应的系统调用处理函数，并转去执行该函数完成打开文件操作，并将结果返回给用户程序。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679468843452-710cb013-bceb-44fe-9b95-27d603570080.png#averageHue=%23434858&amp;clientId=u2bef739a-2438-4&amp;from=paste&amp;height=409&amp;id=uc291fdaa&amp;originHeight=613&amp;originWidth=917&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=253711&amp;status=done&amp;style=none&amp;taskId=udfd4ebcf-ba94-4348-889d-44fcd89cb19&amp;title=&amp;width=611.3333333333334" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679470038018-6d8d4fed-7666-43f7-ba47-691cb96def7b.png#averageHue=%23444959&amp;clientId=u2bef739a-2438-4&amp;from=paste&amp;height=405&amp;id=ue89acc65&amp;originHeight=608&amp;originWidth=966&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=255329&amp;status=done&amp;style=none&amp;taskId=uc4ea5d70-0948-4938-84b1-9012e3f6081&amp;title=&amp;width=644" alt="image.png" /><br />可见，一个系统调用完成的特定操作本质上是OS内核中的对应的系统调用处理函数完成的。它之所以是一个面向用户的接口，就在于虽然用户不能像普通函数调用那样直接调用它，但用户可以通过<code>int 0x80</code>对应的中断例程和传递系统调用号给<code>0x80</code>号中断例程（已经打包在系统库里的接口函数中，因此我们只用直接调用<code>open</code>函数即可，而不用编写包含<code>int 0x80</code>指令并传递系统调用号参数的程序）进而在该中断例程中完成对系统调用处理函数的调用<br /><strong>旁注: 系统调用号</strong></p><blockquote><p>系统调用号（System Call Number）是一个与特定系统调用相关联的唯一整数，用于在用户程序和操作系统内核之间标识和调用特定的系统调用。每个系统调用都有一个与之对应的系统调用号。当用户程序需要请求操作系统的服务时，它会通过将系统调用号传递给内核来指明需要执行哪个系统调用。<br />以下是系统调用号的一些基本概念：</p><ol><li>分配：操作系统为每个可用的系统调用分配一个唯一的系统调用号。这些号码通常是连续的整数，从0开始。</li><li>查找：当用户程序需要调用某个系统调用时，它需要知道相应的系统调用号。这些号码可以在操作系统的文档或头文件（例如，对于Linux系统，可以查看unistd.h）中找到。</li><li>使用：用户程序通过将系统调用号和其他必要的参数传递给内核来发起系统调用。这通常通过使用特殊的指令（如x86架构上的int指令）触发软件中断来实现。</li><li>内核处理：内核收到系统调用请求后，会根据系统调用号查找相应的处理函数并执行。处理函数完成请求后，将结果返回给用户程序。</li></ol></blockquote><p>系统调用号充当了用户程序和操作系统内核之间的接口，使得用户程序能够以一种可靠且一致的方式请求操作系统的服务。</p><p><strong>旁注：软中断与硬中断</strong></p><blockquote><p>内中断和外中断是计算机系统中两种不同类型的中断。它们的主要区别在于中断的来源和触发方式。</p><ol><li>内中断（内部中断）： 内中断是由处理器内部的事件或程序执行过程中出现的异常触发的。它们通常与正在执行的指令或处理器的状态有关。内中断的常见类型包括：</li></ol><ul><li>软件中断：由特定的指令（如x86架构上的int指令）在程序中显式触发的中断。<strong>软件中断通常用于实现系统调用，让用户程序能够请求操作系统的服务。</strong></li><li>陷阱（Trap）：在执行某些特定指令时自动触发的中断。陷阱用于处理特殊情况，如整数除以零、浮点数溢出或无效指令等。</li><li>断点（Breakpoint）：用于调试程序的一种中断。当程序执行到某个预先设置的断点时，处理器会触发一个中断，允许调试器检查程序的状态。</li></ul><ol start="2"><li>外中断（外部中断）： 外中断是由处理器外部的硬件设备发出的信号触发的。它们通常与外部事件或设备的状态变化有关。当一个硬件设备需要处理器的注意时（例如，读取数据、处理错误或通知状态改变），它会发送一个中断请求（IRQ）信号给处理器。处理器会在适当的时机响应这个中断请求，暂停当前的任务并执行相应的中断处理程序。外中断的常见类型包括：</li></ol><ul><li>I/O设备中断：由外部输入/输出设备触发，如键盘、鼠标、硬盘等。</li><li>计时器中断：由系统计时器触发，用于实现多任务调度、时间管理等功能。</li><li>电源管理中断：由电源管理系统触发，用于处理电源相关事件，如电池电量低或休眠唤醒等。</li></ul></blockquote><p>总之，内中断与外中断的主要区别在于它们的来源：内中断由处理器内部的事件或异常触发，而外中断由外部硬件设备发出的信号触发。不过，无论是内中断还是外中断，处理器在接收到中断信号后都会执行相应的中断处理程序，以处理中断事件。</p><p><strong>旁注：中断类型码与中断向量号</strong></p><blockquote><ol><li>中断类型码：中断类型码是一种用于区分不同类型的中断和异常的编码。在x86架构中，常见的中断类型码有如下几种：<ul><li>外部中断（硬件中断）：由外部设备（如键盘、鼠标、定时器等）产生的中断。</li><li>软件中断：由程序主动触发的中断，例如通过int指令（在x86架构中）。</li><li>异常：由处理器在执行指令时检测到的错误或异常条件引发的中断，如除以零、非法操作码、内存访问越界等。</li></ul></li><li>中断向量号：中断向量号是一个唯一标识中断源的整数，用于在中断向量表（实模式下）或中断描述符表（保护模式下）中索引到对应的中断处理程序。中断向量号通常与中断类型码相关联，例如在x86架构中，一个设备的外部中断请求（IRQ）可能会被映射到一个特定的中断向量号。</li><li>中断号：中断号通常是指中断向量号，它是一个整数，用于唯一标识中断源。在实际应用中，中断号和中断向量号这两个术语通常可以互换使用。</li></ol></blockquote><p>总之，中断类型码用于区分中断的类型（硬件中断、软件中断或异常），而中断向量号（中断号）则用于在中断处理表中唯一标识和索引到对应的中断处理程序。</p><h2 id="4从printf函数出发到int-0x80"><a class="markdownIt-Anchor" href="#4从printf函数出发到int-0x80"></a> 4）从printf函数出发到int 0x80</h2><h3 id="1-迈向int-0x80printf函数内部"><a class="markdownIt-Anchor" href="#1-迈向int-0x80printf函数内部"></a> 1. 迈向int 0x80：printf函数内部</h3><p>首先，我们查看<code>printf</code>的内部。以下是一个基于GNU C库的<code>printf</code>函数的简化实现，以展示其内部机制：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    va_list args<span class="token punctuation">;</span>    <span class="token keyword">int</span> done<span class="token punctuation">;</span>    <span class="token function">va_start</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> format<span class="token punctuation">)</span><span class="token punctuation">;</span>    done <span class="token operator">=</span> <span class="token function">vfprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> format<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">va_end</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> done<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">vfprintf</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> va_list ap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> written <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//调用vsnprintf将可变参数转化为字符数组格式</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">vsnprintf</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">,</span> format<span class="token punctuation">,</span> ap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//将字符数组写入标准输出流</span>    written <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>written <span class="token operator">!=</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> written<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>printf</code>函数本身只是将可变参数封装到<code>vfprintf</code>函数中，并将标准输出流<code>stdout</code>作为参数传递给<code>vfprintf</code>。<code>vfprintf</code>函数负责将可变参数格式化为一个字符数组，并将该字符数组写入标准输出流。在该函数中，我们看到它调用了<code>vsnprintf</code>函数来将可变参数格式化为字符数组，并使用<code>write</code>系统调用将该字符数组写入标准输出流中。<br />在<code>vfprintf</code>函数中，<code>vsnprintf</code>函数将可变参数转换为字符数组格式，并将其存储在<code>buffer</code>数组中。然后，<code>write</code>系统调用将该字符数组写入标准输出流中，使用文件描述符为<code>STDOUT_FILENO</code>（等同于标准输出流）。当<code>write</code>系统调用返回时，它返回写入的字节数。</p><h3 id="2-迈向int-0x80write函数内部"><a class="markdownIt-Anchor" href="#2-迈向int-0x80write函数内部"></a> 2. 迈向int 0x80：write函数内部</h3><p>那么<code>write</code>系统调用背后又是什么样呢？让我们来查看<code>write</code>函数的内部</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__LIBRARY__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token function">_syscall3</span><span class="token punctuation">(</span><span class="token class-name">ssize_t</span><span class="token punctuation">,</span> write<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在理解了宏函数<code>_syscall3</code>之后可以看出，这里的<code>_syscall3</code>宏展开之后便是一个返回值为<code>int</code>的<code>write</code>函数</p><h3 id="3-迈向int-0x80_syscall3宏函数"><a class="markdownIt-Anchor" href="#3-迈向int-0x80_syscall3宏函数"></a> 3. 迈向int 0x80：_syscall3宏函数</h3><p>一步一步来，接着我们查看<code>_syscall3</code>宏函数的定义</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">_syscall3</span><span class="token expression"><span class="token punctuation">(</span>type<span class="token punctuation">,</span>name<span class="token punctuation">,</span>type1<span class="token punctuation">,</span>arg1<span class="token punctuation">,</span>type2<span class="token punctuation">,</span>arg2<span class="token punctuation">,</span>type3<span class="token punctuation">,</span>arg3<span class="token punctuation">)</span> </span></span>type <span class="token function">name</span><span class="token punctuation">(</span>type1 arg1<span class="token punctuation">,</span>type2 arg2<span class="token punctuation">,</span>type3 arg3<span class="token punctuation">)</span> \<span class="token punctuation">&#123;</span> \<span class="token keyword">long</span> __res<span class="token punctuation">;</span> \__asm__ <span class="token keyword">volatile</span> <span class="token punctuation">(</span> \<span class="token string">"int $0x80"</span> \<span class="token operator">:</span> <span class="token string">"=a"</span> <span class="token punctuation">(</span>__res<span class="token punctuation">)</span> \<span class="token operator">:</span> <span class="token string">"0"</span> <span class="token punctuation">(</span>__NR_##name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"b"</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"c"</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \<span class="token string">"d"</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>arg3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \<span class="token function">__syscall_return</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span>__res<span class="token punctuation">)</span><span class="token punctuation">;</span> \<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们逐行的解析<code>_syscall3</code>宏函数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">_syscall3</span><span class="token expression"><span class="token punctuation">(</span>type<span class="token punctuation">,</span>name<span class="token punctuation">,</span>type1<span class="token punctuation">,</span>arg1<span class="token punctuation">,</span>type2<span class="token punctuation">,</span>arg2<span class="token punctuation">,</span>type3<span class="token punctuation">,</span>arg3<span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>预处理器指令<code> #define</code>将宏<code>_syscall3</code> 定义为一个具有八个参数的宏函数，即将<code>_syscall3</code>映射为后续的代码块。如果程序中出现该宏定义（write函数内部），那么将在编译预处理阶段被替换为后续的代码块。<br />其中，各参数的含义如下：</p><ul><li>type：定义系统调用的返回值类型，如 int、long 等。</li><li>name：定义系统调用的名称，如 open、read 等。</li><li>type1、type2、type3：定义系统调用的参数类型。</li><li>arg1、arg2、arg3：定义系统调用的参数名称。</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">type <span class="token function">name</span><span class="token punctuation">(</span>type1 arg1<span class="token punctuation">,</span>type2 arg2<span class="token punctuation">,</span>type3 arg3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是 <code>_syscall3</code> 宏定义中的第二行，它定义了一个函数，该函数的名称为 <code>name</code>，它有三个参数 <code>arg1</code>、<code>arg2</code> 和 <code>arg3</code>，它的返回值类型为 <code>type</code>。这个函数是系统调用的入口点，它将通过汇编指令触发系统调用，并返回系统调用的结果。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">&#123;</span> \    <span class="token keyword">long</span> __res<span class="token punctuation">;</span> \    __asm__ <span class="token keyword">volatile</span> <span class="token punctuation">(</span> \        <span class="token string">"int $0x80"</span> \        <span class="token operator">:</span> <span class="token string">"=a"</span> <span class="token punctuation">(</span>__res<span class="token punctuation">)</span> \        <span class="token operator">:</span> <span class="token string">"0"</span> <span class="token punctuation">(</span>__NR_##name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"b"</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"c"</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \          <span class="token string">"d"</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>arg3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \    <span class="token function">__syscall_return</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span>__res<span class="token punctuation">)</span><span class="token punctuation">;</span> \<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是 <code>_syscall3 </code>宏定义中的其它部分，它是 <code>name</code> 函数的函数体，其中使用了嵌入式汇编语言。宏函数的传入参数要用括号括起来，保证宏展开后运算的正确性。<br />函数体中的第一行定义了一个 <code>long</code> 类型的变量 <code>__res</code>，用于存储系统调用的返回值。变量名前面的双下划线是为了避免与用户定义的变量名冲突。<br />第二行使用了 <code>asm</code> 关键字定义了一个内联汇编代码块，它使用了 <code>volatile</code> 关键字，告诉编译器不要对代码进行优化。在汇编代码中，使用了 <code>int $0x80</code> 指令触发系统调用，接着的两个冒号是给<code>int $0x80</code>传参，其中的<code>_NR_##name</code> 是一个宏，<code>## </code>运算符是一种预处理器运算符，它用于将两个标识符连接成一个新的标识符。在这里，它将<code>_NR</code> 和 <code>name</code> 连接起来，得到宏<code>_NR_write</code>,这个宏定义在<code>&lt;unistd.h&gt;</code>的开头），它将 <code>name</code> 参数转换为系统调用的编号（即数字4，这就是系统调用号）并赋给寄存器<code>%eax</code>。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679487069403-60f650c5-c34b-448c-8924-46fc7958be51.png#averageHue=%23faf8f7&amp;clientId=u3929866d-899a-4&amp;from=paste&amp;height=215&amp;id=ua30ec017&amp;originHeight=323&amp;originWidth=1198&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=106235&amp;status=done&amp;style=none&amp;taskId=uc9c4062b-f345-48f1-b1c7-c614b3b4e1f&amp;title=&amp;width=798.6666666666666" alt="image.png" /><br />在 <code>_syscall3</code> 宏定义中，asm 内联汇编语言块中使用了冒号（:）运算符来指定输入操作数（Input Operand）和输出操作数（Output Operand），操作数的格式为 <code>&quot;constraint&quot; (C expression)</code>。<br />其中，<code>constraint</code> 是操作数的约束符，用于指定操作数应该存放在哪个寄存器或内存位置，<code>C expression</code> 是操作数的 C 语言表达式，用于指定操作数的值。<br />在这里，<code>&quot;=a&quot;</code>、<code>&quot;0&quot;</code>、<code>&quot;b&quot;</code>、<code>&quot;c&quot;</code> 和 <code>&quot;d&quot;</code> 都是操作数的约束符，它们的含义如下：</p><ul><li>“=a”：表示将返回值存放在寄存器 eax 中。</li><li>“0”：表示将系统调用号存放在寄存器 eax 中。</li><li>“b”：表示将第一个参数的值存放在寄存器 ebx 中。</li><li>“c”：表示将第二个参数的值存放在寄存器 ecx 中。</li><li>“d”：表示将第三个参数的值存放在寄存器 edx 中。</li></ul><p><code>int 0x80 </code>指令执行时，会将 <code>eax</code> 寄存器中的值作为系统调用号，<code>ebx</code>、<code>ecx</code>、<code>edx</code> 寄存器中的值分别作为系统调用的第一个、第二、第三个参数。因此，要向<code> int 0x80</code> 指令传递参数，可以将参数存储在寄存器中，然后通过 asm 内联汇编语言块传递给 <code>int 0x80</code> 指令。<br />这些约束符在汇编代码中对应的位置使用了百分号（%）符号进行引用，如 %0 表示第一个操作数，%1 表示第二个操作数，以此类推。在这个例子中，“%0”、“%1”、“%2”、“%3”、“%4” 分别对应返回值、系统调用号、第一个参数、第二个参数和第三个参数。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679488229396-b6175c54-e52d-4b78-aa7d-977fad2c6c6e.png#averageHue=%23f0edec&amp;clientId=u3929866d-899a-4&amp;from=paste&amp;height=246&amp;id=u1cd0bef9&amp;originHeight=369&amp;originWidth=1165&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=99171&amp;status=done&amp;style=none&amp;taskId=uf4c8cd53-feb1-42b1-82d5-2260308f48c&amp;title=&amp;width=776.6666666666666" alt="image.png" /></p><h3 id="4-步入int-0x80中断门"><a class="markdownIt-Anchor" href="#4-步入int-0x80中断门"></a> 4. 步入int 0x80：中断门</h3><p>中断门(gate)是IDT表的一个表项的内容，代表了一个中断处理程序的段选择子和偏移地址（即中断入口地址），它包含以下信息：</p><blockquote><ul><li>中断服务程序的段选择器</li><li>中断服务程序的偏移地址</li><li>一些标志位，如特权级（DPL）和类型（如任务门、中断门、陷阱门等）</li></ul></blockquote><p>当发生中断或异常时，处理器会根据中断向量号在中断描述符表（IDT）中查找相应的中断门，然后跳转到关联的处理程序进行处理。<br />这个IDT表很像我在学习实模式汇编时遇到的中断向量表，这两个表有如下关系，因为操作系统在引导阶段就以及步入了保护模式，因此我们用到的都是IDT表（实模式是早期计算机中的一种工作模式，现已逐渐淘汰）</p><blockquote><ol><li>中断向量表：中断向量表是实模式下（16位）用于存储中断处理程序入口地址的表。它通常位于内存的低地址（例如0x0000）。在实模式下，每个中断向量占用4个字节，前两个字节是段地址，后两个字节是偏移地址。中断向量表的大小是固定的，共有256个向量，因此占用1KB（1024字节）的内存空间。</li><li>IDT表：IDT表（中断描述符表）是保护模式下（32位或64位）用于存储中断门和异常门描述符的表。IDT表的每个条目包含了处理程序的段选择子、入口地址、特权级和类型等信息。与实模式下的中断向量表不同，IDT表的大小是可变的，可以根据需要设置表的大小和地址。</li></ol></blockquote><p>因此要执行<code>int 0x80</code>的中断处理程序，首先就要得到它的中断门。我们在引导过程的时候已经提到过，IDT表在<code>head</code>阶段初始化，在<code>main</code>阶段填充正确的值。下面展示了OS到底是如何初始化0x80号中断的中断门：</p><ol><li><code>main</code>阶段调用<code>kernel/sched.c</code>中的<code>sched_init</code>函数，该函数内调用了<code>set_system_gate(0x80, &amp;system_call)</code>，<code>&amp;system_call</code>代表了中断处理程序地址</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679552146969-edffa521-9500-4b57-8da4-e79579dbeec6.png#averageHue=%23fbf9f8&amp;clientId=u43b1baba-c55a-4&amp;from=paste&amp;height=224&amp;id=u583000da&amp;originHeight=302&amp;originWidth=1311&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=121390&amp;status=done&amp;style=none&amp;taskId=u88129a24-124a-4692-87df-d4db1b9f7c0&amp;title=&amp;width=971.1111797128734" alt="image.png" /></p><ol start="2"><li><code>set_system_gate</code>是<code>include/asm/system.h</code>文件中的一个宏函数，用于设置系统调用（0x80号中断）的中断门。从这个宏函数的定义可以看出，它又调用了<code>_set_gate</code>函数</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679552398266-bd5cc8c9-8eb9-4282-b2ca-bc0d5441a746.png#averageHue=%23fcfaf9&amp;clientId=u43b1baba-c55a-4&amp;from=paste&amp;height=98&amp;id=u322dd8a2&amp;originHeight=132&amp;originWidth=1091&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=47815&amp;status=done&amp;style=none&amp;taskId=ub6e1924d-d5f7-4cef-9358-b4bd8585230&amp;title=&amp;width=808.1482052377917" alt="image.png" /></p><ol start="3"><li><code>_set_gate</code>也是<code>include/asm/system.h</code>文件中的一个宏函数，它用于设置各种门描述符，包括系统调用中断门。<code>_set_gate</code> 接受四个参数：<code>gate_addr</code>（中断门描述符在 IDT 表中的地址）、<code>type</code>（门类型）、<code>dpl</code>（特权级）和 <code>addr</code>（中断处理程序的地址，这里是<code>&amp;system_call</code>），并根据这些参数设置门描述符。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679553434629-27e0ab97-c43b-47ed-90b0-c86340d41313.png#averageHue=%23f9f7f5&amp;clientId=u43b1baba-c55a-4&amp;from=paste&amp;height=268&amp;id=ue04b48bb&amp;originHeight=636&amp;originWidth=1517&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=386685&amp;status=done&amp;style=none&amp;taskId=u9f8d768d-2f0c-40d4-86c3-4f63c2555f0&amp;title=&amp;width=639.6944580078125" alt="image.png" /><br /><code>_set_gate</code>看起来挺复杂，其实就做了这样几件事：在IDT表项中填入了中断处理程序<code>system_call</code>的入口地址，设置段选择子为8（CS，对应段地址 0)，DPL为3。<br /><strong>旁注：OS中，什么是描述符</strong></p><blockquote><p>在操作系统中，描述符是一种数据结构，它提供了关于内存段或系统资源（如文件、设备等）的元数据。在x86架构的保护模式下，描述符的主要作用是对内存段进行描述，以支持内存保护和虚拟内存管理。描述符通常存储在描述符表（例如，全局描述符表 GDT 或局部描述符表 LDT）中。<br />描述符中包含的信息有：</p><ol><li>基地址：内存段的起始地址。</li><li>段限长：内存段的大小，通常以字节数表示。</li><li>访问权限：段的读/写/执行权限。</li><li>特权级：指定内存段的特权级别（0-3）。在x86架构中，有4个特权级，其中0级为最高特权级，3级为最低特权级。</li><li>段类型：段的类型，例如数据段、代码段等。</li><li>存在标志：表示描述符是否有效。</li></ol></blockquote><p>描述符在操作系统中扮演着关键角色，主要用于内存管理、进程隔离以及处理程序调用（例如，系统调用、中断和异常处理）。描述符提供了一种抽象层，使得操作系统能够对内存和其他系统资源进行更精细的控制。</p><blockquote><p>在理解描述符时，我们可以将其看作是一组存储了某个对象或资源的信息的数据结构，例如内存段描述符存储了一个内存段的起始地址、大小、访问权限、特权级等信息。这些信息可以被操作系统或处理器用于执行相应的操作，例如访问内存、执行代码等。<br />然而，描述符并不是指针。描述符存储的信息是直接编码在描述符的字段中，而不是存储在某个内存位置上并使用指针进行访问。在x86架构中，段描述符和门描述符的格式和编码规则是由处理器规定的，不同类型的描述符具有不同的字段和编码方式。<br />当处理器需要使用某个描述符时，它会从描述符表（GDT或LDT）中读取相应的描述符，然后使用其中的信息执行相应的操作。例如，当需要访问一个内存段时，处理器会从GDT或LDT中读取该内存段的描述符，并使用其中的信息计算出内存段的物理地址，然后进行访问。<br />因此，描述符是一种用于存储某个对象或资源的信息的数据结构，与指针不同，它不是用于访问内存位置的工具，而是用于提供某个对象或资源的信息的编码方式。</p></blockquote><p><strong>旁注：什么是门描述符</strong></p><blockquote><p>在x86架构中，IDT（中断描述符表）的每个表项占用64位。表项的结构称为门描述符。门描述符定义了一个中断或异常处理程序的入口点、特权级别以及其他相关信息。根据处理程序的类型和特权级别，门描述符可以表示中断门、陷阱门或任务门。<br />门描述符的结构如下：<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679554143876-38962acf-05ae-42a3-822e-475bdac0b05a.png#averageHue=%23dfdbdb&amp;clientId=u43b1baba-c55a-4&amp;from=paste&amp;height=125&amp;id=aWfTG&amp;originHeight=169&amp;originWidth=1002&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=30026&amp;status=done&amp;style=none&amp;taskId=u845c6b27-1f83-443e-b398-d75e24a6e8a&amp;title=&amp;width=742.2222746546904" alt="image.png" /><br />总之，IDT表项是64位，包含了门描述符的信息。门描述符定义了中断或异常处理程序的入口点和相关属性。中断门是门描述符的一种类型，用于处理硬件和软件中断。</p></blockquote><h3 id="5-步入int-0x80从用户态到内核态"><a class="markdownIt-Anchor" href="#5-步入int-0x80从用户态到内核态"></a> 5. 步入int 0x80：从用户态到内核态</h3><p>上一步我们说了<code>0x80</code>号中断门的设置过程，最后该中断门(描述符)的<code>DPL</code>字段被设置为<code>3</code>。操作系统在用户程序中执行<code>int 0x80</code>试图跳转到内核的中断程序程序时，CPU检查此时的<code>CPL</code>为<code>3</code>，目标代码段的<code>DPL</code>也为<code>3</code>，此时满足<code>DPL&gt;=CPL</code>，因此可以从用户段跳转到内核段。接着，根据中断门中的段选择子设置CS，偏移地址设置IP。注意，因为段选择子是<code>8(1000)</code>,因此CS的最后两位被设置为0，即<code>CPL</code>又被设置为0，符合系统初始化时为OS内核段设置的优先级。由此可见之所以专门将<code>0x80</code>号中断用于系统调用，就在于其中断处理程序描述符的<code>DPL</code>为3，因此提供给用户一个契机进入内核，并在进入内核后，将<code>CPL</code>修改为0</p><h3 id="6-int-0x80中断处理程序system_call"><a class="markdownIt-Anchor" href="#6-int-0x80中断处理程序system_call"></a> 6. int 0x80中断处理程序：system_call</h3><p>最后一步，CPU开始执行中断处理程序<code>system_call</code>，该函数先通过一个函数表（函数指针表）<code>_sys_call_table</code>调用处理函数<code>sys_write</code>完成写入的操作（这个才是整个系统调用过程中真正实现功能的部分，涉及内存）。这里的<code>_sys_call_table(,%eax,4)</code>中的<code>%eax</code>是中断向量号，加上4倍偏移是因为在函数表<code>_sys_call_table</code>中每个函数的地址（函数指针）占4个字节。<br />至此，我们基本完成了printf函数的系统调用过程<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679558827865-b9dd4fd4-4a91-4076-89b6-4e0f9ae95355.png#averageHue=%23f2ece7&amp;clientId=u43b1baba-c55a-4&amp;from=paste&amp;height=314&amp;id=uc64f702e&amp;originHeight=630&amp;originWidth=1146&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=183034&amp;status=done&amp;style=none&amp;taskId=u0c162759-ffa2-40a6-b2b1-47a12a93d05&amp;title=&amp;width=570.8726806640625" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679570252044-f62bf38c-4016-4d5e-9397-0a03b5df4a4f.png#averageHue=%23fdfcfb&amp;clientId=u948c0a44-ca19-4&amp;from=paste&amp;height=233&amp;id=u79f63bdd&amp;originHeight=349&amp;originWidth=1125&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=151123&amp;status=done&amp;style=none&amp;taskId=udf423c49-6be9-444b-b019-0be4214e35f&amp;title=&amp;width=751.3333740234375" alt="image.png" /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679559067639-19cf207b-bd4f-487e-8659-33c5fd754544.png#averageHue=%23f3edec&amp;clientId=u43b1baba-c55a-4&amp;from=paste&amp;height=376&amp;id=udc6773b2&amp;originHeight=642&amp;originWidth=1203&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=174613&amp;status=done&amp;style=none&amp;taskId=u9ae05408-ba56-4434-be2b-ed9a66744bc&amp;title=&amp;width=705.1111450195312" alt="image.png" /></p><h1 id="3-多进程与多线程"><a class="markdownIt-Anchor" href="#3-多进程与多线程"></a> 3. 多进程与多线程</h1><p>本章主要先讲述线程，因为线程不涉及内存的切换，通过线程切换将执行序列的切换（主要是栈）讲清楚之后，再通过在linux0.11环境下执行fork中断的实际例子看进程的切换</p><h2 id="1多进程是为了充分利用cpu"><a class="markdownIt-Anchor" href="#1多进程是为了充分利用cpu"></a> 1）多进程是为了充分利用CPU</h2><p>给CPU设置一个PC值，它便可以执行程序，如果CPU在执行程序中途遇到<code>I/O</code>操作，那么它在<code>I/O</code>结束之前将无法继续执行下一步指令。因此出于管理好CPU就是充分利用CPU的准则，CPU应当离开当前进程，转而去执行其它进程，在<code>I/O</code>结束后（且CPU空闲）时再返回继续执行该进程<br />这一过程涉及了多进程，计算机中有多个进程在跑，即并发（同时出发，交替执行）。为了完成进程间的切换，OS应当记录进程切换时的状态以便在返回时可以正确的继续执行，这些进程的状态记录在进程的PCB（一个结构体）中。进程区别于程序最大的一点就在于OS需要记录进程的状态，而对程序不需要</p><h2 id="2os用-pcb队列状态-管理多进程"><a class="markdownIt-Anchor" href="#2os用-pcb队列状态-管理多进程"></a> 2）OS用 PCB+队列+状态 管理多进程</h2><p>PCB记录单个进程的信息，OS将多个进程的PCB根据进程状态组织成队列，如就绪队列，等待队列，以及正在执行的单个进程<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679318677105-9f11c863-af95-4006-968f-a83972fffb15.png#averageHue=%23eeebea&amp;clientId=u2be75f57-4115-4&amp;from=paste&amp;height=346&amp;id=ub3ee99c0&amp;originHeight=602&amp;originWidth=975&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=101744&amp;status=done&amp;style=none&amp;taskId=uba641293-1094-4d44-896b-47262395d06&amp;title=&amp;width=560" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679318786872-c664df8b-b609-4a7d-b41e-7e297210bf27.png#averageHue=%23f5f4f4&amp;clientId=u2be75f57-4115-4&amp;from=paste&amp;height=287&amp;id=ucbd42016&amp;originHeight=431&amp;originWidth=851&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=77247&amp;status=done&amp;style=none&amp;taskId=u838b9892-e4e7-454c-9c5f-969daeb1a8a&amp;title=&amp;width=567.3333333333334" alt="image.png" /></p><h2 id="3多进程的要素调度算法切换过程内存隔离合理的推进顺序"><a class="markdownIt-Anchor" href="#3多进程的要素调度算法切换过程内存隔离合理的推进顺序"></a> 3）多进程的要素：调度算法，切换过程，内存隔离，合理的推进顺序</h2><p>①调度算法用于CPU交替执行进程时选择下一个进程 ②进程的切换，要从进程A切换到进程B，那么先保存当前CPU中的各个值到进程A的PCB中，再将进程B的PCB各值载入CPU ③如果各进程间的内存不独立，那么一个进程运行时就可能修改另一个进程的数据，造成错误，因此各进程要使用不同的映射表以将同一逻辑地址映射到不同的物理地址，形成内存隔离 ④ 进程的合作，典型的就是消费者-生产者的例子，要保证合作正确，要求进程间有着合理的推进顺序<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679369608388-029c4f74-8598-4a6d-b80e-58be5c44d951.png#averageHue=%23f9f3f3&amp;clientId=u65b4c6eb-4a7f-4&amp;from=paste&amp;height=356&amp;id=u70ff782b&amp;originHeight=627&amp;originWidth=997&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=118522&amp;status=done&amp;style=none&amp;taskId=uca149de8-494b-46af-ad83-70e7458602c&amp;title=&amp;width=565.6666870117188" alt="image.png" /></p><h2 id="4多线程提高了进程的执行速度和响应度"><a class="markdownIt-Anchor" href="#4多线程提高了进程的执行速度和响应度"></a> 4）多线程提高了进程的执行速度和响应度</h2><p>进程由指令序列和资源（如内存，网络连接等）组成，线程就是一个进程中的一部分执行序列。因为一个进程中的多个线程间共享资源，因此在线程间切换时仅涉及指令序列的切换（对用户级线程，就像函数调用），进而较之进程间的切换，线程间的切换速度更高。多线程能够提高进程的执行速度，当进程的一个线程 (内核级线程) 先入<code>I/O</code>操作时，可以切换到另一个线程继续利用CPU，同时，多线程 (内核级线程) 还可以利用多核CPU（多个处理器，同一内存映射）的优势，使得多个线程可以在不同的CPU核上并行执行，从而进一步提高系统的并发度和效率。多线程还能提高进程的响应度，比如网页的加载，加载文字的进程执行好了就切换到显示进程，而不是等文字图片视频全部加载好了再执行显示进程。过多的线程会导致线程切换的开销增大，从而降低系统的效率，因此线程的数量也是一个trade-off 问题</p><h2 id="52个用户级线程2个栈2个tcb"><a class="markdownIt-Anchor" href="#52个用户级线程2个栈2个tcb"></a> 5）2个用户级线程：2个栈，2个TCB</h2><p>用户级线程（ULT）对OS不可见，因此不可访问硬件资源，也不能利用多核CPU（为线程分配处理器硬件，需要线程进入OS内核）<br />两个栈：对2个用户级线程，如果共用一个栈，那么将可能导致函数返回时CPU转去执行另一个线程，而不是通过我们的<code>Yield</code>函数，这会造成意料之外的错误。为每个线程分配一个栈（栈顶信息保存在TCB中），那么在一个线程中由函数调用导致的地址返回将不会跳出本线程。<br /><code>Yield</code>函数：该函数要实现线程间的切换，直观的可能认为该函数内部应该有<code>jmp</code>指令实现跳转，但实际上该函数并不存在该指令，而是通过函数返回机制实现跳转，当<code>Yield</code>函数结束时，栈中弹出的返回地址就已经是进程2的了，<code>CS:IP</code>被赋值为该地址，由此CPU转到进程2执行，因此该函数内部仅有两个线程栈的切换</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    TCB1<span class="token punctuation">.</span>esp <span class="token operator">=</span> CPU<span class="token punctuation">.</span>esp<span class="token punctuation">;</span>    CPU<span class="token punctuation">.</span>esp <span class="token operator">=</span> TCB2<span class="token punctuation">.</span>esp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即更新当前线程的栈顶值并保存到该线程的TCB中，并将下一个线程的栈顶值赋给CPU中的<code>%esp</code>，<code>Yield</code>函数结束返回时完成跳转<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679918720062-b72bb5c8-27a3-4e59-8a58-748589271a69.png#averageHue=%23f4eeed&amp;clientId=ua92f5856-fdaa-4&amp;from=paste&amp;height=587&amp;id=ud7b605f7&amp;originHeight=792&amp;originWidth=1605&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=231382&amp;status=done&amp;style=none&amp;taskId=ue07b31ee-894b-4d75-8af3-89532c9503e&amp;title=&amp;width=1188.888972875028" alt="image.png" /><br /><code>ThreadCreate</code>函数：要创建一个线程，就要分配给它需要的TCB，栈，并将栈顶信息存储在TCB中，以及将函数入口地址压入栈</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ThreadCreate</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token comment">// A is function address</span><span class="token punctuation">&#123;</span>    TCB<span class="token operator">*</span> tcb <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// allocate TCB</span>    <span class="token operator">*</span>stack <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// allocate stack</span>    <span class="token operator">*</span>stack <span class="token operator">=</span> A <span class="token punctuation">;</span>    tcp<span class="token punctuation">.</span>esp <span class="token operator">=</span> stack<span class="token punctuation">;</span>  <span class="token comment">// store stack pointer</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>旁注：TCB与PCB的区别</strong></p><blockquote><p>在操作系统中，TCB（Thread Control Block，线程控制块）和PCB（Process Control Block，进程控制块，在进程表中）是分别管理线程和进程的数据结构。以下是两者之间的区别：<br />TCB（线程控制块）：线程控制块是一个数据结构，用于存储有关进程中单个线程的信息。线程是进程中的轻量级、独立执行路径，共享同一地址空间和资源。TCB通常包含以下内容：</p><ol><li>线程ID：分配给线程的唯一标识符。</li><li>线程状态：线程的当前状态（例如就绪、运行、等待或已终止）。</li><li>程序计数器：线程将执行的下一条指令的地址。</li><li>CPU寄存器：线程上次执行时的CPU寄存器的值。</li><li>堆栈指针：指向线程在内存中的私有堆栈的指针。</li><li>调度和优先级信息：关于线程的优先级和调度要求的详细信息。</li></ol></blockquote><p>PCB（进程控制块）：进程控制块是一个数据结构，用于存储有关进程的信息。进程是运行程序的实例，具有自己的地址空间和资源。PCB包含以下内容：</p><blockquote><ol><li>进程ID：分配给进程的唯一标识符。</li><li>进程状态：进程的当前状态（例如就绪、运行、等待或已终止）。</li><li>程序计数器：进程将执行的下一条指令的地址。</li><li>CPU寄存器：进程上次执行时的CPU寄存器的值。</li><li>内存管理信息：关于分配给进程的内存的详细信息，包括基地址和限制地址。</li><li>I/O状态信息：关于进程使用的打开文件和I/O设备的信息。</li><li>调度和优先级信息：关于进程的优先级和调度要求的详细信息。</li><li>TCB列表：线程控制块列表，每个线程对应一个。</li></ol></blockquote><p>总之，TCB管理有关进程中单个线程的信息，而PCB管理有关整个进程的信息，包括所有线程。两者对于操作系统有效地管理和调度进程和线程都是必不可少的。</p><h2 id="62个内核级线程2套栈切换的5个步骤"><a class="markdownIt-Anchor" href="#62个内核级线程2套栈切换的5个步骤"></a> 6）2个内核级线程：2套栈，切换的5个步骤</h2><p>一个内核级线程有一套栈（用户级栈+内核级栈）。内核级栈中压入了用户级栈的<code>cs:ip</code>、<code>ss:sp</code>以便内核级线程能从内核态返回用户态<br />KLT就是能进入OS内核的ULT吗？</p><blockquote><p>不，内核级线程不是可以进入操作系统内核的用户级线程。内核级线程和用户级线程是截然不同的概念，它们在操作系统中的管理方式也不同。<br />内核级线程（Kernel-level Thread，简称KLT）是由操作系统内核直接管理和调度的线程。内核知道这些线程的存在，并对它们的调度、管理和协调拥有完全的控制权。内核级线程可以属于一个或多个进程，<strong>它们既可以在用户模式下运行（执行用户代码时），也可以在内核模式下运行（执行系统调用或内核代码时）</strong>。<br />另一方面，用户级线程（User-level Thread，简称ULT）是一种由用户空间库管理的轻量级线程，无需内核干预。操作系统并不知道这些线程的存在，所以它们的管理、调度和协调都由用户级库处理。用户级线程在用户模式下运行，只有在进行系统调用时才能进入内核模式，但此时内核并不知道线程上下文本身，而是将整个进程视为一个单元。<br />总之，内核级线程不是可以进入操作系统内核的用户级线程。它们是在操作系统中以不同方式管理的独立实体。</p></blockquote><p><strong>旁注：ULT和KLT的区别</strong></p><blockquote><p>用户级线程和内核级线程是在操作系统中实现线程的两种不同方法。线程允许任务并发执行，从而更有效地利用系统资源并提高整体系统性能。以下是它们之间的主要区别：</p><ol><li>管理：</li></ol></blockquote><p>○ 用户级线程（User-level Threads，简称ULTs）由用户空间库管理，无需内核干预。这意味着操作系统不知道这些线程的存在，管理、调度和协调都由用户级库处理。</p><blockquote><p>○ 内核级线程（Kernel-level Threads，简称KLTs）由操作系统内核直接管理。内核知道这些线程的存在，并对它们的调度、管理和协调拥有完全的控制权。<br />2. 调度：</p></blockquote><p>○ ULTs由用户空间库调度，这意味着它们可以有自己的自定义调度策略。<strong>内核不知道这些线程的调度，所以如果一个用户级线程阻塞，可能导致整个进程阻塞</strong>。</p><blockquote><p>○ KLTs由内核调度，内核使用系统范围的策略来确定它们的执行顺序。如果一个内核级线程阻塞，内核可以调度同一进程中的另一个线程，防止整个进程被阻塞。<br />3. 上下文切换：</p></blockquote><p>○ ULTs的上下文切换开销较低，因为切换发生在用户空间，不需要转换到内核模式。这使得用户级线程的上下文切换更快。</p><blockquote><p>○ KLTs的上下文切换开销较高，因为它们涉及从用户模式到内核模式的转换，然后再返回。这使得内核级线程的上下文切换更慢。<br />4. 可移植性：</p></blockquote><p>○ ULTs通常具有更好的可移植性，因为它们是通过用户空间库实现的，不依赖于内核级线程支持。这使得它们可以在不同的操作系统上使用，只需进行最少的更改。</p><blockquote><p>○ KLTs的可移植性较差，因为它们依赖于内核对线程的支持，这在不同的操作系统之间可能存在差异。<br />5. 资源共享：</p></blockquote><p>○ ULTs共享相同的资源，如文件描述符和内存，因为它们属于同一个进程。这使得线程间通信和同步更容易。</p><blockquote><p>○ KLTs可以属于不同的进程，这意味着它们可能拥有独立的资源，使得线程间通信和同步更复杂。<br />总之，用户级线程提供了更好的可移植性和较低的上下文切换开销，但由于内核对它们的调度不了解，它们的调度受到限制。另一方面，内核级线程提供了更好的调度和资源共享，但上下文切换开销更高，可移植性较差。</p></blockquote><p>切换的5个步骤:<br />线程A_用户栈<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover><mo stretchy="true">→</mo><mpadded width="+0.6em" lspace="0.3em"><mtext>interrupt</mtext></mpadded></mover></mrow><annotation encoding="application/x-tex">\xrightarrow{\text{interrupt}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.100502em;vertical-align:-0.01100000000000012em;"></span><span class="mrel x-arrow"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.089502em;"><span style="top:-3.322em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight x-arrow-pad"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">interrupt</span></span></span></span></span><span class="svg-align" style="top:-2.689em;"><span class="pstrut" style="height:2.7em;"></span><span class="hide-tail" style="height:0.522em;min-width:1.469em;"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.01100000000000012em;"><span></span></span></span></span></span></span></span></span>线程A_内核栈<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⟶</mo></mrow><annotation encoding="application/x-tex">\longrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.522em;vertical-align:-0.011em;"></span><span class="mrel">⟶</span></span></span></span>线程A_TCB<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⟶</mo></mrow><annotation encoding="application/x-tex">\longrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.522em;vertical-align:-0.011em;"></span><span class="mrel">⟶</span></span></span></span>线程B_TCB<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⟶</mo></mrow><annotation encoding="application/x-tex">\longrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.522em;vertical-align:-0.011em;"></span><span class="mrel">⟶</span></span></span></span>线程B_内核栈<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover><mo stretchy="true">→</mo><mpadded width="+0.6em" lspace="0.3em"><mtext>iret</mtext></mpadded></mover></mrow><annotation encoding="application/x-tex">\xrightarrow{\text{iret}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.100502em;vertical-align:-0.01100000000000012em;"></span><span class="mrel x-arrow"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.089502em;"><span style="top:-3.322em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight x-arrow-pad"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">iret</span></span></span></span></span><span class="svg-align" style="top:-2.689em;"><span class="pstrut" style="height:2.7em;"></span><span class="hide-tail" style="height:0.522em;min-width:1.469em;"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.01100000000000012em;"><span></span></span></span></span></span></span></span></span>线程B_用户栈。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679917557107-b184917d-8f59-4247-9bda-bbb16e60ac71.png#averageHue=%23f6eceb&amp;clientId=ua92f5856-fdaa-4&amp;from=paste&amp;height=356&amp;id=ud8177df0&amp;originHeight=481&amp;originWidth=910&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=117632&amp;status=done&amp;style=none&amp;taskId=uf7a6f3bf-48d0-42c5-b596-ae09055b9c5&amp;title=&amp;width=674.0741216923835" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679916133843-40c12755-c651-41c3-96b2-ae6ad655736e.png#averageHue=%23efebeb&amp;clientId=ua92f5856-fdaa-4&amp;from=paste&amp;height=500&amp;id=u0f371d25&amp;originHeight=675&amp;originWidth=893&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=100062&amp;status=done&amp;style=none&amp;taskId=u38b22225-5802-42f3-9f61-9e795040117&amp;title=&amp;width=661.4815282102181" alt="image.png" /></p><p>下面以系统调用<code>fork()</code>为中断，详细讲解这个5个步骤</p><h3 id="1-从fork中断开始用户栈到内核栈"><a class="markdownIt-Anchor" href="#1-从fork中断开始用户栈到内核栈"></a> 1. 从fork()中断开始，用户栈到内核栈</h3><p>初始状态时，一个用户程序在运行，此时使用它的用户栈。当它在程序中调用系统调用函数<code>fork()</code>时，根据前面我们讲解的系统调用背后发生的故事，CPU会转去执行<code>_syscall*</code>函数，并会执行到<code>int 0x80</code>指令。当CPU开始执行<code>int 0x80</code>之前，会将此时的<code>CS:IP</code>和<code>SS:IP</code>压入内核栈（通过tss找到）中，因为此时<code>int 0x80</code>还没开始执行，也就是说，CPU还未跳转到内核段中的中断处理程序<code>system_call</code>去执行，因此此时的<code>CS:IP</code>和<code>SS:IP</code>都是用户程序的，即<code>SS:IP</code>指向是用户栈，<code>CS:IP</code>指向的是用户程序中<code>int 0x80</code>的下一条指令。接着CPU执行<code>int 0x80</code>之后，CPU跳转到内核段的<code>system_call</code>执行，此时<code>SS:IP</code>转变为指向内核栈<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679812176393-f62c89bb-070e-4cb6-a96a-cfb65217be72.png#averageHue=%23ece7e7&amp;clientId=ua3a7c360-c6db-4&amp;from=paste&amp;height=396&amp;id=u39aaf8cb&amp;originHeight=534&amp;originWidth=982&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=104571&amp;status=done&amp;style=none&amp;taskId=ud02a8aef-af88-4218-8399-348e9a79c59&amp;title=&amp;width=727.4074587933193" alt="image.png" /></p><h3 id="2-判断阻塞执行schedule预置中断出口"><a class="markdownIt-Anchor" href="#2-判断阻塞执行schedule预置中断出口"></a> 2. 判断阻塞，执行schedule，预置中断出口</h3><p>CPU开始执行内核函数<code>system_call</code>，该函数首先压入一堆寄存器，因为是刚进入内核，因此这些寄存器还是之前用户态的值，这么做的目的是保存用户程序的状态。接着<code>system_call</code>通过查找函数表<code>_sys_call_table</code>调用<code>sys_fork</code>函数。执行完<code>sys_fork</code>函数之后，OS通过检查该线程PCB的<code>state</code>变量是否为<code>0</code>判断该线程是否变为阻塞态 或 该线程的时间片是否用完，再决定是否执行调度（schedule）<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679985636693-5eda06b8-f4a6-4d26-b771-56065ac86454.png#averageHue=%23f1eceb&amp;clientId=u808d0f22-24f8-4&amp;from=paste&amp;height=425&amp;id=ub1c6c60d&amp;originHeight=574&amp;originWidth=1028&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=137117&amp;status=done&amp;style=none&amp;taskId=u1c52d543-34de-46f2-bd3b-0d2d7604694&amp;title=&amp;width=761.4815352744728" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679814483092-370e727b-6a32-457f-886d-36dfd55a6de1.png#averageHue=%23f9f4f2&amp;clientId=u0c345afc-dfb2-4&amp;from=paste&amp;height=343&amp;id=u044a4360&amp;originHeight=463&amp;originWidth=1505&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=264463&amp;status=done&amp;style=none&amp;taskId=u81a0bf4e-5b5d-4b64-8b3f-3b19aadae05&amp;title=&amp;width=1114.8148935681727" alt="image.png" /><br />在<code>reschedule</code>函数中，先压入了包含<code>iret</code>指令的代码段的起始地址（标号：<code>ret_from_sys_call</code>）作为中断出口，然后跳转到<code>schedule</code>函数（位于<code>kernel/sched.c</code>）执行调度，即执行5段论的中间3段<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679814617493-551edd5c-33d2-4725-88c1-f33854daf0bd.png#averageHue=%23fcf6f5&amp;clientId=u0c345afc-dfb2-4&amp;from=paste&amp;height=124&amp;id=ud3a22459&amp;originHeight=168&amp;originWidth=1324&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=32551&amp;status=done&amp;style=none&amp;taskId=ua45209f7-afbe-491e-96a1-ca737419f25&amp;title=&amp;width=980.7408100227645" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679814652606-b3a09300-cc50-498c-8c52-8427f3212981.png#averageHue=%23f5ebea&amp;clientId=u0c345afc-dfb2-4&amp;from=paste&amp;height=147&amp;id=u1c6a0da7&amp;originHeight=198&amp;originWidth=656&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=34374&amp;status=done&amp;style=none&amp;taskId=u9afdce3e-2e97-4e6a-8aad-c82394856d6&amp;title=&amp;width=485.925960252971" alt="image.png" /></p><h3 id="3-执行切换过时的硬件切换-tss机制和现代的软件切换-tcb机制"><a class="markdownIt-Anchor" href="#3-执行切换过时的硬件切换-tss机制和现代的软件切换-tcb机制"></a> 3. 执行切换，过时的硬件切换-TSS机制和现代的软件切换-TCB机制</h3><p>在<code>schedule</code>函数中调用了<code>switch_to(next)</code>函数（位于<code>include/linux/sched.h</code>）用于完成切换5段论的中间三段，这里的<code>next</code>是根据调度算法选择的另一个进程的PCB（linux0.11没有线程的概念，因此这里称进程）。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679905894092-d0fc9082-12c6-4c44-bd15-cea95a9248b8.png#averageHue=%23fbf9f7&amp;clientId=ua92f5856-fdaa-4&amp;from=paste&amp;height=366&amp;id=dkBAY&amp;originHeight=494&amp;originWidth=1390&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=235068&amp;status=done&amp;style=none&amp;taskId=u3bf88e74-1d49-4aca-9a62-2d31821104a&amp;title=&amp;width=1029.6297023652892" alt="image.png" /><br />在linux-0.11中，线程切换使用了TSS机制：<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679917265700-f02b7ee2-0de6-4e5e-b9b9-889d946a1526.png#averageHue=%23f1eeea&amp;clientId=ua92f5856-fdaa-4&amp;from=paste&amp;height=423&amp;id=uc9081ea2&amp;originHeight=571&amp;originWidth=1191&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=169593&amp;status=done&amp;style=none&amp;taskId=uc7cc3269-217f-48c1-829b-d3e6e9ba0ee&amp;title=&amp;width=882.222284544647" alt="image.png" /><br />关于TSS, 进行几点说明：</p><ol><li><strong>TSS实际上就是保存了一堆寄存器值的数据结构，这堆寄存器的值又体现了进程的当前状态</strong></li></ol><blockquote><p>任务状态段（Task State Segment，TSS）是x86架构中用于支持硬件任务切换的一种内存数据结构。TSS包含了与一个特定任务（例如，进程或线程）相关的信息，如CPU寄存器的值、段选择器和其他一些特定于任务的数据。<br />在x86架构中，任务切换可以通过硬件实现，使用任务寄存器（Task Register，TR）指向当前任务的TSS。当发生任务切换时，处理器会自动保存<strong>当前任务的状态</strong>到当前任务的TSS，并从新任务的TSS加载新任务的状态。<br />尽管TSS提供了一种硬件级别的任务切换机制，但它在实际应用中的效率较低，因为硬件任务切换涉及大量的内存访问和处理器操作。因此，许多现代操作系统，包括Linux，选择使用软件任务切换，即使用编程手段保存和恢复任务上下文，而不是依赖硬件实现的TSS机制。</p></blockquote><ol start="2"><li><strong>TSS的内容是TCB的子部分</strong></li></ol><blockquote><p>任务状态段（Task State Segment，TSS）是一种用于保存任务（进程或线程）状态的数据结构。然而，TSS是一种特定于x86体系结构的硬件数据结构，用于支持硬件任务切换。它在内存中存储任务的上下文信息，包括寄存器值、特权级等。<br />线程控制块（Thread Control Block，TCB）与TSS有相似之处，但它是一种软件概念，而不是硬件概念。TCB是操作系统用于表示和管理线程的内核数据结构。它通常包括线程上下文（如寄存器值）、线程状态、优先级、调度信息等。与TSS类似，TCB也用于在任务切换时保存和恢复线程的上下文信息。<br />尽管TSS和TCB都涉及保存任务状态信息，但它们在概念上和用途上有所不同：</p><ol><li>硬件与软件：TSS是一种硬件数据结构，特定于x86架构，用于支持硬件任务切换。而TCB是一种软件数据结构，由操作系统实现，用于管理线程。</li><li>依赖与通用性：TSS依赖于特定的CPU架构（如x86），而TCB是一种通用的操作系统概念，可以在多种CPU架构上实现。</li><li>作用域：TSS主要关注任务的硬件状态，例如寄存器值和特权级。而TCB除了保存线程的硬件状态，还包括其他与线程管理和调度相关的信息，如线程状态、优先级等。</li></ol></blockquote><p>总之，虽然TSS和TCB在保存任务状态方面有相似之处，但它们分别代表硬件和软件层面的概念。在现代操作系统中，通常使用软件任务切换（通过TCB）而不是硬件任务切换（通过TSS），因为软件任务切换更加高效且易于维护。</p><ol start="3"><li><strong>TSS机制下的线程切换</strong></li></ol><blockquote><p>假设我们有两个线程：线程A和线程B，它们各自有一个任务状态段（TSS）。我们将通过x86硬件任务切换机制实现从线程A切换到线程B。以下是使用TSS机制进行线程切换的步骤：</p><ol><li>为线程A和线程B创建TSS：首先，在内存中分配两个TSS结构，分别用于保存线程A和线程B的状态。每个TSS包含了线程的寄存器值、段选择器等信息。同时，我们需要为每个线程创建一个对应的TSS描述符，并将它们添加到全局描述符表（Global Descriptor Table，GDT）中。</li><li>设置任务寄存器（TR）：将任务寄存器（TR）设置为当前线程（线程A）的TSS描述符在GDT中的选择器。这告诉处理器当前正在执行的任务的TSS在哪里。</li><li>准备进行任务切换：为了从线程A切换到线程B，我们需要执行一个特殊的指令（<code>ljmp</code>）来触发硬件任务切换。这需要使用线程B的TSS描述符在GDT中的选择器作为操作数。</li><li>触发硬件任务切换：当处理器检测到这个特殊的指令，它会自动执行以下操作：<ul><li>保存线程A的当前状态到线程A的TSS中，包括通用寄存器、段寄存器、标志寄存器、指令指针等。</li><li>更新线程A的TSS中的任务链接字段，使其指向线程B的TSS。这用于在将来返回线程A时进行任务切换。</li><li>将任务寄存器（TR）更新为线程B的TSS描述符在GDT中的选择器。</li><li>从线程B的TSS加载线程B的状态，包括通用寄存器、段寄存器、标志寄存器、指令指针等。</li><li>更新线程B的TSS中的任务链接字段，使其指向线程A的TSS。</li></ul></li><li>开始执行线程B：处理器已经完成了从线程A到线程B的任务切换，现在开始执行线程B的代码。</li></ol></blockquote><p>任务链接字段是任务状态段（Task State Segment，TSS）中的一个字段，用于在硬件任务切换过程中保存与当前任务关联的前一个任务的信息。任务链接字段中存储的是前一个任务的TSS选择器，该选择器指向全局描述符表（Global Descriptor Table，GDT）中相应的TSS描述符。这样，在将来需要从线程B切换回线程A时，处理器可以通过线程B的任务链接字段找到线程A的TSS，并完成任务切换。</p><blockquote><p>通过以上步骤，我们完成了从线程A切换到线程B的任务切换。需要注意的是，这个过程完全由硬件自动完成，而不需要操作系统通过编程手段来保存和恢复任务状态。然而，正如前面所提到的，硬件任务切换效率较低，因此现代操作系统通常使用软件任务切换机制。</p></blockquote><p><strong>旁注：iret指令不仅弹出CS:IP</strong></p><blockquote><p>iret（中断返回）指令是x86架构中用于从中断或异常处理程序返回的指令。它不仅仅弹出代码段寄存器（CS）和指令指针（IP），而且在中断或异常处理程序返回时会将一些其他重要的寄存器值恢复到原始状态。<br />具体来说，当执行iret指令时，处理器会执行以下操作：</p><ol><li>弹出标志寄存器（FLAGS）的值，并恢复其内容。</li><li>弹出代码段寄存器（CS）的值，并恢复其内容。</li><li>弹出指令指针（IP）的值，并恢复其内容。</li></ol></blockquote><p>在中断和异常处理程序中，处理器还会自动将其他重要寄存器的值压入栈中，例如堆栈段寄存器（SS）和堆栈指针（SP）。在这种情况下，执行iret指令时，处理器还需要从栈中弹出这些寄存器的值。</p><blockquote><p><strong>总之，iret指令不仅仅弹出CS和IP，还负责恢复其他相关寄存器的值，从而使处理器能够在中断或异常处理程序结束后继续执行原始代码。需要注意的是，iret指令不会弹出整个函数栈上的所有内容，而只会弹出保存在栈上的这些寄存器值。</strong><br />现代操作系统使用软件切换，通过如用户级程序那样编程实现：保存当前CPU中的<code>%esp</code>值到进程A，将进程B的<code>%esp</code>值加载到CPU，通过<code>ret</code>弹出进程B内核栈的函数返回地址赋值给IP，而该函数地址（标号：<code>ret_from_sys_call</code>）是一段包含<code>iret</code>的代码，由此接着CPU会执行到<code>iret</code>指令，从进程B的内核栈中弹出用户代码所在的<code>CS:IP</code>，状态寄存器<code>FLAGS</code>，<code>SS:IP</code>，从而切换到进程B的用户代码执行，并且使用的栈也切换为用户栈</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679917606573-f58aec54-8783-4be8-a543-880c7b3b9880.png#averageHue=%23f2e4e3&amp;clientId=ua92f5856-fdaa-4&amp;from=paste&amp;height=199&amp;id=u36d18fbd&amp;originHeight=238&amp;originWidth=535&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=29551&amp;status=done&amp;style=none&amp;taskId=ub516682b-d76b-4ae0-98f9-6f35bfcd457&amp;title=&amp;width=447.29632568359375" alt="image.png" /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679918637375-e941597e-d0aa-488e-84be-c71a72504b34.png#averageHue=%23e2d4d4&amp;clientId=ua92f5856-fdaa-4&amp;from=paste&amp;height=211&amp;id=ue864e72f&amp;originHeight=285&amp;originWidth=511&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=49468&amp;status=done&amp;style=none&amp;taskId=uc0bccb88-2e27-4165-8ec0-38d0a5e6b95&amp;title=&amp;width=378.5185452580307" alt="image.png" /></p><h2 id="7fork函数从父进程创建子进程关键在copy_process函数"><a class="markdownIt-Anchor" href="#7fork函数从父进程创建子进程关键在copy_process函数"></a> 7）fork函数从父进程创建子进程，关键在copy_process函数</h2><h3 id="1-进入copy_process函数"><a class="markdownIt-Anchor" href="#1-进入copy_process函数"></a> 1. 进入<code>copy_process</code>函数</h3><p>CPU执行<code>sys_fork</code>函数（位于<code>kernel/system_call.s</code>），将在内核栈中压入的寄存器当作参数传递给<code>copy_process</code>（位于<code>kernel/fork.c</code>），这里可以看见<code>copy_process</code>原型的参数顺序刚好与系统调用进入内核时的压栈顺序相反。这些寄存器代表了父进程的状态，将用于<code>copy_process</code>创建子进程<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679992944629-0da35674-4cc6-4db2-8af6-0fe44fb1e529.png#averageHue=%23fcfaf9&amp;clientId=u808d0f22-24f8-4&amp;from=paste&amp;height=372&amp;id=u2c33a560&amp;originHeight=602&amp;originWidth=1352&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=211914&amp;status=done&amp;style=none&amp;taskId=ub8e1d86d-63b2-45f3-8c46-d7779e6703c&amp;title=&amp;width=836.4815063476562" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679986001796-f371a5f2-1167-4df7-9f27-fce0f843c974.png#averageHue=%23f9f5f2&amp;clientId=u808d0f22-24f8-4&amp;from=paste&amp;height=262&amp;id=u32caf97a&amp;originHeight=354&amp;originWidth=1212&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=225910&amp;status=done&amp;style=none&amp;taskId=ufd6d3506-3a09-4b8c-9838-f47d51e7559&amp;title=&amp;width=897.7778411990865" alt="image.png" /></p><h3 id="2-为子进程分配pcb"><a class="markdownIt-Anchor" href="#2-为子进程分配pcb"></a> 2. 为子进程分配PCB</h3><p>在<code>copy_processs</code>函数内部，首先调用了<code>get_free_page</code>函数为子进程分配了大小为一个页表（结合第一章，大小为4KB）的内存，进程的PCB将会放在这段内存里（后续会看到这段内存还作为了子进程的内核栈）。<code>get_free_page</code>函数会在内核的内存管理系统中找到一个尚未使用的物理页面，并返回一个指向该页面起始地址的指针（通过内存位图<code>mem_map</code>,回忆第一章，0代表空闲）。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">get_free_page</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// allocate new memory page to child process</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接着<code>copy_process</code>在新进程的PCB中设置各种状态（例如进程号、进程状态等），为新进程分配一个新的进程号(PID)，并初始化其各种状态，如进程状态、父进程ID、时间片计数器等。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679992411131-2f3b4dcf-f3c5-47ac-9c8d-6e1ce49a4bc4.png#averageHue=%23f7f5f3&amp;clientId=u808d0f22-24f8-4&amp;from=paste&amp;height=379&amp;id=u0b853805&amp;originHeight=512&amp;originWidth=1004&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=362912&amp;status=done&amp;style=none&amp;taskId=u7f88615a-e00f-4953-ab9b-ca57fae5271&amp;title=&amp;width=743.7037562408275" alt="image.png" /></p><h3 id="3-为子进程创建内核栈"><a class="markdownIt-Anchor" href="#3-为子进程创建内核栈"></a> 3. 为子进程创建内核栈</h3><p>子进程的内核栈是通过设置子进程的 TSS 结构体中的 <code>esp0</code>和<code>ss0</code>字段来实现的</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">p<span class="token operator">-></span>tss<span class="token punctuation">.</span>esp0 <span class="token operator">=</span> PAGE_SIZE <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> p<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于系统给PCB指针<code>p</code>分配了1页新内存,所以<code>PAGE_SIZE + (long) p</code> 让 <code>esp0</code>正好指向该页顶端  ( 还记得吗? 栈是由高地址到低地址堆起来的 ) 。<br />当然，我们还需要设置<code>ss0</code>，<code>p-&gt;tss.ss0 = 0x10</code> 语句的作用是设置子进程的内核栈所在的段选择子（Segment Selector）为内核数据段（Kernel Data Segment）的选择子，0x10 是内核数据段选择子的值。设置子进程的内核栈所在的段选择子为内核数据段的选择子，可以确保子进程的内核栈位于内核数据段中，从而使子进程可以访问内核中的数据</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">p<span class="token operator">-></span>tss<span class="token punctuation">.</span>ss0 <span class="token operator">=</span> <span class="token number">0x10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样, <code>ss0:esp</code>就用作了子进程在内核态执行时的栈顶指针, 子进程拥有的页表的高地址开始的部分就用作了子进程的栈。<br /><strong>旁注：esp与esp0</strong></p><blockquote><p>esp 和 esp0 都是x86架构下的寄存器。<br />esp（Extended Stack Pointer）是x86架构下的栈指针寄存器，用于指向当前栈顶的位置。在进程执行期间，esp 寄存器通常用于指向进程的用户栈或内核栈的栈顶位置。<br /><strong>esp0 是x86架构下的TSS（Task State Segment）结构体中的一个字段，用于指示内核栈的栈顶位置</strong>。当一个进程从用户态切换到内核态时，操作系统需要使用该进程的内核栈，以保存该进程在内核态执行期间使用的寄存器状态等信息。因此，内核需要知道该进程的内核栈的位置。在Linux 0.11版本中，进程的TSS结构体中的 esp0 字段存储了该进程的内核栈的起始位置，当该进程从用户态切换到内核态时，内核将使用 esp0 中存储的值来确定该进程的内核栈的栈顶位置。<br />需要注意的是，在Linux 0.11版本中，由于没有使用分段机制，TSS中的段基地址为0，因此 esp0 存储的是相对于物理内存起始位置的偏移量。在进程切换时，内核需要将 esp0 中的偏移量加上物理内存的起始地址，以计算出实际的内核栈顶指针位置。</p></blockquote><h3 id="4-将父进程状态复制给子进程"><a class="markdownIt-Anchor" href="#4-将父进程状态复制给子进程"></a> 4. 将父进程状态复制给子进程</h3><p><code>copy_process</code>将父进程的状态赋值给子进程。前面我们提到过，TSS是一个保持进程当前状态的数据结构，而进程的状态是由一堆寄存器体现的，因此在这一步中，<code>copy_process</code>将传入的寄存器参数全部用于初始化子进程的TSS，由此完成状态的复制。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679990466548-3651a572-e44e-49e0-a264-fd983ef02f9d.png#averageHue=%23fdfcfb&amp;clientId=u808d0f22-24f8-4&amp;from=paste&amp;height=287&amp;id=u30ca9e1b&amp;originHeight=388&amp;originWidth=1129&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=96090&amp;status=done&amp;style=none&amp;taskId=u4d4d1cfa-25fc-4fbf-a27b-76a745a029f&amp;title=&amp;width=836.2963553743966" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679989927487-b223b6d5-19d0-46f5-bbc0-af4d7b31d3bd.png#averageHue=%23faf9f8&amp;clientId=u808d0f22-24f8-4&amp;from=paste&amp;height=163&amp;id=u589bbb05&amp;originHeight=220&amp;originWidth=1086&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=55481&amp;status=done&amp;style=none&amp;taskId=u0e9ec104-05d4-43e8-bc32-4e0c504c96c&amp;title=&amp;width=804.4445012724489" alt="image.png" /><br />注意这里，子进程<code>eip</code>、<code>esp</code>、<code>ss</code>等寄存器均是父进程的值，而这些值是在父进程进入内核时压入的值，因此这些值是父进程在用户状态下的值，由此可见，子进程和父进程共享用户栈，因为它们的<code>ss:esp</code>指向了同一个。并且无论是子进程还是父进程，返回用户状态时，都会返回到同一条语句的位置( <code>int 0x80</code>的下一条指令)，因为它们的<code>CS:IP</code>指向了同一个地址<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679990612800-58ef98cf-33cc-4097-8d72-cf78bde39b4f.png#averageHue=%23f7efeb&amp;clientId=u808d0f22-24f8-4&amp;from=paste&amp;height=388&amp;id=u2ca45a8e&amp;originHeight=569&amp;originWidth=1038&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=127808&amp;status=done&amp;style=none&amp;taskId=uaa6ec9a2-ffe6-4f97-9d83-464163b77c8&amp;title=&amp;width=707.888916015625" alt="image.png" /><br /><strong>旁注：父子进程共享用户栈，只存在于早期linux中</strong></p><blockquote><p><strong>CPU进程调度中，子进程独立于父进程吗？</strong><br />在CPU进程调度中，子进程是独立于父进程的。当一个进程创建了一个子进程后，子进程会拥有自己的进程ID，并且会复制父进程的内存空间和代码段。这样，子进程就可以独立地运行，并且可以在其自己的地址空间中执行代码。子进程的运行不会影响父进程的运行，而且子进程可以与父进程并行执行。但是，子进程可以通过进程间通信（IPC）机制与父进程进行通信，以便共享信息和资源。<br /><strong>要是父进程结束了，父进程伴随的用户空间也释放了，那子进程怎么执行？子进程不是和父进程共享用户空间吗？</strong><br />当父进程结束时，它的用户空间会被释放，但是子进程并不会受到影响。子进程在创建时会复制父进程的内存空间和代码段，这些内存空间和代码段被子进程独立地使用，因此子进程并不与父进程共享用户空间。这意味着，即使父进程已经结束，子进程仍然可以继续运行，并且可以在其自己的地址空间中执行代码。<br />需要注意的是，当父进程结束时，子进程的父进程ID会被设置为1，也就是init进程的ID。这是因为在Unix-like操作系统中，init进程是所有进程的祖先进程，当一个进程的父进程结束时，它的父进程ID会被设置为init进程的ID。<br /><strong>那为什么在linux0.11中，子进程和父进程指向同样的用户栈</strong><br />在早期的Linux内核版本（如0.11版本）中，子进程确实会与父进程共享用户空间，包括用户栈。这是因为在这个版本的内核中，子进程的创建是通过在父进程的地址空间中复制一个新的进程描述符来实现的。这个新的进程描述符包含了子进程的所有信息，包括代码段、数据段、堆栈和文件描述符等。因此，子进程和父进程共享同样的用户栈。<br />不过，在后来的版本中，Linux内核对进程创建和管理进行了改进，子进程的创建不再与父进程共享用户空间。现代的Linux内核中，子进程会创建自己的用户栈，这样就可以避免子进程和父进程之间的干扰和冲突。<br /><strong>那子进程怎么执行与父进程一样的用户代码？</strong><br />在现代的Linux内核中，子进程创建时会复制父进程的代码段、数据段和堆栈等信息，但是子进程会创建自己的用户栈。这样，子进程就可以在自己的用户栈上执行与父进程相同的用户代码，而不会与父进程共享用户栈。子进程和父进程执行相同的代码，但是它们在不同的用户栈上执行，这样就可以避免子进程和父进程之间的干扰和冲突。<br />需要注意的是，子进程复制父进程的代码段、数据段和堆栈等信息是通过写时复制（Copy-on-Write，COW）技术来实现的。这意味着，当父进程或子进程需要修改这些信息时，内核会为它们分配新的内存空间，而不是在原来的内存空间中进行修改。这样可以避免父进程和子进程之间的内存冲突，提高系统的性能和稳定性。<br /><strong>子进程复制的代码段，是int 0x80之后的部分吗，我认为不包含是父进程调用fork函数之前的部分</strong><br />您的理解是正确的。在现代的Linux内核中，子进程复制的代码段包含了父进程调用fork函数之后的所有代码，但是不包括调用fork函数之前的代码。这是因为在调用fork函数之前的代码是父进程的独有部分，而在调用fork函数之后的代码是父进程和子进程共享的部分。<br />具体来说，当父进程调用fork函数时，内核会为子进程创建一个新的进程描述符，并复制父进程的代码段、数据段和堆栈等信息。但是，由于fork函数是在父进程中调用的，因此子进程不会复制调用fork函数之前的代码。子进程从fork函数返回的位置开始执行，这个位置是在int 0x80指令之后的位置，也就是父进程调用fork函数之后的位置。<br />需要注意的是，子进程和父进程之间的区别是子进程会从fork函数返回0，而父进程会从fork函数返回子进程的进程ID。这样，父进程和子进程就可以通过返回值来区分彼此。</p></blockquote><h3 id="5-进程的返回值"><a class="markdownIt-Anchor" href="#5-进程的返回值"></a> 5. 进程的返回值</h3><blockquote><p>从父进程返回的是子进程的PID，从子进程返回的是0</p></blockquote><p><code>cope_process</code>到了尾声，它将创建的子进程的PID作为返回值，即将寄存器<code>%eax</code>设置为子进程的PID值，由此<code>sys_fork</code>返回子进程PID。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679992428191-5b459286-a077-4867-8407-191926de273d.png#averageHue=%23fefefe&amp;clientId=u808d0f22-24f8-4&amp;from=paste&amp;height=21&amp;id=oNd2L&amp;originHeight=28&amp;originWidth=885&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=3321&amp;status=done&amp;style=none&amp;taskId=u998b2886-57f7-4276-8d98-63da8a8d1f1&amp;title=&amp;width=655.5556018656697" alt="image.png" /><br />如果在执行<code>sys_fork</code>函数时父进程<strong>没有</strong>遇到阻塞，即不会在执行完<code>sys_fork</code>之后调用<code>reschedule</code>函数，那么中断处理程序<code>system_call</code>函数就会返回子进程的PID，进而在用户态<code>fork</code>函数的<code>int 0x80</code>指令结束后<code>%eax</code>的值就是子进程PID，并作为返回值<code>res</code>返回给用户程序<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679993119089-afabf5ff-831a-4764-abbe-83e4c74fa9d3.png#averageHue=%23faf7f5&amp;clientId=u808d0f22-24f8-4&amp;from=paste&amp;height=77&amp;id=u3864703c&amp;originHeight=104&amp;originWidth=1495&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=61575&amp;status=done&amp;style=none&amp;taskId=u84963a9e-fd75-4e08-b55d-2a43f101cb6&amp;title=&amp;width=1107.407485637487" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679993561807-eacf7446-1c03-4f95-8107-3d209649ff51.png#averageHue=%23e9e2e2&amp;clientId=u808d0f22-24f8-4&amp;from=paste&amp;height=332&amp;id=uccf9746d&amp;originHeight=541&amp;originWidth=518&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=62919&amp;status=done&amp;style=none&amp;taskId=u657524b4-a03f-4af3-8b4c-8405d377170&amp;title=&amp;width=317.7037353515625" alt="image.png" /><br />子进程的<code>%eax</code>在创建时被设置为<code>0</code>，在父进程中，如果创建好了子进程，但如果后续遇到了阻塞，执行了<code>reschedule</code>函数，调度到了子进程，执行进程的切换，CPU开始执行子进程。那么从子进程返回时，是返回到父进程相同的用户程序位置。因此在用户程序可以对<code>fork</code>的返回值进行判断，如果为<code>0</code>则是从子进程返回，反之从父进程返回。<br />看一个示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I am son!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I am father!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680078045095-1b583303-4b2f-4258-a73b-321f0fddb2fc.png#averageHue=%230a0b0e&amp;clientId=ud2c7c0df-e193-4&amp;from=paste&amp;height=160&amp;id=u15f08089&amp;originHeight=216&amp;originWidth=1189&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=58788&amp;status=done&amp;style=none&amp;taskId=u0c937fa6-ed5c-4e25-ada8-3f6d54b0115&amp;title=&amp;width=880.7408029585099" alt="image.png" /><br />这里的输出表明，父进程先被执行，<code>fork</code>函数返回子进程的PID，输出<code>&quot;I am father !&quot;</code>。后续再执行子进程，<code>fork</code>函数返回<code>0</code>，输出<code>&quot;I am son !&quot;</code><br />什么情况下会先输出<code>&quot;I am son !&quot;</code>，再输出<code>&quot;I am father!&quot;</code>呢？<br />当父进程创建好了子进程之后遇到阻塞，或者时间片用完了，CPU就会执行调度程序<code>schedule</code>，调度到子进程，那么子进程就会先于父进程执行。不仅如此，在多核CPU上，子进程和父进程可能同时执行，如果子进程执行的更快，也会先执行输出<br />下面我们来验证一下：<br />在<code>fork</code>之后，父进程在打印<code>&quot;I am father&quot;</code>之前先调用<code>wait</code>函数等待子进程结束后再继续执行。那么如果子进程还没有结束或开始执行，<code>wait</code>函数会阻塞父进程，开始执行子进程，直到子进程结束并返回其退出状态。因此一定会先输出<code>&quot;I am son !&quot;</code>，再输出<code>&quot;I am father!&quot;</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;sys/wait.h></span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I am son!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I am father!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680420231797-0d4edd6d-07e1-4b49-97d8-76f519b44865.png#averageHue=%2375a1c0&amp;clientId=u7ffa5871-6998-4&amp;from=paste&amp;height=129&amp;id=u23ebc70d&amp;originHeight=174&amp;originWidth=1289&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=48764&amp;status=done&amp;style=none&amp;taskId=u8e15f596-d214-4af6-a01f-a1290a229d6&amp;title=&amp;width=954.8148822653652" alt="image.png" /></p><h2 id="8-详解schedule函数"><a class="markdownIt-Anchor" href="#8-详解schedule函数"></a> 8) 详解schedule函数</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>next<span class="token punctuation">,</span>c<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span> p<span class="token punctuation">;</span>  <span class="token comment">// 进程表</span><span class="token comment">/* check alarm, wake up any interruptible tasks that have got a signal */</span><span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>LAST_TASK <span class="token punctuation">;</span> p <span class="token operator">></span> <span class="token operator">&amp;</span>FIRST_TASK <span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span>  <span class="token comment">// 唤醒的收到信息的等待进程</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>alarm <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>alarm <span class="token operator">&lt;</span> jiffies<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>signal <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>SIGALRM<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>alarm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>signal <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>_BLOCKABLE <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>blocked<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>state<span class="token operator">==</span>TASK_INTERRUPTIBLE<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>state<span class="token operator">=</span>TASK_RUNNING<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* this is the scheduler proper: */</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// counter有两个含义</span>        <span class="token comment">// 1. 进程运行过程中动态变化的优先级值 (priority是初始优先级，在进程创建时分配)</span>        <span class="token comment">// 2. 进程的时间片</span>c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">=</span> NR_TASKS<span class="token punctuation">;</span> <span class="token comment">// 最大的进程数</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>task<span class="token punctuation">[</span>NR_TASKS<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 进程在进程表中的索引值 = PID - 1 ，这里是指向最后一个进程的后一个位置</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span><span class="token operator">--</span>p<span class="token punctuation">)</span>  <span class="token comment">// 减法先执行，因此不会发生越界访问</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>state <span class="token operator">==</span> TASK_RUNNING <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>counter <span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token comment">// 这个if语句，用于在所有就绪态的进程中</span>c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>counter<span class="token punctuation">,</span> next <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token comment">// 挑出counter值最大的那个，</span>                                              <span class="token comment">// 这里的counter可视为含义1-优先级，即挑出优先级最大的那个</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment">// 挑出了counter设置为next，跳出</span>                <span class="token comment">// 所有就绪态的进程的剩余可执行时间均为0，则挑不出可以执行的next，即表示所有就绪进程的时间片都用完了，</span>        <span class="token comment">// 那么就需要重置时间片。如何重置呢？</span>        <span class="token comment">// 根据进程的初始优先级priority,将所有进程重置时间片(包括阻塞态的进程)，priority越大，counter越大, </span>        <span class="token comment">// 具体来说就是将当前counter值翻倍，再加上初始优先级priority</span>        <span class="token comment">// 由此可见，进程如果被多次执行这条语句，其优先级会越来越大。而阻塞的进程才会被多次执行该语句，</span>        <span class="token comment">// 因此在阻塞状态下越久的进程，优先级counter的值会越大，保证了这样的进程转为就绪态后能立即执行，避免了饥饿</span>        <span class="token comment">// 因此该函数是时间片轮转调度和优先级调度的结合，并只用了一个counter变量</span><span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>LAST_TASK <span class="token punctuation">;</span> p <span class="token operator">></span> <span class="token operator">&amp;</span>FIRST_TASK <span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>counter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>counter <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>priority<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">switch_to</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// next就是选择的进程在进程表中的索引</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-信号量实现进程的走走停停"><a class="markdownIt-Anchor" href="#9-信号量实现进程的走走停停"></a> 9) 信号量实现进程的走走停停</h2><p>多进程的合理推进体现在进程能在正确的地方停下，并在符合条件的情况下继续执行，即正确的走走停停。多进程通过对信号量(semaphore)的检测(test)和设置(set)实现这一点。下面以经典的生产者-消费者为例讲述这个概念<br />消费者向BUFFER索取资源时，对信号量有以下逻辑</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">P</span><span class="token punctuation">(</span>semaphore s<span class="token punctuation">)</span> <span class="token comment">// 消费资源</span><span class="token punctuation">&#123;</span>    <span class="token operator">--</span>s<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token comment">// 索取一个资源</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>value<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">sleep</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果资源数为负数，则说明资源是欠缺状态，该进程进入睡眠(停)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生产者向缓冲区BUFFER写入时，对信号量有以下逻辑</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">V</span><span class="token punctuation">(</span>semaphore s<span class="token punctuation">)</span> <span class="token comment">// 生产资源</span><span class="token punctuation">&#123;</span>    <span class="token operator">++</span>s<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 生产一个资源</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>value<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token function">wakeup</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果资源增1后为非正数，那之前资源必然欠缺，必然有进程在睡眠，因此唤醒(走)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，通过对信号量的test&amp;&amp;set能够实现进程的走走停停<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680938101200-999088e8-44ca-47f1-bd2a-7962dae4dcea.png#averageHue=%23f0eded&amp;clientId=u7446a335-f9ee-4&amp;from=paste&amp;height=465&amp;id=u68605776&amp;originHeight=628&amp;originWidth=1055&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=161095&amp;status=done&amp;style=none&amp;taskId=u14a27aee-49be-41b0-a12c-0e2a97f464a&amp;title=&amp;width=781.4815366873237" alt="image.png" /></p><h2 id="10-临界区机制对信号量提供保护"><a class="markdownIt-Anchor" href="#10-临界区机制对信号量提供保护"></a> 10) 临界区机制对信号量提供保护</h2><p>进程对信号量执行修改时，可能会因为时间片结束而阻塞，CPU转去执行其它进程，而其它进程也可能修改同一信号量，这将造成信号量的语义错误，例如对资源信号量<code>s</code>的修改<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680854282484-650cd303-1ba2-43ad-90cd-3f77123f8309.png#averageHue=%23f7f5f4&amp;clientId=u6767378f-df7a-4&amp;from=paste&amp;height=341&amp;id=ubdfd3093&amp;originHeight=460&amp;originWidth=772&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=105267&amp;status=done&amp;style=none&amp;taskId=u5b6ccfb6-5361-4c87-bd66-3a28059338e&amp;title=&amp;width=571.8518922489231" alt="image.png" /><br />这种错误，归根结底是不可预知的调度顺序造成的，因此我们引入临界区的概念：<br />临界区就是在同一时刻只能有一个进程进入的代码段，这个代码段的作用是修改信号量，因此每个进程都有这个代码段，但同一时刻只能有一个进程进入该代码段进行修改操作，避免了一个进程修改到中途，而另一个进程执行修改的情况<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680854978999-44f2137f-c4ce-44b3-8385-8692fe8ca78e.png#averageHue=%23f6e9e9&amp;clientId=u6767378f-df7a-4&amp;from=paste&amp;height=279&amp;id=u1d5e6449&amp;originHeight=377&amp;originWidth=285&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=26025&amp;status=done&amp;style=none&amp;taskId=ub7c34092-729d-4b92-be65-8547cc71be6&amp;title=&amp;width=211.1111260245377" alt="image.png" /><br />对以上结构，有以下3个原则：<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680855031877-7c28e8c2-258f-4978-88e1-e604953ce663.png#averageHue=%23f2eded&amp;clientId=u6767378f-df7a-4&amp;from=paste&amp;height=289&amp;id=u215ce5c0&amp;originHeight=390&amp;originWidth=836&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=83767&amp;status=done&amp;style=none&amp;taskId=u4abd5b0b-13cb-475d-aed1-30fd03f5911&amp;title=&amp;width=619.2593030053106" alt="image.png" /></p><h2 id="11-进入临界区的算法"><a class="markdownIt-Anchor" href="#11-进入临界区的算法"></a> 11） 进入临界区的算法</h2><h3 id="1-轮转法turn"><a class="markdownIt-Anchor" href="#1-轮转法turn"></a> 1. 轮转法（turn）</h3><p>通过一个变量，实现互斥关系<br />这个方法存在的问题在于，如果P0进入临界区并退出后，P1一直得不到调度，而P0也因为设置了turn =1 而无法进入临界区，不满足有空让进<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680855160379-da90abc0-7147-4cad-bf6c-d7c60b6e9613.png#averageHue=%23f8f1f0&amp;clientId=u6767378f-df7a-4&amp;from=paste&amp;height=319&amp;id=udcad4510&amp;originHeight=431&amp;originWidth=1041&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=70536&amp;status=done&amp;style=none&amp;taskId=u670b0f0f-5a20-42c3-9d20-0cdbd445a37&amp;title=&amp;width=771.111165584364" alt="image.png" /></p><h3 id="2-标记法flag"><a class="markdownIt-Anchor" href="#2-标记法flag"></a> 2. 标记法（flag）</h3><p>为每个进程分配一个标记，在进入区通过检测其它进程的标签检测是否有其它进程想进入临界区，如果没有，则进入临界区<br />这个方法的问题在于，如果P0执行完<code>flag[0] = true</code>语句后阻塞，调度到P1，那么此时<code>flag[0]</code>，<code>flag[1]</code>都是true，将没有进程能进入临界区<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680855617196-fdfa0fb0-eaba-4e8f-9745-6db699e43403.png#averageHue=%23f8eae9&amp;clientId=u6767378f-df7a-4&amp;from=paste&amp;height=207&amp;id=uae85fbef&amp;originHeight=279&amp;originWidth=618&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=38023&amp;status=done&amp;style=none&amp;taskId=u8e88a127-5043-4889-8c62-dce7625dd64&amp;title=&amp;width=457.7778101163659" alt="image.png" /></p><h3 id="3-peterson算法"><a class="markdownIt-Anchor" href="#3-peterson算法"></a> 3. Peterson算法</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680856149033-907e54dc-f8ce-4474-a59c-dbd347fd0343.png#averageHue=%23f8efee&amp;clientId=u6767378f-df7a-4&amp;from=paste&amp;height=232&amp;id=ua4fa1424&amp;originHeight=313&amp;originWidth=649&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=43008&amp;status=done&amp;style=none&amp;taskId=u4841bcde-9552-48a1-a957-a01e60a4be8&amp;title=&amp;width=480.7407747014911" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680856159533-867992d1-0d33-490f-8fad-222d5d8d6aba.png#averageHue=%23f2edec&amp;clientId=u6767378f-df7a-4&amp;from=paste&amp;height=294&amp;id=u5b1dae6b&amp;originHeight=397&amp;originWidth=684&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=77896&amp;status=done&amp;style=none&amp;taskId=u2dea53d7-2275-4aab-a4e3-bcbf9002d79&amp;title=&amp;width=506.6667024588904" alt="image.png" /></p><h3 id="4-多个进程-面包店算法"><a class="markdownIt-Anchor" href="#4-多个进程-面包店算法"></a> 4. 多个进程: 面包店算法</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680856366280-fd3b9a5b-e246-4343-a60f-d7f7a2978831.png#averageHue=%23f5edec&amp;clientId=u6767378f-df7a-4&amp;from=paste&amp;height=344&amp;id=udecc0270&amp;originHeight=464&amp;originWidth=894&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=116493&amp;status=done&amp;style=none&amp;taskId=u04e5207f-1c1e-4970-81a4-3896501db99&amp;title=&amp;width=662.2222690032867" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680856387886-e8c833ec-d303-49ae-99e4-39d1c606524b.png#averageHue=%23f3efee&amp;clientId=u6767378f-df7a-4&amp;from=paste&amp;height=355&amp;id=u205f73b9&amp;originHeight=479&amp;originWidth=896&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=120827&amp;status=done&amp;style=none&amp;taskId=udced6d6c-e699-4897-ad0a-9409d5d2e0d&amp;title=&amp;width=663.7037505894237" alt="image.png" /></p><h3 id="5-硬件方法-关中断开中断"><a class="markdownIt-Anchor" href="#5-硬件方法-关中断开中断"></a> 5. 硬件方法: 关中断，开中断</h3><p><code>cli()</code>置标志寄存器的IF位为0，CPU不响应可屏蔽中断（时钟中断属于可屏蔽中断），即关中断。<code>sli()</code>置标志寄存器的IF位为1，CPU响应可屏蔽中断。这样保证了在执行临界区代码时，进程不会因为时间片用完了而调度，间接实现了原子操作<br />但由于多核CPU有多个处理器，而进程执行<code>cli</code>和<code>sti</code>只能影响正在执行它的核，而不能保证其它处理器是不响应可屏蔽中断的状态，因此其它核可能执行会进入临界区的进程，引发信号量错误<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680856563656-aa4318ea-0c8d-45a4-9753-87e236b04bf2.png#averageHue=%23f2efef&amp;clientId=u6767378f-df7a-4&amp;from=paste&amp;height=342&amp;id=ufaae01b5&amp;originHeight=462&amp;originWidth=738&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=72791&amp;status=done&amp;style=none&amp;taskId=u47c77998-72d3-4371-926f-d15ea407206&amp;title=&amp;width=546.6667052845924" alt="image.png" /></p><h3 id="6-原子指令法"><a class="markdownIt-Anchor" href="#6-原子指令法"></a> 6. 原子指令法</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1680857380086-507b76b9-5370-487d-9bf8-f1e04cba970e.png#averageHue=%23f5eeee&amp;clientId=u6767378f-df7a-4&amp;from=paste&amp;height=310&amp;id=ubc77b899&amp;originHeight=419&amp;originWidth=959&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=69348&amp;status=done&amp;style=none&amp;taskId=u962ec5d0-2583-421b-bdc1-b85d059d07d&amp;title=&amp;width=710.3704205527426" alt="image.png" /></p><h2 id="12-sleep_on中隐藏的队列"><a class="markdownIt-Anchor" href="#12-sleep_on中隐藏的队列"></a> 12) sleep_on中隐藏的队列</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sleep_on</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>init_task<span class="token punctuation">.</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"task[0] trying to sleep"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tmp <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token operator">*</span>p <span class="token operator">=</span> current<span class="token punctuation">;</span>    current<span class="token operator">-></span>state <span class="token operator">=</span> TASK_UNINTERRUPTIBLE<span class="token punctuation">;</span>    <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>        tmp<span class="token operator">-></span>state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>队列就隐藏在这两条语句中：<code>tmp = *p;</code> <code>*p=current</code><br />这条语句让<code>p</code>指向的指针(图中用空白方块表示) 指向 当前进程的PCB <code>current</code>，而让一个临时变量<code>tmp</code>指向原队列中的队首PCB，<code>tmp</code>存储在当前进程的内核栈中，因此在执行这个进程时，可以通过tmp找到等待队列的下一个进程，而在“下一个进程”的内核栈中也有一个临时变量<code>tmp</code>指向“下下个进程”，因此这个队列通过每个进程中的tmp链接起来了<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681116848040-221326dc-fb8b-411b-aef6-2b4144397f30.png#averageHue=%23f5f2f2&amp;clientId=ua8eeb11c-afac-4&amp;from=paste&amp;height=404&amp;id=u1f2078b0&amp;originHeight=546&amp;originWidth=970&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=81387&amp;status=done&amp;style=none&amp;taskId=u649590b8-838f-4d2e-9d14-ad4c734c86a&amp;title=&amp;width=718.5185692764967" alt="image.png" /><br />当进程被重新唤醒后，进程从上次停下的地方即sleep_on函数中的<code>schedule</code>语句之后继续执行，因此执行的是</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>        tmp<span class="token operator">-></span>state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//  唤醒下一个进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果存在这样一种调度顺序，即唤醒下一个进程后，CPU就调度到下一个进程，那么被唤醒的进程就将不断的唤醒等待队列中的下一个进程，直至唤醒所有进程，然后由schdule函数决定调度谁。这样做对等待同一信号量的多个进程来说，就不只是先来先执行了，而是优先级高的执行（结合P操作中的<code>while</code>语句(而不是常规的<code>if</code>语句)）</p><h1 id="4-内存管理"><a class="markdownIt-Anchor" href="#4-内存管理"></a> 4. 内存管理</h1><h2 id="1-进程载入内存-运行时重定位"><a class="markdownIt-Anchor" href="#1-进程载入内存-运行时重定位"></a> 1) 进程载入内存: 运行时重定位</h2><p>运行时重定位，也就是常说的动态重定位，下面以一个例子来讲述<br />假设进程中有一个函数调用指令<code>call 0x40</code>(假设该语句在段的起始位置)，该语句的目标地址是<code>0x40</code>（即相对于段的偏移量是<code>0x40</code>），当进程被载入内存的空闲区域后，<code>call 0x40</code>位于地址<code>0x1000</code>，那么实际上该该语句要跳转的目标在地址<code>0x1040</code>处，但是如果没有地址转换机制，CPU在<code>call 0x40</code>时只会跳转到<code>0x40</code>处，这将产生错误。因此我们需要有一种在执行语句时(即程序执行时)能够进行地址转换的机制。<br />运行时重定位就是这样一种机制，操作系统在进程载入内存时，记下它在内存中的起始地址（即基地址，在这个例子中是<code>0x1000</code>）放入进程的PCB中。当调度到这个进程时，OS将PCB中的基地址写入CPU的基地址寄存器（EBX），在执行进程的指令时，操作系统会将指令中的地址（称逻辑地址）加上基地址寄存器中保存的基地址得到物理地址，并将这个计算得到的物理地址作为目标地址。<br />这里对逻辑地址进行阐述：</p><blockquote><p>进程的逻辑地址就是将其看作从 0 开始的一段程序。每个进程在其逻辑地址空间中都有自己的“私有”视图，包括代码、数据、堆和栈等不同的内存区域。进程在编写和执行时，通常会使用这些逻辑地址来访问内存。<br />逻辑地址的一个优点是它们允许程序员专注于程序本身的逻辑结构，而无需关心底层的物理内存布局。逻辑地址空间为进程提供了一个抽象层，使其看起来就像它是在一个独立的、从 0 开始的内存空间中运行。<br />操作系统负责将这些逻辑地址转换为虚拟地址（如果使用了段表的话），然后再将虚拟地址转换为物理地址。这种地址转换机制使得每个进程都可以在自己的地址空间中独立运行，同时确保它们不会相互干扰或访问其他进程的内存。</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681286267783-a4976422-bba2-4534-8929-3109017f4107.png#averageHue=%23fbf6f5&amp;clientId=u532daffa-b364-4&amp;from=paste&amp;height=324&amp;id=ua60a16dd&amp;originHeight=437&amp;originWidth=1035&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=53121&amp;status=done&amp;style=none&amp;taskId=uce35fcc6-f23f-4d8b-9d72-6ab86733377&amp;title=&amp;width=766.6667208259527" alt="image.png" /></p><h2 id="2-运行时重定位助力进程的交换"><a class="markdownIt-Anchor" href="#2-运行时重定位助力进程的交换"></a> 2) 运行时重定位助力进程的交换</h2><p>当进程阻塞时，操作系统可能会选择将其从内存中换出（swap out），以释放内存资源供其他进程使用。当进程重新成为就绪态并被CPU调度到时，进程需要重新载入内存，那么此时进程所在的内存可能就不是之前的那个内存地址，根据运行时重定位机制，此时进程PCB中关于进程基地址的信息被更新，因此进程换出换入后仍然可以继续正确的执行，而不会发生错误的内存访问。<br />编译时重定位（静态重定位）之所以被淘汰，就是因为它不支持进程换入换出过程中进程地址的变化，进程只能放入内存的固定位置，该机制在程序被编译时根据进程即将载入的位置而修改程序的源码，例如进程将载入内存地址<code>0x1000</code>处（所以该机制还要预留内存，确保这个内存空闲），那么编译器在编译它时，将修改<code>call 0x40</code>为<code>call 0x1040</code>。</p><h2 id="3-进程分段"><a class="markdownIt-Anchor" href="#3-进程分段"></a> 3) 进程分段</h2><p>进程之所以要分段（编译器的任务），是因为不同的程序需要访问的数据和代码具有不同的特点和访问权限，需要分别存储在不同的内存区域中，以便操作系统进行管理和保护。<br />常见的进程内存分段包括代码段、数据段、堆栈段等。</p><blockquote><p>代码段（Code Segment）用于存储程序的可执行代码，包括函数、指令和常量等。代码段通常具有只读权限，即程序在执行过程中无法修改代码段中的内容。这种只读权限可以保证程序执行的安全性，防止程序意外修改自身的代码。<br />数据段（Data Segment）用于存储程序中已经初始化的全局变量、静态变量和常量等。数据段通常具有读写权限，允许程序在执行过程中修改数据段中的数据。由于数据段中的数据通常是程序的重要状态，因此需要进行合理的管理和保护。<br />堆栈段（Heap and Stack Segment）用于存储程序执行时动态分配的内存和函数调用时的局部变量、参数、返回值等。堆和栈通常是分开的，其中堆用于存储动态分配的内存，而栈用于存储函数调用时的临时数据。堆和栈的大小是动态变化的，因此需要进行动态的内存管理和保护。</p></blockquote><p>通过将进程内存分为不同的段，操作系统可以针对不同的段进行不同的内存管理和保护，从而提高程序的安全性和稳定性。<br />同时，进程内存分段还有助于提高内存的利用率，从而提高系统的性能和效率。进程内存分段可以提高内存利用率的原因主要有以下两点：</p><blockquote><ol><li>内存分段可以针对不同类型的数据和代码进行优化存储。例如，代码段通常具有只读权限，因此可以共享一份代码段数据，以便节约内存空间。另外，堆和栈的大小是动态变化的，因此需要进行动态的内存管理和分配，从而提高内存利用率。</li><li>内存分段可以提高内存的可重用性和共享性。不同进程中的相同类型的数据和代码可以共享一份内存空间，从而避免重复分配内存空间，提高内存利用率。例如，操作系统可以将多个进程中相同的动态链接库代码段共享一份内存空间，从而节约内存空间。</li></ol></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681286618260-48ace11a-a757-4e15-ab54-70ad965070eb.png#averageHue=%23f2ecec&amp;clientId=u532daffa-b364-4&amp;from=paste&amp;height=461&amp;id=ub4a24129&amp;originHeight=622&amp;originWidth=1190&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=145741&amp;status=done&amp;style=none&amp;taskId=u12dd3065-0de9-41d9-8224-9872c0a14bd&amp;title=&amp;width=881.4815437515784" alt="image.png" /></p><h2 id="4-进一步认识ldt与gdt"><a class="markdownIt-Anchor" href="#4-进一步认识ldt与gdt"></a> 4) 进一步认识LDT与GDT</h2><p>内存中进程的各段是分离的，而CPU访问指令/数据的方式是&lt;段号，段内偏移&gt;，因此要访问进程中的指令/数据，CPU就需要知道进程各段的起始地址，这个信息就保存在进程的段表中，即LDT (Local Descriptor Table) 。进程在执行指令和访问数据时，先查询LDT获取基地址，进而得到目标地址，再执行操作。<br />这里再详细阐述一下CPU保护模式下用于寻址的段选择子(以CS为例)</p><blockquote><p>CS是在x86架构中的一个寄存器，用于存储CPU当前正在执行的代码段的段选择子。段选择子是一个16位的值，包含了两部分信息：段描述符表中该段描述符的索引值（Index，可以理解为段号），以及一个RPL（Request Privilege Level）字段，用于限制当前进程的访问权限。在执行指令时，CPU会使用CS中存储的段选择子来访问GDT（Global Descriptor Table）或LDT（Local Descriptor Table）中的段描述符，并从中获取当前代码段的基地址和限长等信息，从而计算出代码段中指令的实际物理地址。<br />每当CPU加载一个新的段选择子时，它会将对应的段描述符缓存到GDTR指定的内存区域中。这个缓存区域称为段描述符缓存（Descriptor Cache）。这样，在下一次访问同一个段时，CPU就可以直接从段描述符缓存中获取对应的段描述符，而不需要再次访问GDT。这种缓存机制可以提高内存访问效率，并减少对GDT的访问次数。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682400029833-d5d6235c-1206-40cc-b643-1eb7758733fc.png#averageHue=%231e1c1b&amp;clientId=uedca776e-5cd4-4&amp;from=paste&amp;height=108&amp;id=ua52fd873&amp;originHeight=168&amp;originWidth=835&amp;originalType=binary&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;size=11844&amp;status=done&amp;style=none&amp;taskId=uf0459c76-4ca0-4bd3-880d-0bbbadfdeba&amp;title=&amp;width=534.4" alt="image.png" /><br />段描述符（64bits）是在GDT或LDT中的一个数据结构，用于描述一个内存段的基地址、限长、访问权限等信息。在程序执行过程中，操作系统通过段描述符来管理和保护内存段，从而保证程序的安全性和稳定性。段选择子则是用于访问GDT或LDT中的段描述符的索引值，它的值决定了CPU将访问哪个段描述符。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682398870574-8cc3d1b2-1752-4d08-a31d-1dadfcedcee1.png#averageHue=%23fefefe&amp;clientId=uedca776e-5cd4-4&amp;from=paste&amp;height=193&amp;id=u5fd6f0a4&amp;originHeight=301&amp;originWidth=855&amp;originalType=binary&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;size=38417&amp;status=done&amp;style=none&amp;taskId=u9187c8b5-f8d6-43de-a95f-5148001c969&amp;title=&amp;width=547.2" alt="image.png" /><br />需要注意的是，在x86架构中，一个进程可以使用多个代码段和数据段，每个段都由一个段描述符描述。因此，程序执行过程中需要使用多个段选择子来访问不同的段描述符。除了CS寄存器之外，还有DS（Data Segment）、SS（Stack Segment）、ES（Extra Segment）等寄存器，用于存储访问不同段的段选择子。</p></blockquote><p>LDT是正确执行和访问进程的关键，因此每个进程都维护一个自己的LDT，在进程切换时，LDT表也要随之切换（见lab4）。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681288013658-dd542a09-f8bb-4d95-9570-63770b27c2f1.png#averageHue=%23efece0&amp;clientId=u532daffa-b364-4&amp;from=paste&amp;height=372&amp;id=u99290090&amp;originHeight=502&amp;originWidth=1059&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=94869&amp;status=done&amp;style=none&amp;taskId=u9b91cb07-0f78-47fb-823a-818f73c31bd&amp;title=&amp;width=784.444499859598" alt="image.png" /><br />现在对1)中提到的“进程载入内存时将基地址放入PCB中”进行更正：</p><blockquote><p>在将进程载入内存时，操作系统会初始化该进程的LDT表（也是一个段）并写入该进程的内存空间中，操作系统会将LDT表的段选择子写入该进程的TSS（Task State Segment）中的LDT表寄存器字段中。（将LDT与PCB关联）<br />当该进程被调度执行时，CPU会从该进程的TSS中获取LDTR（LDT Register）中的值，并将其加载到CPU的LDTR中，以便该进程能够正确地访问自己的局部内存段。因此，LDTR的值会从该进程的PCB中获取，并在进程载入内存时被设置。<br />LDT表的存储位置由LDTR中的地址决定。LDTR是一个48位的寄存器，它由一个16位的段选择子和一个32位的线性地址组成。当CPU需要访问LDT表时，它会从LDT表寄存器中读取段选择子，从而确定要访问的LDT表在GDT（Global Descriptor Table）中的位置。然后，<strong>CPU会使用段选择子从GDT中读取LDT表的段描述符，并从中获取LDT表在内存中的起始地址</strong>。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682398573258-ccc1859b-12c8-43fe-a2e8-c483694143a9.png#averageHue=%23f4f4f4&amp;clientId=u769a234d-acee-4&amp;from=paste&amp;height=459&amp;id=ub54cd1ce&amp;originHeight=619&amp;originWidth=908&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=152115&amp;status=done&amp;style=none&amp;taskId=u02a172c4-0c69-45e7-8a97-f56a92f7412&amp;title=&amp;width=672.5926401062463" alt="image.png" /></p></blockquote><p>区别GDT与LDT：</p><blockquote><p>在x86架构中，GDT（Global Descriptor Table）是一个全局的段描述符表，用于存储系统中所有进程和内核所使用的段描述符。而LDT（Local Descriptor Table）表则是每个进程都有自己的局部段描述符表，用于存储进程的局部段描述符。<br />因此，GDT和LDT是两个不同的概念，不应混淆。GDT是系统级的全局段描述符表，用于存储所有进程和内核所使用的段描述符，而LDT是进程级的局部段描述符表，用于存储进程的局部段描述符。<br />具体来说，在x86架构中，每个进程都有自己的LDT表，用于存储进程的局部段描述符。LDT表通常存储在进程的内存空间中，与其他数据和代码一起存储在进程的用户地址空间中。而GDT则是一个全局的段描述符表，用于存储系统中所有进程和内核所使用的段描述符。GDT表通常存储在系统的内存空间中，并由操作系统维护和管理。<br />因此，GDT和LDT是两个不同的概念，GDT是系统级的全局段描述符表，而LDT是进程级的局部段描述符表，它们在作用和范围上是不同的，不能混淆。</p></blockquote><h2 id="5-内存分区-有关进程所需内存"><a class="markdownIt-Anchor" href="#5-内存分区-有关进程所需内存"></a> 5) 内存分区-有关进程所需内存</h2><p>进程的段要载入内存，那么OS就要给进程分配空闲的内存，我们称内存中离散的空闲内存为空闲分区。对整个内存，OS可建立空闲分区表和已分配分区表来管理内存<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681368793105-9f65f2fc-0211-41d7-96fc-e7954b7b9606.png#averageHue=%23f2f1f0&amp;clientId=ue9c59eda-2b52-4&amp;from=paste&amp;height=335&amp;id=uf595539c&amp;originHeight=452&amp;originWidth=883&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=72086&amp;status=done&amp;style=none&amp;taskId=u8ffe5fcc-b426-4c37-82b0-751c60081f6&amp;title=&amp;width=654.0741202795325" alt="image.png" /><br />对进程的段内存请求，OS有多种算法来决定分配从哪个空闲分区分配内存给它，比如首先适配(简单，执行速度快)，最佳适配(会产生内存碎片，空闲分区越来越小)，最差适配(将导致没有特别大的分区)<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681369374810-32f25db0-d08f-4a6c-ac80-48fb6758d56c.png#averageHue=%23f4eeee&amp;clientId=ue9c59eda-2b52-4&amp;from=paste&amp;height=330&amp;id=uc96a1078&amp;originHeight=445&amp;originWidth=857&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=80748&amp;status=done&amp;style=none&amp;taskId=u306b43fa-5c10-4f62-9c3b-205f05a3fd7&amp;title=&amp;width=634.8148596597501" alt="image.png" /><br />这种可变空闲分区机制将导致大量的内存碎片问题，即内存明明还有足够的空闲，但是都是一堆碎片分区，以至于任何一个分区都不足以装下进程的一个段，这造成了内存的浪费。一个自然而然的想法是重新调整内存，将碎片分区整合在一起，但在执行这个内存操作时，进程显然是不能继续执行的，因为它的地址在变化中，这将导致CPU的低效，用户的体验感也不好。因此才有了内存分页的机制<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681369589718-0e92a890-3e8b-4217-aae0-0079d6b89322.png#averageHue=%23efeae9&amp;clientId=ue9c59eda-2b52-4&amp;from=paste&amp;height=365&amp;id=uecbf6577&amp;originHeight=493&amp;originWidth=870&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=117456&amp;status=done&amp;style=none&amp;taskId=u2bd7ff98-e889-445b-af91-a864bd0958c&amp;title=&amp;width=644.4444899696414" alt="image.png" /></p><h2 id="6-内存分页-有关物理内存"><a class="markdownIt-Anchor" href="#6-内存分页-有关物理内存"></a> 6) 内存分页-有关物理内存</h2><p>将内存划分为一个一个大小固定的单位，称之为页（回忆OS的启动部分的<code>mem_init</code>函数，操作系统在启动时就通过<code>mem_map</code>将内存分成一页一页的，通常是4K），内存分页使用离散的、大小固定的页面来为进程分配内存，这将彻底消除内存碎片问题，因为它不存在内存分区那样因为太小而不能分配给进程的问题，因为页的分配可以是离散的（进程的同一个段在内存中可能不连续）。唯一可能产生的内存浪费就是当进程请求的内存空间大小不是页面大小的整数倍，那么最后一页可能会有一些未使用的空间，但这个未使用的空间仅仅只是一个页面内的空闲空间（所以是很小的内存浪费），而不会导致内存碎片的产生（因为已经分配出去了，只是进程没有使用）。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681370329161-5a2abcdc-e6e9-4a40-a3f1-595410fcf892.png#averageHue=%23f2eeee&amp;clientId=ue9c59eda-2b52-4&amp;from=paste&amp;height=236&amp;id=u067aafaf&amp;originHeight=318&amp;originWidth=831&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=61497&amp;status=done&amp;style=none&amp;taskId=ue2a5572f-a9a4-4e6c-8bba-82468749fd5&amp;title=&amp;width=615.5555990399678" alt="image.png" /><br />在内存分页机制下，进程的同一个段（Segment）可能会被分成多个页面（Page）并散布在内存中的不同位置，这意味着进程的同一个段在内存中可能不连续。这种情况发生的原因是，内存分页的单位是页面而不是段，进程的段可能跨越多个页面。我们要引入新的数据结构来实现进程逻辑地址到物理地址的转换。我们要为进程的各段维护一个<strong>页表</strong>(Page Table)，将段的逻辑页号/虚拟页号映射到物理页框号，下面以一个逻辑地址-&gt;物理地址的计算例子展现页表的作用<br />对逻辑地址<code>0x2240</code>（对虚拟地址也是同样的，因为进程的虚拟地址也是一个从0开始的一段内存），我们(MMU)先计算它在段的第几个页号上：<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mn>0</mn><mi>x</mi><mn>2240</mn></mrow><mrow><mn>4</mn><mi>K</mi></mrow></mfrac><mo>=</mo><mn>0</mn><mi>x</mi><mn>2240</mn><mo>≫</mo><mn>12</mn><mo>=</mo><mn>0</mn><mi>x</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">\frac{0x2240}{4K} = 0x2240\gg12 = 0x2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mord mathnormal mtight">x</span><span class="mord mtight">2</span><span class="mord mtight">2</span><span class="mord mtight">4</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">0</span><span class="mord mathnormal">x</span><span class="mord">2</span><span class="mord">2</span><span class="mord">4</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≫</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord mathnormal">x</span><span class="mord">2</span></span></span></span><br />因此该地址在段的第2个页面上，通过查询段的页表，可知段的第2个页面对应的物理页框号为3，所以该逻辑地址对应的实际物理地址为<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mo>∗</mo><mn>4</mn><mi>K</mi><mo>+</mo><mn>0</mn><mi>x</mi><mn>240</mn><mo>=</mo><mn>3</mn><mo>≪</mo><mn>12</mn><mo>+</mo><mn>0</mn><mi>x</mi><mn>240</mn><mo>=</mo><mn>0</mn><mi>x</mi><mn>3240</mn></mrow><annotation encoding="application/x-tex">3*4K + 0x240=3\ll12 +0x240 = 0x3240</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord mathnormal">x</span><span class="mord">2</span><span class="mord">4</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≪</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord mathnormal">x</span><span class="mord">2</span><span class="mord">4</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord mathnormal">x</span><span class="mord">3</span><span class="mord">2</span><span class="mord">4</span><span class="mord">0</span></span></span></span><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681370790461-a15fea41-41c2-4833-8016-e2af29a6f97a.png#averageHue=%23f1ebeb&amp;clientId=ue9c59eda-2b52-4&amp;from=paste&amp;height=464&amp;id=u8d917a50&amp;originHeight=627&amp;originWidth=1195&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=165585&amp;status=done&amp;style=none&amp;taskId=u1caf4ec9-738f-4e69-82d1-30f73d42299&amp;title=&amp;width=885.1852477169211" alt="image.png" /></p><h2 id="7-多级页表-书本的章和节的思想"><a class="markdownIt-Anchor" href="#7-多级页表-书本的章和节的思想"></a> 7) 多级页表-书本的章和节的思想</h2><p>假设一个进程的虚拟地址空间为 4GB（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup></mrow><annotation encoding="application/x-tex">2^{32}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>字节），物理地址空间为 1GB（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>30</mn></msup></mrow><annotation encoding="application/x-tex">2^{30}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span> 字节），页面大小为 4KB（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>12</mn></msup></mrow><annotation encoding="application/x-tex">2^{12}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>字节），那么它的页表项数量将达到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup><mi mathvariant="normal">/</mi><msup><mn>2</mn><mn>12</mn></msup><mo>=</mo><msup><mn>2</mn><mn>20</mn></msup></mrow><annotation encoding="application/x-tex">2^{32} / 2^{12} = 2^{20}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span> 个，需要占用大约 4MB 的内存空间。如果直接使用单级页表来管理进程的地址空间，需要在内存中维护一个包含<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>20</mn></msup></mrow><annotation encoding="application/x-tex">2^{20}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>个页表项的页表。由于页表项数量巨大，而且大部分页表项并不会被频繁使用，这样会导致内存空间的浪费和访问效率的降低。为了解决这个问题，操作系统通常采用多级页表来管理进程的地址空间。多级页表将页表划分为多个级别，每个级别的页表包含一部分页表项。例如，两级页表结构中，第一级页表包含多个页目录项，每个页目录项指向一个第二级页表，第二级页表包含多个页表项。当进程访问某个虚拟地址时，操作系统会首先查询第一级页表，找到对应的页目录项，然后再查询第二级页表，找到对应的页表项，从而确定该虚拟地址对应的物理地址。<br />下面是一个简单的多级页表实例：<br />假设一个进程的虚拟地址空间为 4GB（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup></mrow><annotation encoding="application/x-tex">2^{32}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>字节），物理地址空间为 1GB（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>30</mn></msup></mrow><annotation encoding="application/x-tex">2^{30}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span> 字节），页面大小为 4KB（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>12</mn></msup></mrow><annotation encoding="application/x-tex">2^{12}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>字节），采用两级页表结构。第一级页表包含 1024 个页目录项，每个页目录项大小为 4 字节，第二级页表包含 1024 个页表项，每个页表项大小也为 4 字节。这样，每个页表项对应一个 4KB 的物理页框，每个页目录项指向一个 4MB（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1024</mn><mo>×</mo><mn>4</mn><mi>K</mi><mi>B</mi><mo>=</mo><mn>4</mn><mi>M</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">1024\times4KB = 4MB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">2</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>） 的虚拟地址空间。<br />当进程访问一个虚拟地址 0x12345678 (在这之前，根据段表，将指令中的地址转换为虚拟地址) 时，需要将该虚拟地址转换为对应的物理地址。首先，操作系统根据虚拟地址的高 10 位（0x12345，即除以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>22</mn></msup></mrow><annotation encoding="application/x-tex">2^{22}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>或地址右移22位 以确定在哪个页目录项）查询第一级页表，找到对应的页目录项。假设该页目录项对应的第二级页表的物理地址为 0x12340000。然后，操作系统根据虚拟地址的中间 10 位（0x6）查询第二级页表，找到对应的页表项。假设该页表项对应的物理页框的物理地址为 0x56780000。最终，操作系统将虚拟地址 0x12345678 映射到物理地址 0x56785678，这个物理地址是进程所使用的实际物理地址，可以用于实际的内存访问操作。<br />在上面的例子中，使用两级页表可以将每个页表的大小降低到 8KB（一级4KB+二级4KB*1），而不是使用单级页表时需要的 4MB。这样可以降低页表的访问开销和内存空间的浪费，提高系统的内存利用率和性能。多级页表的级数可以根据需要进行调整，以适应不同的内存管理需求和硬件环境。<br />页目录表和二级页表都在内存中，页目录项并不是始终被填满的。在使用分页机制的情况下，页目录项和页表项只会在需要时才会被填充。当进程访问一个新的虚拟地址时，如果对应的页目录项或页表项不存在，则操作系统会通过<strong>缺页异常</strong>等方式将其填充到内存中。因此，<strong>只有进程实际使用的虚拟地址才会被映射到物理地址，而未使用的虚拟地址则不会被映射到物理地址，也就不会占用额外的内存空间</strong>。这种按需分配的方式可以有效地节省内存空间，提高系统的内存利用率。因此实际上所有页表(一级页表+二级页表)在内存占的内空间为<strong>一级页表4KB+二级页表4KB*有效页目录项个数</strong> ，比如下图，使用了两个页目录项，因此页表总内存为<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn><mi>K</mi><mi>B</mi><mo>+</mo><mn>4</mn><mi>K</mi><mi>B</mi><mo>×</mo><mn>3</mn><mo>=</mo><mn>16</mn><mi>K</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">4KB+4KB\times3=16KB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681806352474-b89bb6ea-1ce0-4cee-99c4-a60493f8bc1c.png#averageHue=%23efebeb&amp;clientId=uc519f267-9b48-4&amp;from=paste&amp;height=529&amp;id=u6ab08e6f&amp;originHeight=714&amp;originWidth=1393&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=147317&amp;status=done&amp;style=none&amp;taskId=u39ff4abd-b890-43f7-b1d9-c2d5da2e63f&amp;title=&amp;width=1031.8519247444947" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682401860312-ab6ca334-67b4-4fc9-a5b0-04aa69e89aeb.png#averageHue=%23f8f8f8&amp;clientId=u89dd6b17-3ab8-4&amp;from=paste&amp;height=267&amp;id=u7f01b97a&amp;originHeight=284&amp;originWidth=714&amp;originalType=binary&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;size=43640&amp;status=done&amp;style=none&amp;taskId=u4e0d810c-e6ba-4bd6-b189-d92ba244812&amp;title=&amp;width=670.9599609375" alt="image.png" /></p><h2 id="8-tlb一种缓存"><a class="markdownIt-Anchor" href="#8-tlb一种缓存"></a> 8) TLB：一种缓存</h2><p>可以将TLB（Translation Lookaside Buffer）视为一种缓存，但它不是用于缓存数据的Cache，而是用于缓存虚拟地址到物理地址的转换结果，这样CPU就可以避免多次访问内存中的多级页表，从而提高访问速度。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681804022098-b23524a9-c062-43d9-9408-508bcf3e0666.png#averageHue=%23f0e8e7&amp;clientId=uc519f267-9b48-4&amp;from=paste&amp;height=339&amp;id=uf0ac1b6f&amp;originHeight=457&amp;originWidth=886&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=75691&amp;status=done&amp;style=none&amp;taskId=ua606c689-a626-4dc2-9cf8-097e8352f2b&amp;title=&amp;width=656.2963426587382" alt="image.png" /></p><h2 id="9-虚拟内存段页结合"><a class="markdownIt-Anchor" href="#9-虚拟内存段页结合"></a> 9) 虚拟内存：段页结合</h2><p>这里引入了虚拟地址空间的概念</p><blockquote><p>进程的虚拟地址空间是指进程可以使用的虚拟地址的范围。在使用分页机制的情况下，进程的虚拟地址空间通常被划分为多个页，每个页的大小为固定的值，例如4KB或2MB。进程的虚拟地址空间通常包括代码段、数据段、堆、栈等不同的区域，每个区域都有自己的起始地址和大小。操作系统会通过段表或页表将进程的逻辑地址映射到实际的物理地址，从而让进程可以访问到内存中的数据和指令。<br />操作系统负责管理页表，它为每个进程维护一个独立的页表。当进程被创建时，操作系统会为它分配一块虚拟地址空间，并为这个进程创建一个页表。操作系统还会将页表中的一些页表项设置为无效，这些页表项对应的虚拟页面还没有被分配物理内存。当进程访问这些无效的虚拟页面时，操作系统会触发一个缺页异常，然后根据需要为这个虚拟页面分配物理内存并更新页表。这个过程被称为页面调度。<br />进程的虚拟地址空间可以保证每个进程都有自己独立的地址空间，互不干扰，同时也可以避免不同进程之间的内存冲突和竞争。</p></blockquote><p>进程有独立的虚拟地址空间（包括虚拟页号），在执行访存指令时，有以下的地址转换:<br />逻辑地址(指令中的地址) <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover><mo stretchy="true">→</mo><mpadded width="+0.6em" lspace="0.3em"><mtext>段表</mtext></mpadded></mover></mrow><annotation encoding="application/x-tex">\xrightarrow{段表}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1113309999999998em;vertical-align:-0.010999999999999899em;"></span><span class="mrel x-arrow"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.100331em;"><span style="top:-3.322em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight x-arrow-pad"><span class="mord mtight"><span class="mord cjk_fallback mtight">段</span><span class="mord cjk_fallback mtight">表</span></span></span></span><span class="svg-align" style="top:-2.689em;"><span class="pstrut" style="height:2.7em;"></span><span class="hide-tail" style="height:0.522em;min-width:1.469em;"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.010999999999999899em;"><span></span></span></span></span></span></span></span></span>虚拟地址<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover><mo stretchy="true">→</mo><mpadded width="+0.6em" lspace="0.3em"><mtext>页表</mtext></mpadded></mover></mrow><annotation encoding="application/x-tex">\xrightarrow{页表}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1113309999999998em;vertical-align:-0.010999999999999899em;"></span><span class="mrel x-arrow"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.100331em;"><span style="top:-3.322em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight x-arrow-pad"><span class="mord mtight"><span class="mord cjk_fallback mtight">页</span><span class="mord cjk_fallback mtight">表</span></span></span></span><span class="svg-align" style="top:-2.689em;"><span class="pstrut" style="height:2.7em;"></span><span class="hide-tail" style="height:0.522em;min-width:1.469em;"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.010999999999999899em;"><span></span></span></span></span></span></span></span></span>物理地址<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681380025170-52b97869-301f-4ed0-a43a-84bc82cd6dda.png#averageHue=%23f5efee&amp;clientId=u78e5fe0f-3b1e-4&amp;from=paste&amp;height=413&amp;id=waG4c&amp;originHeight=557&amp;originWidth=1180&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=145326&amp;status=done&amp;style=none&amp;taskId=ub95aa704-d632-49b6-941a-8064428db7f&amp;title=&amp;width=874.0741358208929" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681894523259-def0a3c9-ba97-4509-aaa7-eb9de0d4a30b.png#averageHue=%23f0eeec&amp;clientId=uab5d1261-56f5-4&amp;from=paste&amp;height=375&amp;id=u00a99f11&amp;originHeight=506&amp;originWidth=1012&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=171074&amp;status=done&amp;style=none&amp;taskId=u296c468d-7b50-45b7-85d7-64642ac187d&amp;title=&amp;width=749.6296825853759" alt="image.png" /></p><h2 id="10-copy_mem函数创建子进程页表"><a class="markdownIt-Anchor" href="#10-copy_mem函数创建子进程页表"></a> 10) copy_mem函数创建子进程页表</h2><p><code>copy_mem</code>用于在创建子进程的过程中被<code>copy_process</code>调用，该函数做了以下3件事</p><ol><li>为子进程分配虚拟内存，创建子进程的段表（LDT），可以看出linux0.11毕竟是早期的版本，不能保证进程的虚拟地址从0开始，而是根据进程号划分</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681893895222-f623bc96-ec7f-4f63-a885-b52736294be9.png#averageHue=%23f9f6f4&amp;clientId=uab5d1261-56f5-4&amp;from=paste&amp;height=150&amp;id=u532d1e4f&amp;originHeight=202&amp;originWidth=1626&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=97121&amp;status=done&amp;style=none&amp;taskId=u15c920cf-22a0-4135-9968-b474b6199d6&amp;title=&amp;width=1204.4445295294677" alt="image.png" /></p><ol start="2"><li>复制父进程的页目录表和二级页表</li></ol><p>子进程和父进程共用物理内存页，但是各自要有独立的页表，因此子进程复制父进程的页表作为自己的页表<br />这里调用了<code>copy_page_tables</code>函数，该函数以父进程段基址和子进程段基址为参数，在Linux 0.11中，通过将段基址右移 22 位，可以得到页目录表的索引。接着，将这个索引乘以页表项大小（4字节）再加上页目录表的线性基地址（0xffc00000），就可以计算出页目录项的线性地址。然后，根据这个线性地址，我们可以找到对应的页表基址。<br />这里补充一下页目录表基址与CR3寄存器</p><blockquote><p>操作系统为每个进程设置了一个独立的页目录表，以管理进程的虚拟内存。每个进程的页目录表在物理内存中具有不同的位置，但为了简化内存管理和地址转换，操作系统将当前运行进程的页目录表映射到线性地址（虚拟地址） 0xffc00000。这样做的目的是在处理当前进程的虚拟地址时，可以方便地访问其页目录表。<br />为实现这一目标，操作系统在切换进程时会执行以下操作：</p><ol><li>操作系统将新进程的页目录表物理基地址加载到 CR3 寄存器中。CR3 寄存器用于告诉内存管理单元（MMU）当前活动的页目录表的物理基地址。</li><li>操作系统将当前运行进程的页目录表映射到线性地址（虚拟地址） 0xffc00000。这意味着操作系统会在页目录表中设置一个特殊的页目录项，将页目录表在虚拟内存中的基址设置为0xffc00000。这样，无论当前运行的是哪个进程，操作系统都可以通过这个固定的线性地址访问其页目录表，实际的物理基地址保存在CR3寄存器中。</li></ol></blockquote><p>通过这种方式，操作系统能够在逻辑层面统一访问当前运行进程的页目录表，简化了地址转换和内存管理过程。</p><p>在函数中遍历父进程的页目录项，同时为子进程的页目录项申请一页内存来保存对应的二级页表。并在这个新申请的二级页表中，原封不动的拷贝父进程对应的那个二级页表<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681895198720-c8ddd067-1453-4bcd-a541-943a47b41cc3.png#averageHue=%23f1e9e8&amp;clientId=uab5d1261-56f5-4&amp;from=paste&amp;height=259&amp;id=ub9af594e&amp;originHeight=349&amp;originWidth=727&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=true&amp;size=70501&amp;status=done&amp;style=none&amp;taskId=u75a2971a-84c9-4cc6-9625-5780295209f&amp;title=%E5%BE%97%E5%88%B0%E9%A1%B5%E7%9B%AE%E5%BD%95%E9%A1%B9%E7%9A%84%E7%B4%A2%E5%BC%95&amp;width=538.5185565608382" alt="得到页目录项的索引" title="得到页目录项的索引" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681896989813-9cdbb566-8f49-4992-9b9c-ffe1a3bc7e09.png#averageHue=%23f9f7f4&amp;clientId=uab5d1261-56f5-4&amp;from=paste&amp;height=35&amp;id=u594857b9&amp;originHeight=47&amp;originWidth=913&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=true&amp;size=18965&amp;status=done&amp;style=none&amp;taskId=u75c6cdc9-31f6-4935-88d7-8a1b69e1767&amp;title=%E5%BE%97%E5%88%B0%E6%8C%87%E5%90%91%E4%BA%8C%E7%BA%A7%E9%A1%B5%E8%A1%A8%E7%9A%84%E6%8C%87%E9%92%88&amp;width=676.2963440715891" alt="得到指向二级页表的指针" title="得到指向二级页表的指针" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681897114853-8ccb4da8-361d-4b3e-8472-7672f4fcd994.png#averageHue=%23f3e6e4&amp;clientId=uab5d1261-56f5-4&amp;from=paste&amp;height=50&amp;id=uf4d27c4b&amp;originHeight=67&amp;originWidth=674&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=true&amp;size=15296&amp;status=done&amp;style=none&amp;taskId=ua809aa03-0539-44f5-97af-18b0796ea70&amp;title=%E4%B8%BA%E5%AD%90%E8%BF%9B%E7%A8%8B%E5%88%86%E9%85%8D%E4%BA%8C%E7%BA%A7%E9%A1%B5%E8%A1%A8&amp;width=499.2592945282049" alt="为子进程分配二级页表" title="为子进程分配二级页表" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681897179067-88f44c50-6e9a-4dff-ab32-019ecdbbd6a6.png#averageHue=%23f5eeed&amp;clientId=uab5d1261-56f5-4&amp;from=paste&amp;height=313&amp;id=u988fbc1c&amp;originHeight=423&amp;originWidth=1059&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=true&amp;size=83332&amp;status=done&amp;style=none&amp;taskId=u8f5e6b00-1afb-49ac-99e0-82081c35f21&amp;title=%E5%AD%90%E8%BF%9B%E7%A8%8B%E5%A4%8D%E5%88%B6%E7%88%B6%E8%BF%9B%E7%A8%8B%E7%9A%84%E4%BA%8C%E7%BA%A7%E9%A1%B5%E8%A1%A8&amp;width=784.444499859598" alt="子进程复制父进程的二级页表" title="子进程复制父进程的二级页表" /><br />通过<code>copy_mem</code>函数，子进程就拥有了自己的页表，并且指向和父进程同样的物理内存页(被标记为已读)，此时还未实现父子进程的内存分离<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681898159545-63072f67-2693-4031-a95d-a604c18b6f2a.png#averageHue=%239ac903&amp;clientId=uab5d1261-56f5-4&amp;from=paste&amp;height=496&amp;id=uddbb4c23&amp;originHeight=670&amp;originWidth=997&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=73918&amp;status=done&amp;style=none&amp;taskId=u829bdce5-00e9-4e65-8e0b-5aaa0779da5&amp;title=&amp;width=738.5185706893476" alt="image.png" /><br />当子进程想往内存中某个地址写入数据时，因为原内存页被设置为只读，而且要保证子进程和父进程的内存分离，因此OS为子进程想要写入的地址分配新的物理内存页，并修改子进程的页表，这就是写时复制</p><blockquote><p>写时复制：当父进程或子进程需要修改信息时，内核会为它们分配新的内存空间，而不是在原来的内存空间中进行修改<br />在使用写时复制（Copy-on-Write，简称 COW）机制时，父子进程在一开始并不会为自己分配独立的内存空间，而是共享相同的物理内存页面。此时，这些共享的物理内存页面会被设置为只读。当父进程或子进程试图修改这些共享页面时，会触发一个缺页异常。<br />当操作系统捕获到这个缺页异常时，它会检查异常原因。如果是因为试图写入只读页面，操作系统会采取以下操作：</p><ol><li>为引发异常的进程分配一个新的物理内存页面。</li><li>将原来共享的只读页面的内容复制到新分配的物理内存页面中。</li><li>更新引发异常的进程的页表，将对应的虚拟地址映射到新分配的物理内存页面。</li><li>将新分配的物理内存页面设置为可写。</li></ol></blockquote><p>这样，引发异常的进程现在有了一个可写的内存页面，包含原先共享页面的内容。而原来的只读共享页面仍然保留在内存中，供其他进程（例如父进程或其他共享该页面的子进程）使用。当没有进程再使用这个只读页面时，操作系统会将其回收并释放相应的物理内存空间。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681898704820-ce2afae5-3aa9-4ad4-aaf9-cc3fd5246adb.png#averageHue=%23f5eeed&amp;clientId=uab5d1261-56f5-4&amp;from=paste&amp;height=453&amp;id=u84640af2&amp;originHeight=612&amp;originWidth=1205&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=true&amp;size=132647&amp;status=done&amp;style=none&amp;taskId=u9a0b43bb-743b-4319-a8cf-fea455713d4&amp;title=%E9%87%8D%E6%96%B0%E4%B8%BA%E5%AD%90%E8%BF%9B%E7%A8%8B%E5%88%86%E9%85%8D%E7%89%A9%E7%90%86%E9%A1%B58&amp;width=892.5926556476068" alt="重新为子进程分配物理页8" title="重新为子进程分配物理页8" /></p><h2 id="11-内存换入"><a class="markdownIt-Anchor" href="#11-内存换入"></a> 11) 内存换入</h2><ol><li>存在的原因</li></ol><p>因为进程的虚拟内存大于实际的物理内存，因此将进程只当前使用到的数据/代码页从磁盘换入内存，该机制支撑着虚拟内存机制。</p><blockquote><p>内存换入（paging in）是操作系统的内存管理策略，通过将磁盘上的数据或代码页换入物理内存，使得进程能够访问所需的资源。这种策略的主要优点是提高了内存利用效率，允许多个进程共享有限的物理内存资源。<br />由于进程的虚拟内存通常大于实际的物理内存，操作系统需要在磁盘上存储这些虚拟内存页面。当进程需要访问某个虚拟内存页面时，操作系统会检查该页面是否已经在物理内存中。如果页面不在物理内存中，操作系统会将其从磁盘换入物理内存。</p></blockquote><p>因此进程的虚拟页一开始并没有映射到物理页，只有在请求了该虚拟页后，OS才会将它换入内存物理页并将它与虚拟页映射，这种技术可以提高系统的可用内存<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681904364279-9fec4f48-846a-48bd-8d9f-2f0d8dc0e57f.png#averageHue=%23f0e9e9&amp;clientId=uf8827497-00d9-4&amp;from=paste&amp;height=405&amp;id=u50f30902&amp;originHeight=547&amp;originWidth=989&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=90966&amp;status=done&amp;style=none&amp;taskId=u368dcba5-37c6-45ac-a0ea-186a37acc74&amp;title=&amp;width=732.5926443447992" alt="image.png" /></p><ol start="2"><li>缺页中断</li></ol><p>当进程尝试访问一个不在物理内存中的虚拟地址时，会触发缺页中断。缺页中断是一种硬件中断，用于通知操作系统进程试图访问一个不在物理内存中的虚拟页面。<br />操作系统接收到缺页中断时，它会执行以下操作：</p><ol><li>确定引发缺页中断的虚拟地址（放入<code>cr2</code>寄存器）和相应的虚拟页面。</li><li>检查该虚拟页面是否已经在磁盘上存储（例如，存储在交换分区或文件映射中）。如果是，则进行内存换入操作，将虚拟页面从磁盘加载到物理内存中。</li><li>更新进程的页表，将虚拟地址映射到新加载的物理内存页面。</li><li>恢复进程的执行，使其能够访问所需的虚拟页面</li></ol><p>请注意，这里的内存换入操作可能会导致其他物理内存页面被换出（如果没有空闲页），以便为新换入的页面腾出空间。操作系统会根据内存管理策略（如 LRU 算法）选择一个合适的页面进行换出。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681905226623-0b1db3aa-a280-4a62-a692-0b115d2002c6.png#averageHue=%23f3efee&amp;clientId=uf8827497-00d9-4&amp;from=paste&amp;height=437&amp;id=ub2a7b744&amp;originHeight=590&amp;originWidth=961&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=125251&amp;status=done&amp;style=none&amp;taskId=u4951430e-6d64-4de2-9989-c7788436af4&amp;title=&amp;width=711.8519021388797" alt="image.png" /></p><ol start="3"><li>缺页中断的代码实现</li></ol><p>缺页中断处理程序<code>_page_fault</code>的主体是调用的<code>_do_no_page</code>函数，它完成3三件事</p><ol><li>确定虚拟页号</li><li>申请物理内存页，将虚拟页放入物理内存页</li><li>修改页表（建立映射）</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681906322702-0077bd6f-e749-4f4a-ab6a-a4443c317dc7.png#averageHue=%23f3eeec&amp;clientId=uf8827497-00d9-4&amp;from=paste&amp;height=382&amp;id=u59924dab&amp;originHeight=516&amp;originWidth=1600&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=216872&amp;status=done&amp;style=none&amp;taskId=u180233e6-4fd9-491d-aec0-98f927e6e6f&amp;title=&amp;width=1185.1852689096852" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681906515416-bfc3746a-857f-4318-89dc-74259393b972.png#averageHue=%23f6f2f2&amp;clientId=uf8827497-00d9-4&amp;from=paste&amp;height=383&amp;id=u6ab33f43&amp;originHeight=714&amp;originWidth=1431&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=174331&amp;status=done&amp;style=none&amp;taskId=u15a055ac-97de-4c28-9a63-8ff428ff33c&amp;title=&amp;width=768" alt="image.png" /></p><h2 id="12-内存换出"><a class="markdownIt-Anchor" href="#12-内存换出"></a> 12) 内存换出</h2><p>在前一节内存换入已经提到，当物理内存已满时，内存换入之前应该先进行内存换出，将一页淘汰以腾出空闲页，那么选择哪一页淘汰就是内存换出的核心问题，这里主要讲3个算法，用缺页次数评价算法优劣</p><ol><li>FIFO</li></ol><p>这个算法的主要问题在于，可能刚刚换出的内存页，下一次就要换入，增加了磁盘读写次数，耗时高<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1681908460738-97f77e96-0627-4058-bc53-411f9f99b01b.png#averageHue=%23eceae3&amp;clientId=uf8827497-00d9-4&amp;from=paste&amp;height=261&amp;id=u424f0e35&amp;originHeight=353&amp;originWidth=744&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=46688&amp;status=done&amp;style=none&amp;taskId=u6cf83c3c-145a-4fe3-aca0-764936f0193&amp;title=&amp;width=551.1111500430037" alt="image.png" /></p><ol start="2"><li>LRU</li></ol><p>LRU算法的全称是“Least Recently Used”，即最近最少使用算法。LRU算法利用了<strong>局部性原理</strong>，将最近最少使用的页面置换出去，以便为新的页面腾出空间。这样可以提高页面命中率，减少缺页中断，从而提高系统的性能。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682241878660-660f63be-2e6f-44c6-b51f-0b5dfb07f9a6.png#averageHue=%23e8e2e1&amp;clientId=u4f3267fb-06f0-4&amp;from=paste&amp;height=364&amp;id=u2a97ffaf&amp;originHeight=517&amp;originWidth=985&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=118959&amp;status=done&amp;style=none&amp;taskId=u2d4a4596-a90b-48ea-aeb1-52ad5dd7f01&amp;title=&amp;width=692.629638671875" alt="image.png" /></p><ol start="3"><li>clock</li></ol><p>Clock算法是一种用于操作系统页面置换的<strong>近似最近最少使用（LRU）算法</strong>。由于实际实现真正的LRU算法需要较高的计算和维护成本(修改页面时要将它设置为正确的时间戳)，Clock算法被设计为一种相对简单且高效的替代方案。Clock算法的主要思想是模拟一个循环队列（类似时钟指针），在其中记录物理内存页面的访问情况<br />相比于LRU要维护一个复杂的数据结构，Clock算法为在每个页面条目中添加一个访问位，机制如下图<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682255082791-f830b2ee-6ac7-4e31-b0ca-c8955d882288.png#averageHue=%23efeceb&amp;clientId=ud47e01c8-8521-4&amp;from=paste&amp;height=418&amp;id=u49d104e0&amp;originHeight=564&amp;originWidth=1014&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=141284&amp;status=done&amp;style=none&amp;taskId=uc44192c1-7051-493e-b81a-157589cf13c&amp;title=&amp;width=751.111164171513" alt="image.png" /><br />具体来说，如果相对于一个R=0的页面（该页面在上一次时钟相遇时R从1置为0），时钟走完一圈回到该页面时，该页面访问位还是0，则说明该页面一圈的时间内(最近的时间)未被访问过，因此选择该页换出。<br />到现在，Clock还只有一个指针，那么引出第二个指针的目的，就在于定时的将页面的访问位置0，该指针遍历速度要更快，原因在于当缺页很少时，页面均是R=1,因此按照我们之前的说法，clock算法是将一圈R=1的页面置为0，然后换出为起点的页面，该算法退化为了FIFO算法，而且还有另外一种可能，页面被置0后被访问，可能导致页面永远不会被换出</p><blockquote><p>在Clock算法中，定期清除访问位（R位）是为了防止一些页面的访问位一直保持为1，导致它们永远不会被置换。如果不定期清除访问位，那么一些频繁访问的页面的访问位会始终保持为1，这将导致它们在页面置换过程中永远不会被选中。<br />通过定期清除访问位，Clock算法可以确保每个页面都有被置换的可能性。当访问位被清除时，页面的“优先级”被重置，这样算法在下一次页面置换时将重新考虑所有页面。这有助于Clock算法更好地平衡内存资源，使得所有页面都有被换出的机会。<br />定期清除访问位的策略可以根据系统的需求和实际情况进行调整。在一些情况下，可能会选择在每次页面置换时清除一定数量的访问位；在其他情况下，可能会设置一个定时器，在固定时间间隔后清除所有访问位。具体的策略取决于系统的性能需求和资源限制。</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682257644523-8676fe43-fa47-4275-a574-9298e172cfb9.png#averageHue=%23f1eded&amp;clientId=uc78a8d56-2993-4&amp;from=paste&amp;height=410&amp;id=u51da7104&amp;originHeight=553&amp;originWidth=971&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=123148&amp;status=done&amp;style=none&amp;taskId=u938cad11-a33a-4e0d-a064-d4940bad3e5&amp;title=&amp;width=719.2593100695652" alt="image.png" /><br />OS中的颠簸现象：</p><blockquote><p>颠簸（Thrashing）现象是指在操作系统中，当内存资源过度分配给多个进程时，导致大量的缺页中断和频繁的页面置换，使得系统的整体性能急剧下降。颠簸现象通常发生在系统的物理内存资源不足以满足所有运行进程的需求时。<br />当颠簸发生时，进程之间会竞争有限的内存资源，从而导致频繁的缺页中断。由于大量时间花费在处理缺页中断、页面换入和换出等内存管理任务上，进程实际的计算工作几乎无法进行。这导致系统运行缓慢，用户体验极差</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682257816972-b79a34cd-8926-4fc5-8aad-877907d04c9b.png#averageHue=%23f0ecec&amp;clientId=uc78a8d56-2993-4&amp;from=paste&amp;height=340&amp;id=u0627191d&amp;originHeight=459&amp;originWidth=827&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=98915&amp;status=done&amp;style=none&amp;taskId=ubc31be92-3c26-4545-9af5-1a015da10f7&amp;title=&amp;width=612.5926358676936" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1682257921553-fca6d16d-d63f-42a3-9728-62dbe5c60e29.png#averageHue=%23f9f2ef&amp;clientId=uc78a8d56-2993-4&amp;from=paste&amp;height=385&amp;id=u7e4c924d&amp;originHeight=520&amp;originWidth=914&amp;originalType=binary&amp;ratio=1.3499999046325684&amp;rotation=0&amp;showTitle=false&amp;size=147096&amp;status=done&amp;style=none&amp;taskId=u9f87d3f6-fd08-4d44-a080-640d18a0c2a&amp;title=&amp;width=677.0370848646577" alt="image.png" /></p><h1 id="5-设备驱动与文件系统"><a class="markdownIt-Anchor" href="#5-设备驱动与文件系统"></a> 5. 设备驱动与文件系统</h1><h2 id="51-cpu如何使用外设"><a class="markdownIt-Anchor" href="#51-cpu如何使用外设"></a> 5.1. CPU如何使用外设</h2><p>我们由简至繁，先看看CPU本质上是如何使用外设的。<br />CPU使用外设，本质上是对外设的端口 (端口的本质是寄存器) 进行写命令（out xx, al）完成的。</p><blockquote><p>更详细的说，CPU通过与外设的端口进行通信来使用外设。在硬件层面，这些端口通常与设备的寄存器相关联，这些寄存器包含用于配置设备和控制设备行为的数据。通过对这些寄存器进行读写，CPU可以实现对外设的控制。通常，操作系统会使用设备驱动程序（Device Drivers）来与外设进行通信。设备驱动程序是一种特殊的软件，可以将CPU发出的指令转换成与特定硬件设备兼容的命令。操作系统通过调用设备驱动程序提供的接口，从而实现对外设的控制。</p></blockquote><p>而设备受到CPU的指令后开始工作，在工作完成后向CPU发出中断信号，CPU就转去执行中断处理程序。<br />以上描述中CPU要干的就两件事，一个是向设备写，一个是中断处理。那么在设备驱动的相关代码中有关写指令和中断处理以外的其他指令，旨在提供给上层用户一个统一的接口 ，避免因设备的不同或设备厂商不同，而导致写操作成为一个复杂的事情。以向显示器输出为例，无论显示器是什么牌子的，通过这个统一的接口，用户都可以用printf打印语句。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683080530392-d8b221d9-e1a8-4931-b38b-66ee51dca79c.png#averageHue=%23f3ecec&amp;clientId=u886528a8-caf6-4&amp;from=paste&amp;height=355&amp;id=u07c17baa&amp;originHeight=533&amp;originWidth=816&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=112792&amp;status=done&amp;style=none&amp;taskId=u5067ccf0-7dc0-4a8e-8ffe-0a4619bc35a&amp;title=&amp;width=544" alt="image.png" /><br />这里提到的统一的接口，就是操作系统两大视图中的<strong>文件视图</strong>，用户使用外设，只需要处理设备对应的设备文件即可。设备文件是一种特殊类型的文件，它允许应用程序和操作系统以文件的形式与硬件设备进行交互。这种抽象简化了应用程序对外设的访问，因为它们可以像操作普通文件一样操作设备文件。但底层实现仍然依赖于设备驱动程序，以及通过端口（寄存器）与外设进行通信。<br /><strong>旁注:</strong></p><blockquote><p>设备驱动程序与设备文件<br />/dev目录下的设备文件并不包含设备驱动程序本身。设备文件是Linux和类Unix操作系统中设备驱动程序与用户程序之间的接口。它们充当了一种抽象层，允许用户程序通过标准的文件I/O操作（如打开、读取、写入和关闭文件）与底层硬件设备进行交互。<br />设备文件通常分为字符设备文件和块设备文件。这两类设备文件在/dev目录下，以设备文件的形式表示。每个设备文件都有一个设备号（包括主设备号和次设备号），用于唯一标识该设备。操作系统使用设备号在内部映射到相应的设备驱动程序。<br />设备驱动程序本身是内核的一部分，负责管理硬件设备，并为用户程序提供了一组操作函数。当用户程序对设备文件执行I/O操作时，操作系统会根据设备号找到相应的设备驱动程序，然后调用设备驱动程序提供的操作函数来处理用户程序的请求。这样，设备驱动程序实际上是在内核空间执行的，而设备文件则位于用户空间。</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683009935877-99b72d89-1601-4cdb-9cc3-9a481c9c850c.png#averageHue=%23f3eeee&amp;clientId=udd70286a-00e4-4&amp;from=paste&amp;height=566&amp;id=u78d2f10f&amp;originHeight=566&amp;originWidth=999&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=102230&amp;status=done&amp;style=none&amp;taskId=u1f5f5128-e509-4c93-bc94-a052761be8d&amp;title=&amp;width=999" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683009961469-9c81acdd-65b3-46fc-9469-f9cd28087023.png#averageHue=%23eeecec&amp;clientId=udd70286a-00e4-4&amp;from=paste&amp;height=549&amp;id=u06220a3d&amp;originHeight=549&amp;originWidth=868&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=119870&amp;status=done&amp;style=none&amp;taskId=u9f89cef1-d126-4e25-aec8-e8ef642156d&amp;title=&amp;width=868" alt="image.png" /></p><h2 id="52-向显示器输出"><a class="markdownIt-Anchor" href="#52-向显示器输出"></a> 5.2. 向显示器输出</h2><p>printf函数内部将可变参数转换为字符数组格式，并将其存储在<code>buffer</code>数组中。然后，用系统调用sys_write将该字符数组写入标准输出流中，这在第二章讲述系统调用时说过，在这一章我们从<code>sys_write</code>接着向下探索以解开设备驱动程序的面纱<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683016447437-c198278f-4067-4936-ad15-e0f5892ad839.png#averageHue=%23f4edea&amp;clientId=uc2630503-c9ec-4&amp;from=paste&amp;height=436&amp;id=AMlMM&amp;originHeight=654&amp;originWidth=1047&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=86454&amp;status=done&amp;style=none&amp;taskId=u0338c984-3f2d-4419-be3a-82a8643bfee&amp;title=&amp;width=698" alt="image.png" /></p><h3 id="从文件描述符fd到目标inode"><a class="markdownIt-Anchor" href="#从文件描述符fd到目标inode"></a> 从文件描述符fd到目标inode</h3><p>我们先了解<strong>操作系统怎么通过文件描述符fd找到目标inode</strong>，再谈sys_open如何建立这个映射关系的，就知道sys_write是如何通过fd获取目标inode的了<br />源码中出现的filp数组是进程PCB中的文件指针数组，它包含指向全局文件表（file_table）中相应文件表项的指针，将进程的文件描述符（整数值）映射到全局文件表中的文件表项<br />全局文件表（file_table）则是系统级别的，<strong>文件表中的每个条目指向一个 inode</strong>，因此它将文件描述符映射到系统中的 inode。<br />所以通过文件描述符fd当做filp数组的索引<code>current-&gt;filp[fd]</code>得到对应的文件表项指针，再通过文件表的映射，就能够找到目标文件的inode <code>struct m_inode *inode_ptr = file_ptr-&gt;f_inode</code>。inode是一个结构体，存储了目标文件的相关信息，比如文件大小/类型/创建日期等，因为外设被OS抽象为设备文件，因此inode还存储了设备的信息，OS通过inode提供的信息确定了要写入的目标设备的信息（设备号），进而选择接下来的分支<br />而sys_open是如何建立这个映射关系的呢</p><blockquote><ol><li>解析文件路径：sys_open 首先根据提供的文件路径名找到对应的 inode。这个过程涉及到遍历目录结构和搜索目录项，最终找到目标文件的 inode。(open_namei函数)</li><li>在全局文件表中分配一个文件表项：接着，sys_open 在全局文件表（file_table）中分配一个空闲的文件表项，并将找到的 inode 指针存储在该文件表项的 f_inode 字段中。此外，还会设置文件访问模式（读、写或读写）和文件操作指针等信息。</li><li>在进程的文件指针数组中分配一个文件描述符：然后，在当前进程的文件指针数组（filp）中分配一个文件描述符（fd），并将其指向全局文件表中的相应文件表项。通常，文件描述符会分配为当前进程中最小可用的整数。例如 0、1、2 等。在 Linux 系统中，0、1、2 分别对应了标准输入（stdin）、标准输出（stdout）和标准错误（stderr）</li><li>返回文件描述符给进程</li></ol></blockquote><p>至此， sys_open 系统调用建立了从文件描述符（fd）到进程的文件指针数组（filp）、全局文件表（file_table）和 inode 的映射关系之后，进程可以使用文件描述符执行后续的文件操作。</p><blockquote><p>当进程需要进行文件操作时，例如读取、写入或关闭文件，它会使用已分配的文件描述符（fd）作为参数调用相应的系统调用，如 sys_read、sys_write 或 sys_close。<br />这些系统调用会根据文件描述符（fd）查找进程的文件指针数组（filp），以获取指向全局文件表（file_table）中相应文件表项的指针。接着，它们会访问文件表项中的 inode 指针，找到与文件关联的 inode。有了 inode，操作系统可以根据文件元数据和数据块指针来执行具体的文件操作。<br />这种从文件描述符到 inode 的映射关系使得进程可以方便地访问和操作文件，同时操作系统可以有效地管理文件资源和追踪文件状态。</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683078372932-248ac61a-8601-426f-a238-481280a0752a.png#averageHue=%23f5eeee&amp;clientId=u886528a8-caf6-4&amp;from=paste&amp;height=329&amp;id=ubd4f4d8f&amp;originHeight=494&amp;originWidth=1019&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=72503&amp;status=done&amp;style=none&amp;taskId=ue1b4d1f5-d346-4224-acb3-afcdb9528dd&amp;title=&amp;width=679.3333333333334" alt="image.png" /><br />看下图源码，sys_write通过用文件描述符索引filp数组( <code>current-&gt;filp[fd]</code>)得到文件表条目，再通过文件表条目得到inode (<code>file-&gt;f_inode</code>)<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683029802530-0c7a1daf-b4f1-41cf-8225-de70ed0a1692.png#averageHue=%23eee9e9&amp;clientId=uef2392d0-2dcf-4&amp;from=paste&amp;height=188&amp;id=ua4321874&amp;originHeight=282&amp;originWidth=934&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=56762&amp;status=done&amp;style=none&amp;taskId=u57d54626-e844-42a0-94a4-b61a43e0e30&amp;title=&amp;width=622.6666666666666" alt="image.png" /><br />通过溯源操作系统的初始化过程，可以知道文件描述符0(标准输入stdin),1(标准输出stdout),2(标准错误stderr)均指向设备驱动文件<code>dev/tty0</code><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683078266818-aaf08981-cf50-4e61-960e-5fd4c0076603.png#averageHue=%23f3e8e8&amp;clientId=u886528a8-caf6-4&amp;from=paste&amp;height=133&amp;id=BBMH6&amp;originHeight=200&amp;originWidth=1162&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=27197&amp;status=done&amp;style=none&amp;taskId=u68281b97-f214-4bad-b7aa-6508414af10&amp;title=&amp;width=774.6666666666666" alt="image.png" /></p><h3 id="rw_char函数与crw_char数组"><a class="markdownIt-Anchor" href="#rw_char函数与crw_char数组"></a> rw_char函数与crw_char数组</h3><p><code>sys_write</code>函数根据inode，判断目标设备是不是字符设备 (根据设备类型进行分支)，如果是，则向<code>rw_char</code>函数传入设备的设备号(也是inode中的信息)，该函数以设备号为索引通过<code>crw_char</code>数组找到并调用相应的设备驱动程序rw_ttyx（这里开始真正执行内核中的设备驱动程序！ rw: read or write）</p><ol><li>crw_char数组：crw_char数组（在fs/char_dev.c文件中定义）是字符<strong>设备驱动程序的注册表</strong>。数组中的每个元素都指向一个字符设备驱动程序的操作函数表。crw_char数组使用设备号作为索引，将设备号映射到相应的设备驱动程序。在printf向显示器输出的过程中，/dev/tty0的设备号为4，对应于TTY设备驱动程序。</li><li>rw_char函数：rw_char函数（在fs/char_dev.c文件中定义）是一个通用的读/写函数，用于处理字符设备的读写操作。rw_char函数根据传入的设备号查找crw_char数组，然后调用相应设备驱动程序的读或写方法。在printf向显示器输出的过程中，sys_write函数会调用rw_char函数，传入设备号4（对应于/dev/tty0）以及要写入的字符串。</li></ol><p>到目前为止，操作系统根据设备文件的inode结构体提供的信息，进行了分支，并通过设备号信息跳转到相应的设备驱动程序执行<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683030509393-8e1dba0f-3da3-4b24-a7d0-aca87906e2d5.png#averageHue=%23ebe5e5&amp;clientId=uef2392d0-2dcf-4&amp;from=paste&amp;height=170&amp;id=u66d3aa94&amp;originHeight=255&amp;originWidth=838&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=47886&amp;status=done&amp;style=none&amp;taskId=u81af4f00-efee-4af8-9dec-47d6ca66d8a&amp;title=&amp;width=558.6666666666666" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683030734714-31d2a9d1-9994-40b2-8fc7-3011912728b3.png#averageHue=%23f3eeee&amp;clientId=uef2392d0-2dcf-4&amp;from=paste&amp;height=166&amp;id=u189fb14a&amp;originHeight=249&amp;originWidth=858&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=38964&amp;status=done&amp;style=none&amp;taskId=udd88da97-7b6d-4387-a64f-08260d94a0b&amp;title=&amp;width=572" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683030833282-f59d9abb-61f9-4260-9275-6f52af80b4fd.png#averageHue=%23eae7e7&amp;clientId=uce3c1a92-e85e-4&amp;from=paste&amp;height=182&amp;id=u773a4819&amp;originHeight=273&amp;originWidth=1032&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=38870&amp;status=done&amp;style=none&amp;taskId=u30feeead-fa9a-425c-b494-66b11b14927&amp;title=&amp;width=688" alt="image.png" /></p><h3 id="tty_write函数与con_write函数"><a class="markdownIt-Anchor" href="#tty_write函数与con_write函数"></a> tty_write函数与con_write函数</h3><p><code>rw_ttyx</code>根据传入的rw (值为write) 参数进行分支，调用<code>tty_write</code>函数，该函数先判断输出缓冲区是否满，如果满了则先sleep该进程，反之将字符串放入输出缓冲区中，最后调用<code>tty-&gt;write</code>函数进行输出。tty_write函数通过调用tty-&gt;write方法将字符串传递给con_write函数，con_write函数执行最终的输出显示器操作，它处理字符串输出到显示器的具体细节。它将字符串中的每个字符发送到视频内存（显存），并根据需要更新光标位置。当字符串全部写入显存后，显示器将自动显示更新后的内容。对于简单的文本输出，如使用printf函数，显示器不会向CPU发出中断。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683031706405-6f90d34e-9ed8-425f-b48f-bad60b9d9301.png#averageHue=%23f1e7e7&amp;clientId=uce3c1a92-e85e-4&amp;from=paste&amp;height=200&amp;id=u438c284a&amp;originHeight=227&amp;originWidth=472&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=36943&amp;status=done&amp;style=none&amp;taskId=ua5fea1df-4637-4130-8165-849529b85ff&amp;title=&amp;width=415.66668701171875" alt="image.png" /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683031720524-c75bf9b1-eecf-4ddb-8efc-bba410f5c438.png#averageHue=%23f2eded&amp;clientId=uce3c1a92-e85e-4&amp;from=paste&amp;height=198&amp;id=u79ad68ec&amp;originHeight=297&amp;originWidth=529&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=40402&amp;status=done&amp;style=none&amp;taskId=u1a652d98-a521-4006-bea1-848cdf5e9a6&amp;title=&amp;width=352.6666666666667" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683031679642-3ffcd7c8-078b-4f6d-b1ef-0fb2f741b64d.png#averageHue=%23f5ecec&amp;clientId=uce3c1a92-e85e-4&amp;from=paste&amp;height=255&amp;id=u2ce9c355&amp;originHeight=382&amp;originWidth=1126&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=67768&amp;status=done&amp;style=none&amp;taskId=ue9c81546-2b79-492c-ae06-f9eecb4ee73&amp;title=&amp;width=750.6666666666666" alt="image.png" /><br />旁注: 在Linux和类Unix操作系统中，设备通常分为两类：字符设备和块设备。这两种类型的设备在数据访问方式和操作模式上有显著的区别。</p><blockquote><ol><li>字符设备： 字符设备是基于字节流的设备，这意味着它们以顺序方式处理数据，一个字节接一个字节。对于这些设备，用户可以直接读写数据，无需考虑数据在设备中的实际存储位置。字符设备的典型例子包括终端（如tty设备）、串行端口以及其他一些硬件接口。在Linux中，字符设备通常在/dev目录下以设备文件的形式表示。</li><li>块设备： 块设备是基于数据块的设备，这意味着它们处理固定大小的数据块，而不是字节流。块设备通常用于存储大量数据，例如硬盘驱动器、闪存设备和CD-ROM驱动器。与字符设备不同，块设备的读写操作需要考虑数据在设备中的实际存储位置，因为它们允许随机访问数据块。在Linux中，块设备同样位于/dev目录下，以设备文件的形式表示。<br />总之，字符设备和块设备是两种不同类型的设备，它们在数据访问方式和操作模式上有显著的区别。字符设备基于字节流，处理数据的方式是顺序的，而块设备基于数据块，允许随机访问数据。在Linux操作系统中，这两种类型的设备都在/dev目录下以设备文件的形式表示。</li></ol></blockquote><h2 id="53-用键盘输入"><a class="markdownIt-Anchor" href="#53-用键盘输入"></a> 5.3. 用键盘输入</h2><p>键盘输入是一个中断事件</p><ol><li>当按下键盘时，键盘控制器会检测到按键事件，并将扫描码（Scan Code）存储在其内部缓冲区中，键盘控制器向键盘发送中断请求信号。</li><li>CPU检测到IRQ1中断信号，并暂停当前执行的任务，根据IRQ找到并执行相应的中断处理程序<code>_keyboard_interrupt</code>，该程序从键盘控制器的数据端口0x60处读取其内部缓冲区的数据</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683082839621-e9de6b47-3b9d-4d23-9e6e-a807a7ec3de9.png#averageHue=%23f3eceb&amp;clientId=u886528a8-caf6-4&amp;from=paste&amp;height=176&amp;id=ZXagh&amp;originHeight=264&amp;originWidth=921&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=49042&amp;status=done&amp;style=none&amp;taskId=ud4a6e643-cb5d-4136-8182-1b1d75c535f&amp;title=&amp;width=614" alt="image.png" /></p><ol start="3"><li>keyboard_interrupt 被调用后，会将键盘扫描码做为下标，调用key_table函数数组中保存的与该按键对应的响应函数，响应函数通过key_map找到相应的字符ascill码</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683086256931-394b2178-20fe-4ef5-9764-809b57a86795.png#averageHue=%23eceaea&amp;clientId=ueab14483-fb09-4&amp;from=paste&amp;height=347&amp;id=uE0sG&amp;originHeight=635&amp;originWidth=1007&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=137562&amp;status=done&amp;style=none&amp;taskId=uf1eddbd1-00b0-466e-bb62-c7572d727a0&amp;title=&amp;width=550.3333740234375" alt="image.png" /></p><ol start="4"><li>在将扫描码转换为ASCII字符后，keyboard_interrupt会处理特殊按键（如Shift、Ctrl、Alt等）和组合键，然后将最终的字符放入输入缓冲区read_q。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683086300758-53afa7c1-302c-486b-8f57-90518cb6c240.png#averageHue=%23f1ebea&amp;clientId=ueab14483-fb09-4&amp;from=paste&amp;height=294&amp;id=Pjyoz&amp;originHeight=467&amp;originWidth=826&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=92356&amp;status=done&amp;style=none&amp;taskId=u5bd80bcb-954c-4e79-a331-8d434155203&amp;title=&amp;width=520.6666870117188" alt="image.png" /></p><ol start="5"><li>如果TTY设备的回显（echo）功能已启用，keyboard_interrupt会将字符发送给当前TTY设备的输出函数con_write。这个函数会将字符写入显存，从而在屏幕上显示该字符。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683099241888-f5588167-5c3f-4332-b41f-2b6640bb6b27.png#averageHue=%23f0e9e7&amp;clientId=u0f7e0709-f37e-4&amp;from=paste&amp;height=274&amp;id=ucb5bd3e8&amp;originHeight=572&amp;originWidth=1166&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=113045&amp;status=done&amp;style=none&amp;taskId=u4951dc2e-4a9f-4554-8b92-403d858d759&amp;title=&amp;width=558.3333740234375" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683082904074-7053eac5-5d71-41c0-b7b7-dc3c1adf2b0c.png#averageHue=%23efe4df&amp;clientId=u886528a8-caf6-4&amp;from=paste&amp;height=326&amp;id=uae4c1943&amp;originHeight=709&amp;originWidth=1232&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=112306&amp;status=done&amp;style=none&amp;taskId=u5dfabba8-5a6d-4228-8fa6-4fac00bad80&amp;title=&amp;width=567.3333740234375" alt="image.png" /><br />旁注</p><blockquote><p>什么是IRQ<br />硬件设备发送给 CPU 的中断请求信号（IRQ）通常是一个简单的电平信号，用于通知 CPU 有一个需要处理的中断事件。IRQ 信号的内容本身非常简单，它主要起到通知 CPU 的作用，而不包含详细的中断信息或指令。IRQ 信号能引发中断的原因在于 CPU 对这些信号的设计和处理方式。<br />当硬件设备需要 CPU 的注意时（例如读取数据、处理错误或通知状态改变），它会发送一个 IRQ 信号给 CPU。CPU 上有一些专用的引脚（称为中断请求引脚）用于接收这些信号。每个硬件设备通常都有一个与之关联的 IRQ 编号，用于在 CPU 和硬件设备之间进行识别。<br />收到 IRQ 信号后，CPU 会根据信号的优先级和当前状态来决定何时处理这个中断。在适当的时机，CPU 会暂停当前任务，然后查询中断向量表，找到与收到的 IRQ 编号对应的中断处理程序的地址，并跳转到该地址开始执行中断处理程序。<br />IRQ 信号本身并不包含 int 指令或其他类似的处理器指令。实际上，IRQ 信号与处理器指令是分开的，它们只是用于通知 CPU 有一个需要处理的中断事件。处理器在接收到 IRQ 信号后，会根据内部逻辑和中断处理机制来执行相应的中断处理程序。</p></blockquote><h2 id="54-使用生磁盘"><a class="markdownIt-Anchor" href="#54-使用生磁盘"></a> 5.4. 使用生磁盘</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683274613740-4e955d47-615c-4a5a-839c-adc7c7dc6580.png#averageHue=%23ebe7e7&amp;clientId=uc5431738-e9c3-4&amp;from=paste&amp;height=433&amp;id=ude943293&amp;originHeight=661&amp;originWidth=1263&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=176825&amp;status=done&amp;style=none&amp;taskId=ua701b4cf-3936-4bb4-b1c3-3320e3b9745&amp;title=&amp;width=826.4000244140625" alt="image.png" /><br />我们自下而上，逐步学习从生磁盘到文件视图的背后机制，现在我们忽略文件视图的封装，看进程如果要直接读写生磁盘，该怎么做</p><h3 id="541-第1层抽象盘块"><a class="markdownIt-Anchor" href="#541-第1层抽象盘块"></a> 5.4.1 第1层抽象—盘块</h3><p>CPU要向磁盘写入，那么先要确定目标扇区在磁盘中的的位置，那么就需要知道一个三维坐标信息，即磁道号(柱面号C)、磁头号(H)和扇区号(S)。有了这个信息，再执行out指令，就可以完成磁盘的写入了。由于这个坐标信息比较复杂，比进程来说很不友好，因此我们现在进行第一层抽象，即进程只传递盘块号给操作系统（实际上是设备驱动程序），由操作系统将这个盘块号转换为(C,H,S)的扇区坐标<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683167535304-398bd7b8-a457-4552-82f8-612fca70aa97.png#averageHue=%23ebe7e7&amp;clientId=u6e7136d0-30af-4&amp;from=paste&amp;height=157&amp;id=u596eaaa6&amp;originHeight=236&amp;originWidth=885&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=56216&amp;status=done&amp;style=none&amp;taskId=u4a7478d7-45ef-4ffe-a757-878a131ec50&amp;title=&amp;width=590" alt="image.png" /><br />盘块号是操作系统为了对磁盘进行第一层抽象而进行的第一层编址，因为同一进程使用盘块号相邻的盘块，而磁盘读写时间主要受寻道时间影响，因此编址后盘块号相邻的盘块最好处于同一磁道（这样就不用寻道了）。因此盘块由相邻的多个扇区组成，因此扇区号也遵循这个编址原则<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683168052643-345555ca-1e2e-43b1-941d-665c023097ae.png#averageHue=%23ece6e6&amp;clientId=u6e7136d0-30af-4&amp;from=paste&amp;height=143&amp;id=uf041be17&amp;originHeight=215&amp;originWidth=1074&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=72473&amp;status=done&amp;style=none&amp;taskId=u14fadf1e-ccd3-4b5e-bd86-cfb698ad339&amp;title=&amp;width=716" alt="image.png" /><br /><strong>为什么要引入盘块号，而不是直接传递扇区号呢？</strong><br />启动磁盘读写是一个耗时的事情(寻道+旋转+传输)，因此应该尽可能多的在一次磁盘操作中多读取，这样读写速度也就更快(传输速度只占一次磁盘读写耗时的很小部分)。（在磁盘读写操作中，寻道时间和旋转延迟通常是磁盘读写时间中最耗时的部分。因此，在进行磁盘读写操作时，将更多的数据读入内存缓存中，并尽可能减少读写次数，可以最大程度地减少磁盘寻道和旋转时间的影响，提高磁盘读写的效率和速度。） 因此操作系统引入盘块的概念，<strong>盘块（disk block）是文件系统管理磁盘空间的基本单位，文件系统通过盘块号来标识文件在磁盘上的位置</strong>，而磁盘读写的基本单位是扇区。扇区是磁盘上最小可寻址的物理存储单元，而盘块是操作系统中逻辑上抽象的单位，其大小可以是多个扇区(512bytes)的整数倍<br />盘块大小越大，读写速度就会越快。这是因为，当操作系统需要读取一个文件时，在一次磁盘操作中它会将整个盘块读入内存，而不是一个个字节逐个读取。盘块越大，每次读取的数据就越多，这可以减少磁盘读写操作的次数，从而提高读写速度。<br /><strong>为什么盘块越大，空间利用率越低？</strong><br />即使一个文件只有1KB的数据，因为盘块（disk block）是文件系统管理磁盘空间的基本单位，因此如果盘块大小为4KB，则它也会占用4KB的磁盘空间，剩余的3KB空间（内部碎片）就会浪费掉。因此，盘块越大，文件所占用的磁盘空间就会变大，但实际数据却变少，导致空间利用率降低。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683170098014-71d24c7c-a895-4eaf-ba17-093e2be80fe4.png#averageHue=%23f2ebeb&amp;clientId=u6e7136d0-30af-4&amp;from=paste&amp;height=336&amp;id=ud3a54261&amp;originHeight=667&amp;originWidth=1335&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=255214&amp;status=done&amp;style=none&amp;taskId=ua9a36021-ea71-4db7-95a1-854fac3e7b6&amp;title=&amp;width=673" alt="image.png" /></p><h3 id="542-第2层抽象请求队列"><a class="markdownIt-Anchor" href="#542-第2层抽象请求队列"></a> 5.4.2 第2层抽象—请求队列</h3><p>CPU执行进程的速度远快于磁盘读写，因此同一时间会存在多个未处理的磁盘读写请求 (这我们的语境中，这个请求是进程发出读写目标盘块号的请求)，因此要形成一个请求队列。再按照合理的调度算法处理这些请求<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683169361596-32625362-e313-49b2-8620-22feb7f6133c.png#averageHue=%23efe7e7&amp;clientId=u6e7136d0-30af-4&amp;from=paste&amp;height=135&amp;id=ue8e8bbba&amp;originHeight=203&amp;originWidth=907&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=48778&amp;status=done&amp;style=none&amp;taskId=u250cdc58-a3fb-4f6e-b3d0-13f8f84972e&amp;title=&amp;width=604.6666666666666" alt="image.png" /></p><ol><li>FCFS</li></ol><p>效率低<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683169414996-359f9d0a-1c38-425b-b5bf-877ed4bbd0f1.png#averageHue=%23f3efef&amp;clientId=u6e7136d0-30af-4&amp;from=paste&amp;height=278&amp;id=u4c66f5df&amp;originHeight=517&amp;originWidth=1095&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=103264&amp;status=done&amp;style=none&amp;taskId=ud8d07c33-fb5e-4074-bbdd-0ade9514a60&amp;title=&amp;width=589" alt="image.png" /></p><ol start="2"><li>SSTF</li></ol><p>最少寻找时间优先，即离磁头最近的先处理，与进程调度的短作业优先算法类似，也会导致饥饿问题<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683169577758-24b4c031-c1cb-4d83-902a-a01fe767c6f3.png#averageHue=%23f1ecec&amp;clientId=u6e7136d0-30af-4&amp;from=paste&amp;height=362&amp;id=uee7510e5&amp;originHeight=737&amp;originWidth=1239&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=134098&amp;status=done&amp;style=none&amp;taskId=u6c16abec-fc34-4a24-8462-56cc9f8875d&amp;title=&amp;width=608" alt="image.png" /></p><ol start="3"><li>Scan</li></ol><p>扫描算法，不存在饥饿问题，但不公平，对中间的盘块号处理快于两边（中间的占便宜）<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683169763535-cd9a97b3-5b61-463c-ad46-2692af3bdc22.png#averageHue=%23f1ecec&amp;clientId=u6e7136d0-30af-4&amp;from=paste&amp;height=345&amp;id=u438068b8&amp;originHeight=667&amp;originWidth=1004&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=111587&amp;status=done&amp;style=none&amp;taskId=u563240da-0f54-4cc6-8dfe-1feb1c55cad&amp;title=&amp;width=519.3333740234375" alt="image.png" /></p><ol start="4"><li>C-Scan</li></ol><p>电梯算法，在复位过程中不处理中间的盘块号，保证了公平性<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683169837687-9c03ac2d-3837-4f7c-8069-72c379032a95.png#averageHue=%23f2eded&amp;clientId=u6e7136d0-30af-4&amp;from=paste&amp;height=333&amp;id=u2afb146b&amp;originHeight=499&amp;originWidth=839&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=76310&amp;status=done&amp;style=none&amp;taskId=ufa492102-059e-40b0-95d9-e9dc0c5ac1d&amp;title=&amp;width=559.3333333333334" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683170004075-0dc446a6-0870-441a-8f48-d7d18412bd78.png#averageHue=%23edeaea&amp;clientId=u6e7136d0-30af-4&amp;from=paste&amp;height=312&amp;id=u6ac69c68&amp;originHeight=701&amp;originWidth=1271&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=172245&amp;status=done&amp;style=none&amp;taskId=u539ddede-29e4-4d51-9d81-44f42ba66e7&amp;title=&amp;width=566.3333740234375" alt="image.png" /></p><h2 id="55-从字符流到磁盘块"><a class="markdownIt-Anchor" href="#55-从字符流到磁盘块"></a> 5.5. 从字符流到磁盘块</h2><p>现在我们在盘块号的基础上进一步抽象（第3层抽象），得到文件视图，文件在用户来看就是字符序列，一个字节接一个字节，用户可以处理这些字节数据而不用在乎数据的实际存储位置。<br />文件是用户角度的概念，它是由一系列字符组成的数据流。在文件被写入磁盘时，操作系统需要将字符流映射到磁盘块上，以便在需要时可以快速读取文件数据。<br />为了实现字符流到磁盘块的映射，文件系统通常会将一个文件分割成若干个固定大小的块，这些块被称为磁盘块。当一个文件被写入磁盘时，操作系统会将文件分割成若干个磁盘块，并将每个磁盘块映射到磁盘上的一个或多个扇区。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683171198429-3729b5be-a2aa-4ddd-a0e2-cc5b94b55a9f.png#averageHue=%23efe8e7&amp;clientId=u6e7136d0-30af-4&amp;from=paste&amp;height=363&amp;id=u27cef9b5&amp;originHeight=454&amp;originWidth=816&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=125529&amp;status=done&amp;style=none&amp;taskId=uf0b02ea1-ede0-46e2-8652-92815f1cedf&amp;title=&amp;width=652.8" alt="image.png" /><br />接下来讲述映射的几种方式</p><h3 id="551-连续存储"><a class="markdownIt-Anchor" href="#551-连续存储"></a> 5.5.1 连续存储</h3><p>连续存储是一种将文件连续地存储在磁盘上的方式。在连续存储方式下，文件被分为若干个大小相等的磁盘块，并且这些磁盘块在磁盘上是连续存储的。操作系统通过维护文件的起始位置和长度信息，可以快速地定位和读取整个文件。<br />连续存储的优点是读取速度快，但缺点是文件大小固定，不易扩展(可能会覆盖后续的文件)，且容易产生外部碎片。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683171456243-851ec91a-7438-482a-b6c6-9bfd3d4fbdf4.png#averageHue=%23ede7e6&amp;clientId=u6e7136d0-30af-4&amp;from=paste&amp;height=310&amp;id=u2ed6a402&amp;originHeight=387&amp;originWidth=723&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=92079&amp;status=done&amp;style=none&amp;taskId=uf359bd9d-d332-45d5-8fcf-fe5372934a2&amp;title=&amp;width=578.4" alt="image.png" /></p><h3 id="552-链式存储"><a class="markdownIt-Anchor" href="#552-链式存储"></a> 5.5.2 链式存储</h3><p>链式存储是一种将文件存储在多个不连续的磁盘块上的方式。在链式存储方式下，每个磁盘块除了存储文件数据外，还包含一个指向下一个磁盘块的指针。操作系统通过遍历磁盘块链表，可以读取整个文件。<br />链式存储的优点是文件大小可变，且可以避免外部碎片，但缺点是需要额外的指针开销，且读取速度比连续存储慢。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683171472911-7871d794-fd32-4f0b-bb27-864e1ac89812.png#averageHue=%23eae9e8&amp;clientId=u6e7136d0-30af-4&amp;from=paste&amp;height=527&amp;id=u4ae4a418&amp;originHeight=659&amp;originWidth=1057&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=128274&amp;status=done&amp;style=none&amp;taskId=u400a5af2-6cf8-4ac3-8282-d20830d8d01&amp;title=&amp;width=845.6" alt="image.png" /></p><h3 id="553-索引存储"><a class="markdownIt-Anchor" href="#553-索引存储"></a> 5.5.3 索引存储</h3><p>索引存储是一种将文件的元数据和磁盘块的地址保存在<strong>索引块</strong>中的方式。在索引存储方式下，每个文件都对应一个或多个索引块(对大文件)，每个索引块中保存若干个磁盘块的地址。操作系统通过读取文件的索引块，可以快速地定位和读取文件。<br />索引存储的优点是可以快速定位和读取文件，且文件大小可变，但缺点是需要额外的索引块开销，且索引块也可能发生外部碎片。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683171586172-d4afbec2-e887-4a9f-9469-17a5a9d68a03.png#averageHue=%23efeaea&amp;clientId=u6e7136d0-30af-4&amp;from=paste&amp;height=308&amp;id=uf6704a59&amp;originHeight=466&amp;originWidth=860&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=103733&amp;status=done&amp;style=none&amp;taskId=u6686593b-40f3-4722-ab22-78858f110dd&amp;title=&amp;width=568" alt="image.png" /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683171597104-9283a12d-2c8d-496a-b5f1-8fb9f9b0a808.png#averageHue=%23f0ecea&amp;clientId=u6e7136d0-30af-4&amp;from=paste&amp;height=309&amp;id=u58f12473&amp;originHeight=574&amp;originWidth=1035&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=120680&amp;status=done&amp;style=none&amp;taskId=ud12d1709-85b9-4349-947c-ee280ba479b&amp;title=&amp;width=557" alt="image.png" /></p><h2 id="56-从字符流到磁盘块的实现"><a class="markdownIt-Anchor" href="#56-从字符流到磁盘块的实现"></a> 5.6. 从字符流到磁盘块的实现</h2><p>我们从sys_write出发，该函数通过3个参数信息（文件描述符fd, 内存缓冲区buffer, 计数count）完成了字符流到盘块的映射和目标盘块的修改</p><h3 id="通过文件描述符fd找到inode"><a class="markdownIt-Anchor" href="#通过文件描述符fd找到inode"></a> 通过文件描述符fd找到inode</h3><p>在本节开头已经讲过如何通过fd找到目标inode，主要是通过将文件描述符当做filp数组的索引，再通过文件表的映射，能够找到目标文件的inode。inode可以视为文件的FCB，它存储了文件的元数据(即文件的描述性信息，例如文件的名称、类型、大小、创建日期、修改日期、访问权限等,还包括索引块的信息)，sys_write用<code>S_ISREG(inode-&gt;i_mode)</code>检查目标文件的类型，如果是普通文件(而不是设备文件)，则调用file_write来执行具体的写入操作<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683186139008-2aee4f58-e2b0-4f0a-8d6a-2472adfb8ad7.png#averageHue=%23f3efef&amp;clientId=ueac3b2cb-adfd-4&amp;from=paste&amp;height=389&amp;id=u90ed9d3c&amp;originHeight=601&amp;originWidth=1180&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=84257&amp;status=done&amp;style=none&amp;taskId=u9f709db0-b2d1-48ea-ae18-e69e973b782&amp;title=&amp;width=763" alt="image.png" /></p><h3 id="file_write函数"><a class="markdownIt-Anchor" href="#file_write函数"></a> file_write函数</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683186537173-282d4393-64aa-4a76-9635-20d17f0d9e4b.png#averageHue=%23f7ecec&amp;clientId=ueac3b2cb-adfd-4&amp;from=paste&amp;height=77&amp;id=u12354e26&amp;originHeight=96&amp;originWidth=1144&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=8870&amp;status=done&amp;style=none&amp;taskId=u20a4db03-4c55-41b0-b30f-594cc3ae004&amp;title=&amp;width=915.2" alt="image.png" /><br />file_write函数要想向完成对目标磁盘块的写入，那么它需要完成两件事情</p><ol><li>确定字符流的起点和终点</li></ol><p>由参数<code>file</code>获取文件操作指针的开始位置，即字符流的起点。file是一个指向文件表条目的指针，通过它可以获取文件操作指针等信息。然后加上参数count便能获取字符流的终点。<br />看下图源码，<code>file_write</code>先查看文件的打开标志是否是追加(<code>O_APPEND</code>)，如果是则将待写入位置pos置为文件末尾(<code>i_size</code>)，否则置pos为文件当前偏移量（文件操作指针的开始位置）<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683186592747-a29d7e52-17cd-46a6-b97e-241fbe5c26b5.png#averageHue=%23efe8e8&amp;clientId=ueac3b2cb-adfd-4&amp;from=paste&amp;height=218&amp;id=u320079ff&amp;originHeight=273&amp;originWidth=1125&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=60865&amp;status=done&amp;style=none&amp;taskId=u5b69dfe0-fa3a-4afa-8a81-4cf85e461a5&amp;title=&amp;width=900" alt="image.png" /></p><ol start="2"><li>确定目标盘块号</li></ol><p>create_block返回目标盘块号，它利用了两个参数inode和pos/BLOCK_SIZE</p><ol><li>inode参数：inode结构中包含了关于文件的元数据，如文件大小、权限等。更重要的是，它还包含了直接索引、间接索引、双间接索引和三间接索引指针，这些指针用于查找文件数据所在的磁盘块。<strong>通过提供inode参数，create_block函数可以访问这些索引指针，从而找到和分配新的磁盘块。</strong></li><li>pos/block_size参数：pos/block_size表示文件中逻辑盘块号。这个信息对于<strong>确定应该使用哪个索引级别</strong>（直接索引、间接索引等）非常重要。例如，对于较小的文件，pos/block_size可能位于直接索引范围内，这意味着可以直接使用inode结构中的直接索引指针来访问数据盘块。而对于较大的文件，可能需要使用间接索引或更高级别的索引来查找数据盘块。通过传递pos/block_size参数，create_block函数可以根据文件操作指针和文件大小选择合适的索引级别，从而正确地分配和映射新的磁盘块。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683187188443-0606edf0-80fb-4637-b146-79c9913fbac1.png#averageHue=%23eee7e7&amp;clientId=ueac3b2cb-adfd-4&amp;from=paste&amp;height=581&amp;id=ua789a494&amp;originHeight=726&amp;originWidth=1140&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=154851&amp;status=done&amp;style=none&amp;taskId=u774277f2-221f-4477-83a0-75adebcfd3d&amp;title=&amp;width=912" alt="image.png" /></p><ol start="3"><li>执行读写操作</li></ol><p>使用<strong>bread函数读取盘块的数据</strong>。bread负责将指定的盘块数据从磁盘读取到内存中。即将目的盘块号放入电梯队列后续内容就是生磁盘的使用了(算出C,H,S进行磁盘读写)<br />如果该盘块已经在内存缓冲区中，bread会直接返回指向该缓冲区的指针。否则，它会分配一个新的缓冲区，从磁盘读取数据，然后返回指针。每个盘块只进行一次磁盘读写操作，以下是读写count个字符的源码（这部分还是直接看linux0.11源码完全注释比较好🙏）<br /><strong>旁注: 磁盘数据缓冲区</strong></p><blockquote><p>磁盘块的数据缓冲区是操作系统用于在内存中暂时存储磁盘块数据的区域。当应用程序需要读取或写入磁盘块时，操作系统会将磁盘块的数据读取到缓冲区中，然后在缓冲区中进行读取或写入操作。这样可以减少磁盘I/O操作的次数，提高文件系统的性能。缓冲区还可以被用于实现文件系统的高级功能，如文件系统缓存和延迟写入等。</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    block <span class="token operator">=</span> <span class="token function">create_block</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span> pos <span class="token operator">/</span> BLOCK_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    bh <span class="token operator">=</span> <span class="token function">bread</span><span class="token punctuation">(</span>inode<span class="token operator">-></span>i_dev<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//bh（缩写为buffer head）实际上是一个指向buffer_head结构的指针，而不是直接指向磁盘缓冲区。</span>                                    <span class="token comment">//buffer_head结构包含了关于磁盘缓冲区的信息，例如磁盘设备号、块号、脏标志等。</span>                                    <span class="token comment">//buffer_head结构中有一个成员变量b_data，这是一个指向实际磁盘缓冲区的指针。</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> pos <span class="token operator">%</span> BLOCK_SIZE<span class="token punctuation">;</span>     <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> c <span class="token operator">+</span> bh<span class="token operator">-></span>b_data<span class="token punctuation">;</span>    bh<span class="token operator">-></span>b_dirt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    c <span class="token operator">=</span> BLOCK_SIZE <span class="token operator">-</span> c<span class="token punctuation">;</span>    pos <span class="token operator">+=</span> c<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>c<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">get_fs_byte</span><span class="token punctuation">(</span>buf<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将数据从源缓冲区（buf）拷贝到目标缓冲区（bh->b_data）。这个循环一次处理一个字节，直到当前盘块的数据被写满。</span>    <span class="token punctuation">&#125;</span>                               <span class="token comment">// 注意，这个循环并不涉及磁盘读写操作，因为bh->b_data指向的是磁盘在内存中的缓冲区。</span>    <span class="token function">brelse</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在内层while循环结束后，brelse函数被调用以释放bh。这个函数会检查缓冲区是否被标记为脏（bh->b_dirt），</span>                <span class="token comment">// 如果是，则在适当的时机将数据写回磁盘。这意味着磁盘读写操作不会频繁发生，而是在数据准备好写回磁盘时进行。</span><span class="token punctuation">&#125;</span>filp<span class="token operator">-></span>f_pos <span class="token operator">=</span> pos<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683188984552-16f99ae4-fd0f-4e88-a8aa-961286ce4744.png#averageHue=%23f6eaea&amp;clientId=ueac3b2cb-adfd-4&amp;from=paste&amp;height=248&amp;id=uedb9f6a0&amp;originHeight=310&amp;originWidth=784&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=79624&amp;status=done&amp;style=none&amp;taskId=u9e54cdee-3c6b-4dd0-bff3-adb48c34603&amp;title=&amp;width=627.2" alt="image.png" /></p><h3 id="文件视图"><a class="markdownIt-Anchor" href="#文件视图"></a> 文件视图</h3><p>对设备文件的inode存储着不同的信息，有主设备号，设备类型等，但在用户看来，无论是磁盘还是外设，均是以文件的形式展现，这也印证了那句linux哲学<br />“Everything is a file”<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683189857666-682fbbc0-1c65-4a12-b514-18066a7602d4.png#averageHue=%23f1ebeb&amp;clientId=ueac3b2cb-adfd-4&amp;from=paste&amp;height=438&amp;id=u88ca975b&amp;originHeight=547&amp;originWidth=941&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=154577&amp;status=done&amp;style=none&amp;taskId=u8295e886-4fb6-46bb-97dc-215670e082a&amp;title=&amp;width=752.8" alt="image.png" /></p><h2 id="目录树"><a class="markdownIt-Anchor" href="#目录树"></a> 目录树</h2><p>前面提到，我们用文件描述符fd获取相应文件的inode，程序中的fd是由sys_open系统调用返回得到的，而sys_open接受一个文件路径名作为参数，因此sys_open一定能完成这样一件事情: 根据文件路径名找到目标inode，为其创建一个文件表项，并返回一个文件描述符，用户可以通过这个文件描述符在后续操作中访问文件。<br />磁盘在用户看来，就是一个目录树，用户通过提供文件路径就可以访问目标文件。这得益于OS提供的第4层抽象，OS通过引入目录文件将整个磁盘抽象为目录树<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683256922109-d40fbe83-17aa-404f-a1d1-fd988cf812e7.png#averageHue=%23ecebeb&amp;clientId=u159c1f6d-4f34-4&amp;from=paste&amp;height=210&amp;id=u12f3b28b&amp;originHeight=394&amp;originWidth=1098&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=100179&amp;status=done&amp;style=none&amp;taskId=u6915d0f5-37f7-4c10-bd87-eb4040745e0&amp;title=&amp;width=585.4000244140625" alt="image.png" /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683257363976-efac96c3-fc89-47dd-bf1b-169b2ebf77b0.png#averageHue=%23f6f1f1&amp;clientId=u159c1f6d-4f34-4&amp;from=paste&amp;height=214&amp;id=u6eb7f79f&amp;originHeight=542&amp;originWidth=1045&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=108741&amp;status=done&amp;style=none&amp;taskId=u072ec2a5-37fe-4799-9e3f-241855829be&amp;title=&amp;width=412" alt="image.png" /><br />我们现在以查找<code>/my/data/a</code>为例讲述目录树背后的机制<br />目录树要完成的就是能够通过用户提供的路径名找到目标文件的inode, 后续找到目标磁盘块并写入的工作由前3层抽象完成。那么怎么找到inode呢？我们需要有一个根目录<code>‘/’</code>，在这个根目录文件对应的数据块下存放它所包含的子文件和子目录的目录项。目录项（directory entry）通常包含文件名和相应的 inode 号。为什么不直接在当前目录文件对应的数据块存放子目录的inode呢？因为这样会使得查找的成本高，载入不必要的数据，因此只存放文件名以供查找和inode号以获取下一级子目录的数据块<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683268668406-d13f14af-fa49-45a8-94a5-6eed988b8bdf.png#averageHue=%23f3e8e8&amp;clientId=u2e524aee-609a-4&amp;from=paste&amp;height=169&amp;id=ue7948804&amp;originHeight=211&amp;originWidth=1119&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=35714&amp;status=done&amp;style=none&amp;taskId=u7ffd6457-e5e8-43d4-a6b2-adf9826a2ff&amp;title=&amp;width=895.2" alt="image.png" /><br />于是我们用find_entry函数在根目录文件的数据块上逐个寻找与<code>my</code>匹配的目录项，并通过这个目录项获取到目录文件my的inode号。接着，我们使用 iget 函数根据找到的 inode 号在inode数组中获取相应的inode。对每一级目录，我们不断执行这个过程，首先在根目录中查找 my，然后在 my 目录中查找 data，最后在 data目录中查找 file。每一步都需要使用 find_entry 和 iget 函数来获取相应的目录项和 inode 结构。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683274582174-0b16c48c-c546-4d9e-a5c0-92f5460759c2.png#averageHue=%23f3efef&amp;clientId=uc5431738-e9c3-4&amp;from=paste&amp;height=326&amp;id=u5238a442&amp;originHeight=408&amp;originWidth=723&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=66700&amp;status=done&amp;style=none&amp;taskId=u7b0b3295-f38c-47ac-8b60-2ab5130f94a&amp;title=&amp;width=578.4" alt="image.png" /><br /><strong>旁注： inode数组</strong></p><blockquote><p>在磁盘上，inode 以数组的形式组织。这个数组被称为 inode 表。inode 表中的每个元素都是一个固定大小的 inode 结构。文件系统中的每个文件和目录都有一个唯一的 inode 号，用于在 inode 表中定位其对应的 inode 结构。inode 号从 1 开始（注意，inode 号 0 是保留的，不表示任何文件或目录）。<br />当需要访问一个文件或目录的元数据时，首先需要从磁盘上的 inode 数组（即 inode 表）中读取相应的 inode 结构。</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683269399413-22880c07-b83d-4e89-91e6-92a2b582fc0a.png#averageHue=%23f3ebeb&amp;clientId=u2e524aee-609a-4&amp;from=paste&amp;height=309&amp;id=u8b3308d9&amp;originHeight=479&amp;originWidth=1174&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=72879&amp;status=done&amp;style=none&amp;taskId=u7e928744-285e-4194-9b9b-8a5189a4732&amp;title=&amp;width=756.2000122070312" alt="image.png" /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683269374820-c630eb05-1a93-4526-afa7-daed49746719.png#averageHue=%23f4eaea&amp;clientId=u2e524aee-609a-4&amp;from=paste&amp;height=307&amp;id=ua5ddfabe&amp;originHeight=662&amp;originWidth=1032&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=108968&amp;status=done&amp;style=none&amp;taskId=u520a4bee-39a2-4a57-a47c-bbc256c77b1&amp;title=&amp;width=478.60003662109375" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1683269521793-25409a25-6f93-4993-9a38-df145bdf2e95.png#averageHue=%23eee9e9&amp;clientId=u2e524aee-609a-4&amp;from=paste&amp;height=410&amp;id=u7ad59b23&amp;originHeight=512&amp;originWidth=961&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=133667&amp;status=done&amp;style=none&amp;taskId=ua93548f9-1017-44fc-8550-a36c3562a68&amp;title=&amp;width=768.8" alt="image.png" /></p>]]></content>
      
      
      <categories>
          
          <category> Operating System </category>
          
          <category> HIT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Foundation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu界面Mac化</title>
      <link href="/2023/03/27/ubuntu_mac/"/>
      <url>/2023/03/27/ubuntu_mac/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>最终效果:<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679904915178-2b8d446d-4d5f-42d7-9850-d5a4c0dc0bcf.png#averageHue=%232dc92b&amp;clientId=u8ce3d915-14ae-4&amp;from=paste&amp;height=565&amp;id=ueeea8242&amp;name=image.png&amp;originHeight=848&amp;originWidth=1914&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=159245&amp;status=done&amp;style=none&amp;taskId=u5fb92b60-b558-40fb-9a44-b1f4da5e687&amp;title=&amp;width=1276" alt="image.png" /></p><h1 id="1-安装gnome-tweaks"><a class="markdownIt-Anchor" href="#1-安装gnome-tweaks"></a> 1. 安装GNOME Tweaks</h1><p>这个软件可以让你配置Ubuntu的交互界面，你可以在Ubuntu自带的由GNOME Software 下载<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679900946204-c742a5d9-a91a-4b67-8a85-b82a66b80d98.png#averageHue=%235e5e5e&amp;clientId=ud601214a-d7ed-4&amp;from=paste&amp;height=390&amp;id=u117233a8&amp;name=image.png&amp;originHeight=743&amp;originWidth=1084&amp;originalType=binary&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;size=75219&amp;status=done&amp;style=none&amp;taskId=uaaab7274-262a-40dc-b6b7-e1858e9749d&amp;title=&amp;width=568.760009765625" alt="image.png" /></p><span id="more"></span><p><a name="i6Rr5"></a></p><h1 id="2下载安装模拟mac风格的交互界面主题whitesur-gtk-theme"><a class="markdownIt-Anchor" href="#2下载安装模拟mac风格的交互界面主题whitesur-gtk-theme"></a> 2.下载安装模拟Mac风格的交互界面主题<a href="https://github.com/vinceliuice/WhiteSur-gtk-theme">WhiteSur-gtk-theme</a></h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/vinceliuice/WhiteSur-gtk-theme.git<span class="token builtin class-name">cd</span> WhiteSur-gtk-theme./install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a name="dH9pb"></a></p><h1 id="3-下载mac图标集"><a class="markdownIt-Anchor" href="#3-下载mac图标集"></a> 3. 下载Mac图标集</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/vinceliuice/WhiteSur-icon-theme<span class="token builtin class-name">cd</span>  WhiteSur-icon-theme./install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a name="cwXmK"></a></p><h1 id="4-解除gnome-tweak-tool-中的扩展禁用状态"><a class="markdownIt-Anchor" href="#4-解除gnome-tweak-tool-中的扩展禁用状态"></a> 4. 解除Gnome Tweak Tool 中的扩展禁用状态</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679901490751-dac0bd23-34aa-40db-a176-024e2f42459f.png#averageHue=%234d4c4c&amp;clientId=ud601214a-d7ed-4&amp;from=paste&amp;height=400&amp;id=u37ab7a7f&amp;name=image.png&amp;originHeight=625&amp;originWidth=1044&amp;originalType=binary&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;size=100597&amp;status=done&amp;style=none&amp;taskId=u1f3960dc-937b-4e46-b496-68fe90b71d4&amp;title=&amp;width=668.16" alt="image.png" /><br />安装<code>chrome-gnome-shell</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> chrome-gnome-shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着跳转到<a href="https://extensions.gnome.org/extension/19/user-themes/">User Themes</a><br />安装该插件并开启<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679901620872-e69d3a78-b565-4b13-9736-46750d55fe6b.png#averageHue=%23fcfcfb&amp;clientId=ud601214a-d7ed-4&amp;from=paste&amp;height=272&amp;id=uaa079ca5&amp;name=image.png&amp;originHeight=425&amp;originWidth=1447&amp;originalType=binary&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;size=60616&amp;status=done&amp;style=none&amp;taskId=uf904ddd5-8741-44fd-b6ad-7a7442b5c3c&amp;title=&amp;width=926.08" alt="image.png" /><br />解决<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679901649198-a2f7d303-960f-4b35-b96e-0bc7c8ae464b.png#averageHue=%23353534&amp;clientId=ud601214a-d7ed-4&amp;from=paste&amp;height=390&amp;id=u3191091d&amp;name=image.png&amp;originHeight=609&amp;originWidth=1044&amp;originalType=binary&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;size=76490&amp;status=done&amp;style=none&amp;taskId=u79e6d1ca-ed2a-420f-9c0b-caec1b63807&amp;title=&amp;width=668.16" alt="image.png" /></p><p><a name="p4iNI"></a></p><h1 id="5-安装mac风格的dock"><a class="markdownIt-Anchor" href="#5-安装mac风格的dock"></a> 5. 安装Mac风格的Dock</h1><p>安装并开启<a href="https://extensions.gnome.org/extension/307/dash-to-dock/">Dash to Dock</a>，并可自行设置Dock样式<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679903078052-658ae42a-c311-4990-93f7-dc8700c3ddb5.png#averageHue=%23696969&amp;clientId=u33b15efd-72b8-4&amp;from=paste&amp;height=437&amp;id=ub859c8a3&amp;name=image.png&amp;originHeight=683&amp;originWidth=1385&amp;originalType=binary&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;size=168939&amp;status=done&amp;style=none&amp;taskId=u7cf1d85f-9a5e-4770-8407-ce5971d3b0b&amp;title=&amp;width=886.4" alt="image.png" /></p><p><a name="EAoF9"></a></p><h1 id="6-将交通灯移动到窗口右侧"><a class="markdownIt-Anchor" href="#6-将交通灯移动到窗口右侧"></a> 6. 将交通灯移动到窗口右侧</h1><p>在GNOME Tweaks -&gt; Window Titlebars -&gt; Left<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1679904374525-112bf886-c3ed-4b08-8636-460188802e21.png#averageHue=%23393938&amp;clientId=u053a5944-acf3-4&amp;from=paste&amp;height=429&amp;id=u3ec2f613&amp;name=image.png&amp;originHeight=643&amp;originWidth=1066&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=79002&amp;status=done&amp;style=none&amp;taskId=u3d4a3f13-0d2f-4d62-9dff-3a863f75003&amp;title=&amp;width=710.6666666666666" alt="image.png" /></p>]]></content>
      
      
      <categories>
          
          <category> gadget </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tutorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[CSAPP] cachelab</title>
      <link href="/2023/03/16/CSAPP-Lab/cachelab/"/>
      <url>/2023/03/16/CSAPP-Lab/cachelab/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><a name="HHpvX"></a><h1 id="lab4-cachelab"><a class="markdownIt-Anchor" href="#lab4-cachelab"></a> lab4 cachelab</h1><span id="more"></span><h2 id="1-要做什么"><a class="markdownIt-Anchor" href="#1-要做什么"></a> 1. 要做什么</h2><ol><li>组索引位数 -s  （<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo>=</mo><msup><mn>2</mn><mi>s</mi></msup></mrow><annotation encoding="application/x-tex">S = 2^s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span></span></span></span></span></span></span></span>为高速缓存组的组数）</li><li>高速缓存行数 -E</li><li>块偏移位数 -b （<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mo>=</mo><msup><mn>2</mn><mi>b</mi></msup></mrow><annotation encoding="application/x-tex">B = 2^b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span></span></span></span></span></span></span>为高速缓存块的大小）</li></ol><p>根据内存访问记录，输出每条访问的结果（hit/miss/evict)，输出操作通过调用<code>printSummary(hit_count, miss_count, eviction_count)</code>函数完成，输出结果应当与作者提供给我们的<code>reference cache simulator</code>相同，运行<code>make</code>+<code>./test-csim</code>获取评分<br /><a name="i3aH1"></a></p><h2 id="2-getopt函数的用法"><a class="markdownIt-Anchor" href="#2-getopt函数的用法"></a> 2. getopt函数的用法</h2><p>由于三个参数通过命令行输入，因此我们需要通过C语言库中的<code>getopt</code>函数，结合switch语句从命令行中获取参数值 <br />C语言中的<code>main</code>函数是程序的入口函数，它包含两个参数：<code>argc</code>和<code>argv</code>。它们的作用如下：</p><ol><li>argc参数</li></ol><p>argc参数表示程序运行时命令行参数的个数（argument count），包括程序名本身。因此，argc的值至少为1，即第一个参数是程序名本身。如果程序没有接受任何命令行参数，则argc的值为1。</p><ol start="2"><li>argv参数</li></ol><p>argv参数是一个字符串指针数组（argument vector），每个元素指向一个命令行参数。其中，argv[0]指向程序名本身，argv[1]、argv[2]等等依次指向后续的命令行参数。<br />通过argc和argv参数，程序可以接收命令行传递的参数，从而实现更加灵活和可配置的功能。例如，可以通过命令行参数指定程序要处理的文件名、程序要使用的配置文件、程序要输出的日志级别等等。程序可以根据不同的命令行参数采取不同的行为，从而实现更加灵活和可配置的功能。<br />C语言中的<code>getopt</code>函数可以帮助程序解析命令行参数。<code>getopt</code>函数通常与<code>argc</code>和<code>argv</code>参数一起使用，可以从命令行中提取选项和参数，并根据需要执行相应的操作。以下是<code>getopt</code>函数的一般用法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> opt<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>opt <span class="token operator">=</span> <span class="token function">getopt</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">"abc:d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>opt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token char">'a'</span><span class="token operator">:</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Option -a\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token char">'b'</span><span class="token operator">:</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Option -b\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token char">'c'</span><span class="token operator">:</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Option -c with value '%s'\n"</span><span class="token punctuation">,</span> optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token char">'d'</span><span class="token operator">:</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Option -d\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token char">'?'</span><span class="token operator">:</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Unknown option: %c\n"</span><span class="token punctuation">,</span> optopt<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的例子中，<code>getopt</code>函数的第一个参数是<code>argc</code>，第二个参数是<code>argv</code>，第三个参数是一个字符串，它包含可接受的选项和参数信息。在这个字符串中，每个字符表示一个选项，如果这个选项需要接受一个参数，则在后面加上一个冒号。例如，<code>&quot;abc:d&quot;</code>表示可接受的选项有<code>-a</code>、<code>-b</code>、<code>-c</code>和<code>-d</code>，其中<code>-c</code>选项需要接受一个参数。<br /><code>getopt</code>函数会循环遍历命令行中的所有选项，每次返回一个选项和其参数（如果有）。在循环中，使用<code>switch</code>语句根据选项进行相应的操作。如果<code>getopt</code>函数发现了一个未知的选项，它会返回<code>?</code>,并将这个选项保存在<code>optopt</code>变量中。<br />以下是一些示例命令行及其对应的输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./a.out <span class="token parameter variable">-a</span> <span class="token parameter variable">-b</span> <span class="token parameter variable">-c</span> filename <span class="token parameter variable">-d</span>Option <span class="token parameter variable">-a</span>Option <span class="token parameter variable">-b</span>Option <span class="token parameter variable">-c</span> with value <span class="token string">'filename'</span>Option <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./a.out <span class="token parameter variable">-a</span> <span class="token parameter variable">-b</span> <span class="token parameter variable">-c</span>Option <span class="token parameter variable">-a</span>Option <span class="token parameter variable">-b</span>Unknown option: c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在使用<code>getopt</code>函数时，需要注意以下几点：</p><ol><li>在循环中，<code>optarg</code>变量保存当前选项的参数（如果有），可以通过这个变量获取参数的值。变量类型为字符串，可通过<code>atoi</code>函数转化为整型。</li><li>如果一个选项需要接受一个参数，但是没有给出参数，或者参数不合法，<code>getopt</code>函数会返回<code>?</code>，并将这个选项保存在<code>optopt</code>变量</li><li>如果一个选项在可接受的选项字符串中没有指定，<code>getopt</code>函数会返回<code>-1</code>，并结束循环</li></ol><p><code>getopt</code>函数的第三个参数是一个字符串，用于指定程序支持的命令行选项和参数。<br />虽然<code>getopt</code>函数可以遍历所有命令行参数，但是在不指定可接受选项字符串的情况下，<code>getopt</code>函数不知道哪些参数是选项，哪些是参数，也不知道选项是否需要参数。指定<br />可接受选项字符串可以告诉<code>getopt</code>函数哪些选项是合法的，以及它们是否需要参数，从而使<code>getopt</code>函数能够正确地解析命令行参数。接受选项字符串的格式为一个字符串，由选项和参数组成，每个选项用一个字符表示，如果选项需要参数，则在选项字符后面跟一个冒号。例如，字符串<code>&quot;ab:c&quot;</code>表示程序支持三个选项<code>-a</code>、<code>-b</code>和<code>-c</code>, 其中<code>-c</code>选项需要一个参数。<br /><a name="kBmQw"></a></p><h2 id="3-fscanf的用法"><a class="markdownIt-Anchor" href="#3-fscanf的用法"></a> 3. fscanf的用法</h2><p><code>fscanf</code>是C语言标准库中的一个函数，它可以从一个文件中读取格式化数据，并将读取的结果存储到指定的变量中，该函数返回成功填充参数列表的项目数。<code>fscanf</code>函数的基本格式如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fscanf</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，第一个参数<code>stream</code>是指向要读取数据的文件的指针；第二个参数<code>format</code>是一个字符串，用于指定读取数据的格式；第三个及之后的参数是要读取数据的变量名。<br />例如，如果你有一个文件<code>data.txt</code>，里面包含了三个整数，每个整数之间用空格分隔，你可以使用下面的代码将这些整数读取到三个变量<code>a</code>、<code>b</code>、<code>c</code>中</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"data.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>    <span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d, b = %d, c = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的例子中，<code>fscanf</code>函数的第一个参数是文件指针<code>fp</code>，第二个参数是格式化字符串<code>&quot;%d %d %d&quot;</code>，它表示要读取三个整数，每个整数之间用空格分隔。第三个、第四个和第五个参数分别是三个整数变量<code>a</code>、<code>b</code>、<code>c</code>的地址，<code>fscanf</code>函数将读取到的整数存储到这些变量中。最后，我们打印出这些变量的值，以检查是否正确读取了文件中的数据。<br /><a name="dKoHs"></a></p><h2 id="4-编写程序"><a class="markdownIt-Anchor" href="#4-编写程序"></a> 4. 编写程序</h2><p>这个实验不是真的让你去实现一个cache，而是让你编写一个能对访问记录进行应答的程序，这也是为什么writeup里强调所有的内存访问操作所需的块都不会超过行的容量<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1678952903754-2052873c-6eb8-47c2-84e6-48ae84c0df8f.png" alt="yuque_diagram.png" /></p><ol><li>cache结构声明</li></ol><p>cache本质上是一个2D array，因此我们在结构体中声明一个指向二维数组的指针</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">cache_line</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> valid_bit<span class="token punctuation">;</span><span class="token keyword">int</span> tag<span class="token punctuation">;</span>    <span class="token keyword">int</span> time_stamp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cache_line<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">cache</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> S<span class="token punctuation">;</span><span class="token keyword">int</span> E<span class="token punctuation">;</span><span class="token keyword">int</span> B<span class="token punctuation">;</span>cache_line<span class="token operator">*</span><span class="token operator">*</span> Cache<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>cache<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>main</li></ol><p>主要在于正确解析命令行参数，会用<code>getopt</code>就行</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">int</span>hit_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> miss_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> eviction_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> s<span class="token punctuation">,</span> E<span class="token punctuation">,</span> b<span class="token punctuation">,</span>opt<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> trace_name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cache<span class="token operator">*</span> my_cache<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>opt <span class="token operator">=</span> <span class="token function">getopt</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">"s:E:b:t:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token char">'s'</span><span class="token operator">:</span>   s <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'E'</span><span class="token operator">:</span>   E <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'b'</span><span class="token operator">:</span>   b <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'t'</span><span class="token operator">:</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span>trace_name<span class="token punctuation">,</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'?'</span><span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unknown option: %c\n"</span><span class="token punctuation">,</span>optopt<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>     my_cache <span class="token operator">=</span> <span class="token function">construct_cache</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>E<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">access_cache</span><span class="token punctuation">(</span>my_cache<span class="token punctuation">,</span> s<span class="token punctuation">,</span> b<span class="token punctuation">,</span> trace_name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>hit_count<span class="token punctuation">,</span> <span class="token operator">&amp;</span>miss_count<span class="token punctuation">,</span> <span class="token operator">&amp;</span>eviction_count<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">free_cache</span><span class="token punctuation">(</span>my_cache<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printSummary</span><span class="token punctuation">(</span>hit_count<span class="token punctuation">,</span> miss_count<span class="token punctuation">,</span> eviction_count<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>construct_cache</li></ol><p>根据输入的命令行参数<code>s</code>,<code>E</code>,<code>b</code>构造cache，并初始化每一个高速缓存行</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cache<span class="token operator">*</span> <span class="token function">construct_cache</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> E<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cache<span class="token operator">*</span> my_cache <span class="token operator">=</span><span class="token punctuation">(</span>cache<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// construct Cache</span> my_cache<span class="token operator">-></span>S <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">;</span> my_cache<span class="token operator">-></span>B <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">;</span> my_cache<span class="token operator">-></span>E <span class="token operator">=</span> E<span class="token punctuation">;</span> my_cache<span class="token operator">-></span>Cache <span class="token operator">=</span> <span class="token punctuation">(</span>cache_line<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>my_cache<span class="token operator">-></span>S <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cache_line<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>my_cache<span class="token operator">-></span>S<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>my_cache<span class="token operator">-></span>Cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>cache_line<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>my_cache<span class="token operator">-></span>E <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cache_line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>my_cache<span class="token operator">-></span>E<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token comment">// initialize</span><span class="token punctuation">&#123;</span>my_cache<span class="token operator">-></span>Cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>valid_bit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>my_cache<span class="token operator">-></span>Cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>my_cache<span class="token operator">-></span>Cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>time_stamp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> my_cache<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>update_LRU</li></ol><p>我是通过对每个高速缓冲行维护一个time_stamp实现的LRU，因此更新Cache中各行的LRU操作很重要。对访问的行，time_stamp置0，有效位和tag位也要做更新，其余行的time_stamp加1</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">update_LRU</span><span class="token punctuation">(</span>cache<span class="token operator">*</span> my_cache<span class="token punctuation">,</span> <span class="token keyword">int</span> ad_set<span class="token punctuation">,</span> <span class="token keyword">int</span> ad_tag<span class="token punctuation">,</span> <span class="token keyword">int</span> line_index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> my_cache<span class="token operator">-></span>E<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>my_cache<span class="token operator">-></span>Cache<span class="token punctuation">[</span>ad_set<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>valid_bit<span class="token punctuation">)</span> <span class="token operator">++</span><span class="token punctuation">(</span>my_cache<span class="token operator">-></span>Cache<span class="token punctuation">[</span>ad_set<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>time_stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>my_cache<span class="token operator">-></span>Cache<span class="token punctuation">[</span>ad_set<span class="token punctuation">]</span><span class="token punctuation">[</span>line_index<span class="token punctuation">]</span><span class="token punctuation">.</span>time_stamp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>my_cache<span class="token operator">-></span>Cache<span class="token punctuation">[</span>ad_set<span class="token punctuation">]</span><span class="token punctuation">[</span>line_index<span class="token punctuation">]</span><span class="token punctuation">.</span>valid_bit <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>my_cache<span class="token operator">-></span>Cache<span class="token punctuation">[</span>ad_set<span class="token punctuation">]</span><span class="token punctuation">[</span>line_index<span class="token punctuation">]</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> ad_tag<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>get_line_index</li></ol><p>每次访问cache，要得知hit，miss，eviction等信息，通过该函数实现：查找cache中所有行，如果找到有效位为1且tag位符合的行，则命中，否则miss</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">get_line_index</span><span class="token punctuation">(</span>cache<span class="token operator">*</span> my_cache<span class="token punctuation">,</span> <span class="token keyword">int</span> ad_set<span class="token punctuation">,</span> <span class="token keyword">int</span> ad_tag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> my_cache<span class="token operator">-></span>E<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>my_cache<span class="token operator">-></span>Cache<span class="token punctuation">[</span>ad_set<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>valid_bit <span class="token operator">&amp;&amp;</span> my_cache<span class="token operator">-></span>Cache<span class="token punctuation">[</span>ad_set<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tag <span class="token operator">==</span> ad_tag<span class="token punctuation">)</span><span class="token keyword">return</span> i<span class="token punctuation">;</span>  <span class="token comment">// hit</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// miss</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>is_not_full</li></ol><p>。进一步对miss，遍历cache所有行，如果找不到有效位为0的行，则说明cache is full，那么就额外涉及有eviction操作</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">is_not_full</span><span class="token punctuation">(</span>cache<span class="token operator">*</span> my_cache<span class="token punctuation">,</span> <span class="token keyword">int</span> ad_set<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> my_cache<span class="token operator">-></span>E<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>my_cache<span class="token operator">-></span>Cache<span class="token punctuation">[</span>ad_set<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>valid_bit<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>find_LRU</li></ol><p>对eviction操作，执行我们的LRU替换策略，先找到时间戳最大的行，再进行覆盖操作</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">find_LRU</span><span class="token punctuation">(</span>cache<span class="token operator">*</span> my_cache<span class="token punctuation">,</span> <span class="token keyword">int</span> ad_set<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> max_stamp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> evict_line <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> my_cache<span class="token operator">-></span>E<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp <span class="token operator">=</span> my_cache<span class="token operator">-></span>Cache<span class="token punctuation">[</span>ad_set<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>time_stamp<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">></span> max_stamp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>max_stamp <span class="token operator">=</span> temp<span class="token punctuation">;</span>evict_line <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> evict_line<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>access_cache</li></ol><p>我们需要用<code>fscanf</code>对数据访问操作进行解析，注意此处的<code>&quot; %c %x,%d&quot;</code>,<code>%c</code>前有一个whitespace，目的在于忽略对指令访问操作。由于不同数据访问指令执行的cache操作次数不同，因此我将对cache进行操作的部分分割成一个独立的函数<code>real_access_cache</code>。M等于L+S，因此需要两次更新。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">access_cache</span><span class="token punctuation">(</span>cache<span class="token operator">*</span> my_cache<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> trace_name<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> hit_count_ptr<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> miss_count_ptr<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> eviction_count_ptr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  FILE<span class="token operator">*</span> pFile<span class="token punctuation">;</span>   <span class="token comment">// receive access</span>     pFile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>trace_name<span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pFile<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">char</span> identifier<span class="token punctuation">;</span>     <span class="token keyword">unsigned</span> address<span class="token punctuation">;</span>     <span class="token keyword">int</span> size<span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">fscanf</span><span class="token punctuation">(</span>pFile<span class="token punctuation">,</span><span class="token string">" %c %x,%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>identifier<span class="token punctuation">,</span><span class="token operator">&amp;</span>address<span class="token punctuation">,</span><span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>     <span class="token keyword">int</span> mask <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token number">64</span><span class="token operator">-</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> ad_set <span class="token operator">=</span> <span class="token punctuation">(</span>address <span class="token operator">>></span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask<span class="token punctuation">;</span><span class="token keyword">int</span> ad_tag <span class="token operator">=</span> address <span class="token operator">>></span> <span class="token punctuation">(</span>s<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>identifier<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token char">'M'</span><span class="token operator">:</span><span class="token function">real_access_cache</span><span class="token punctuation">(</span>my_cache<span class="token punctuation">,</span> ad_set<span class="token punctuation">,</span> ad_tag<span class="token punctuation">,</span> hit_count_ptr<span class="token punctuation">,</span> miss_count_ptr<span class="token punctuation">,</span> eviction_count_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">real_access_cache</span><span class="token punctuation">(</span>my_cache<span class="token punctuation">,</span> ad_set<span class="token punctuation">,</span> ad_tag<span class="token punctuation">,</span> hit_count_ptr<span class="token punctuation">,</span> miss_count_ptr<span class="token punctuation">,</span> eviction_count_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'L'</span><span class="token operator">:</span><span class="token function">real_access_cache</span><span class="token punctuation">(</span>my_cache<span class="token punctuation">,</span> ad_set<span class="token punctuation">,</span> ad_tag<span class="token punctuation">,</span> hit_count_ptr<span class="token punctuation">,</span> miss_count_ptr<span class="token punctuation">,</span> eviction_count_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'S'</span><span class="token operator">:</span><span class="token function">real_access_cache</span><span class="token punctuation">(</span>my_cache<span class="token punctuation">,</span> ad_set<span class="token punctuation">,</span> ad_tag<span class="token punctuation">,</span> hit_count_ptr<span class="token punctuation">,</span> miss_count_ptr<span class="token punctuation">,</span> eviction_count_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">fclose</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">real_access_cache</span><span class="token punctuation">(</span>cache<span class="token operator">*</span> my_cache<span class="token punctuation">,</span> <span class="token keyword">int</span> ad_set<span class="token punctuation">,</span> <span class="token keyword">int</span> ad_tag<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> hit_count_ptr<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> miss_count_ptr<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> eviction_count_ptr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> line_index<span class="token punctuation">,</span>free_line<span class="token punctuation">,</span> evict_line<span class="token punctuation">;</span>line_index <span class="token operator">=</span> <span class="token function">get_line_index</span><span class="token punctuation">(</span>my_cache<span class="token punctuation">,</span> ad_set<span class="token punctuation">,</span> ad_tag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>line_index <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token operator">*</span>hit_count_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">update_LRU</span><span class="token punctuation">(</span>my_cache<span class="token punctuation">,</span> ad_set<span class="token punctuation">,</span> ad_tag<span class="token punctuation">,</span> line_index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>free_line <span class="token operator">=</span> <span class="token function">is_not_full</span><span class="token punctuation">(</span>my_cache<span class="token punctuation">,</span> ad_set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>free_line <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token operator">*</span>miss_count_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">update_LRU</span><span class="token punctuation">(</span>my_cache<span class="token punctuation">,</span> ad_set<span class="token punctuation">,</span> ad_tag<span class="token punctuation">,</span> free_line<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token operator">*</span>miss_count_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token operator">*</span>eviction_count_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>evict_line <span class="token operator">=</span> <span class="token function">find_LRU</span><span class="token punctuation">(</span>my_cache<span class="token punctuation">,</span>ad_set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">update_LRU</span><span class="token punctuation">(</span>my_cache<span class="token punctuation">,</span> ad_set<span class="token punctuation">,</span> ad_tag<span class="token punctuation">,</span> evict_line<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="XOedv"></a></p><h2 id="5-结果"><a class="markdownIt-Anchor" href="#5-结果"></a> 5. 结果</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1678885115012-43a6dad1-7672-42f8-b302-42c04af83585.png" alt="image.png" /></p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Foundation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[CSAPP] datalab, bomblab, attacklab</title>
      <link href="/2023/03/06/CSAPP-Lab/datalab-bomblab-attacklab/"/>
      <url>/2023/03/06/CSAPP-Lab/datalab-bomblab-attacklab/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p><a name="IR5gF"></a></p><h1 id="lab1-datalab"><a class="markdownIt-Anchor" href="#lab1-datalab"></a> lab1 dataLab</h1><span id="more"></span><p><a name="RKm5i"></a></p><h2 id="前提"><a class="markdownIt-Anchor" href="#前提"></a> 前提</h2><p>确保有一个linux系统，并已经执行过以下两条命令:<br />安装gcc：<code>sudo apt-get install build-essential</code>  <br />安装<a href="https://askubuntu.com/questions/855945/what-exactly-does-gcc-multilib-mean-on-ubuntu#:~:text=gcc%2Dmultilib%20is%20useful%20for,you%20get%20the%20idea">gcc的交叉编译环境</a>.)：<code>sudo apt-get install gcc-multilib</code>，因为实验的程序需要以32位方式编译<br />在<a href="http://csapp.cs.cmu.edu/3e/labs.html">CMU的CSAPP网站</a>上下载实验所需资料，包括**README, Writeup，Self-Study Handout，**这三部分均包含对实验的要求说明（Handout的说明在其包含的bits.c文件中由注释给出），Self-Study Handout包括用于测试的文件<br /><a name="IOcHR"></a></p><h2 id="1bitxorxy"><a class="markdownIt-Anchor" href="#1bitxorxy"></a> 1.bitXor(x,y)</h2><p>要用~和&amp;实现异或^，即将结果中 1-0，0-1对应的位设置为1<br />x&amp;y中为1的位(bit)对应 1-1； 取反后为：0-0、0-1、1-0；<br />(<sub>x&amp;</sub>y)为1的位(bit)对应 0-0； 取反后为：1-1、0-1、1-0；<br />两个做交集即为结果。（位向量可以表示集合，&amp;，|，~可视为 交，并，补操作）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*bitXor - x^y using only ~ and &amp; Example: bitXor(4, 5) = 1Legal ops: ~ &amp;Max ops: 14Rating: 1*/</span><span class="token keyword">int</span> <span class="token function">bitXor</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span>  <span class="token operator">~</span><span class="token punctuation">(</span>x<span class="token operator">&amp;</span>y<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token operator">~</span>x<span class="token operator">&amp;</span><span class="token operator">~</span>y<span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment">// if regardless '+' is illegal:(~x&amp;y) + ((x)&amp;(~y)) or ~((x&amp;y) + ((~x)&amp;(~y)))</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="mB5XE"></a></p><h2 id="2tmin"><a class="markdownIt-Anchor" href="#2tmin"></a> 2.tmin</h2><p>最简单的一题：<code>000...001</code> --&gt; <code>1000...000</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* tmin - return minimum two's complement integer Legal ops: ! ~ &amp; ^ | + &lt;&lt; >>Max ops: 4Rating: 1*/</span><span class="token keyword">int</span> <span class="token function">tmin</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">31</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="pr9MQ"></a></p><h2 id="3istmaxx"><a class="markdownIt-Anchor" href="#3istmaxx"></a> 3.isTmax(x)</h2><p>这题最开始想到 Tmin的一个性质，即对二进制补码 Tmax关于加法的逆为其本身：Tmax+Tmax = 0；因此利用这个性质写出了<code>!((~x) + (~x))</code>，但<a href="https://stackoverflow.com/questions/74541471/datalab-of-csappistmax-seems-unoperative?noredirect=1#comment131585049_74541471">测试结果出乎意料</a>，加法溢出导致了未知的行为。<br />根据 Tmax +1 = Tmin 的性质可以得出 ,  <code>100...000</code> + <code>011...111</code> = <code>111..1111</code> (-1)，可得出<code>!(~x^(x+1))</code>（^可替换为+）<br />处理特例-1： -1同样会产生结果1，根据 <code>-1+1==0</code>,<code>Tmax+1!=0</code>，进而<code>!(-1+1) !=0</code> ，<code>!(Tmax+1) ==0</code>.<br />所以<code>对Tmax, x+(x+1) = x</code> , <code>对-1,x+(x+1)!=x</code><br />用<code>x+(x+1)</code> 替换原式中的第一项x，最终得出结果：<code>!(~((x+!(x+1))^(x+1)))</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*isTmax - returns 1 if x is the maximum, two's complement number,and 0 otherwise egal ops: ! ~ &amp; ^ | +Max ops: 10Rating: 1*/</span><span class="token keyword">int</span> <span class="token function">isTmax</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token operator">!</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment">// !((~x) + (~x));  it should be right, the operator "!" seem to not work</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="kHLgK"></a></p><h2 id="4alloddbitsx"><a class="markdownIt-Anchor" href="#4alloddbitsx"></a> 4.allOddBits(x)</h2><p>这道题没想出来，在x上shift的方式想了一个多小时，总是不能满足所有测试用例，说明在x上shift是行不通的。<br />用好异或即可解决：构造<code>101...1010</code>，再用该数提取x中的奇数位，最后再与<code>101...1010</code>比较</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* allOddBits - return 1 if all odd-numbered bits in word set to 1where bits are numbered from 0 (least significant) to 31 (most significant)Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1Legal ops: ! ~ &amp; ^ | + &lt;&lt; >>Max ops: 12Rating: 2*/</span><span class="token keyword">int</span> <span class="token function">allOddBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> allOdd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0xAA</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0xAA</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0xAA</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0xAA</span><span class="token punctuation">;</span> <span class="token comment">// 10101010..101</span>  <span class="token keyword">return</span> <span class="token operator">!</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>allOdd <span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">^</span> allOdd<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="sswhY"></a></p><h2 id="5isasciidigitx"><a class="markdownIt-Anchor" href="#5isasciidigitx"></a> 5.isAsciiDigit(x)</h2><p>有点难，还是自己做出来了，主要使用了掩码提取x中的指定位，再运用前几题的经验—用异或执行比较操作。<br />x的最后四位，3bit 与 1,2bit不能同时为1，因而有<code>!((x&amp;mask2)^mask2) + (!((x&amp;mask3)^mask3)))</code>，难点在于怎么处理好式中三部分的逻辑关系</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*  * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters '0' to '9') *   Example: isAsciiDigit(0x35) = 1. *            isAsciiDigit(0x3a) = 0. *            isAsciiDigit(0x05) = 0. *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >> *   Max ops: 15 *   Rating: 3 */</span><span class="token keyword">int</span> <span class="token function">isAsciiDigit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> mask1 <span class="token operator">=</span> <span class="token number">0x3</span><span class="token punctuation">;</span>   <span class="token comment">// 000...0011</span>  <span class="token keyword">int</span> mask2 <span class="token operator">=</span> <span class="token number">0xA</span><span class="token punctuation">;</span>   <span class="token comment">// 1010</span>  <span class="token keyword">int</span> mask3 <span class="token operator">=</span> <span class="token number">0xC</span><span class="token punctuation">;</span>   <span class="token comment">// 1100</span>  <span class="token keyword">return</span>  <span class="token operator">!</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">>></span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">^</span>mask1<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">&amp;</span>mask2<span class="token punctuation">)</span><span class="token operator">^</span>mask2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">&amp;</span>mask3<span class="token punctuation">)</span><span class="token operator">^</span>mask3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="DZZaa"></a></p><h2 id="6conditional"><a class="markdownIt-Anchor" href="#6conditional"></a> 6.conditional</h2><p>比较简单，主要实现这样一个逻辑：x!=0，返回y；x=0，返回z；<br />涉及的操作是把x转化为0与1两个值，再把<code>000...0001</code>转化为<code>111...1111</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*  * conditional - same as x ? y : z  *   Example: conditional(2,4,5) = 4 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >>  *   Max ops: 16 *   Rating: 3 */</span><span class="token keyword">int</span> <span class="token function">conditional</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span>  judge <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">^</span> <span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x=0 -> judge=1,whereas x!=0 -> judge=0</span>  judge <span class="token operator">=</span> <span class="token punctuation">(</span>judge <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">31</span><span class="token punctuation">;</span> <span class="token comment">// 000...000 or 111...111</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">~</span>judge<span class="token punctuation">)</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>judge<span class="token operator">&amp;</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="MZZvz"></a></p><h2 id="7islessorequalx-y"><a class="markdownIt-Anchor" href="#7islessorequalx-y"></a> 7.isLessOrEqual(x, y)</h2><p>可通过减法<code>y-x&gt;=0</code>判断<code>x&lt;=y</code>，由于不存在-符，所以取x关于加法的逆-x，进而变为 x+y<br />那么这题就涉及加法溢出,需要对<code>x+uw  y</code>结果的三种情况的判断(negative overflow ， positive overflow)，变得复杂起来。<br />更好的想法是<strong>分析式子</strong><code>**y-x**</code><strong>并加入一个conditional操作</strong>：如果两者异号(正-负，负-正)，那么结果的正负的确定的；如果两者同号(同号相减不可能溢出)，则通过与Tmin相与提取符号位。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*  * isLessOrEqual - if x &lt;= y  then return 1, else return 0  *   Example: isLessOrEqual(4,5) = 1. *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >> *   Max ops: 24 *   Rating: 3 */</span><span class="token keyword">int</span> <span class="token function">isLessOrEqual</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> Tmin <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">31</span><span class="token punctuation">;</span> <span class="token comment">// 100...0000</span>  <span class="token keyword">int</span> signY <span class="token operator">=</span> Tmin <span class="token operator">&amp;</span> y<span class="token punctuation">;</span>  <span class="token keyword">int</span> signX <span class="token operator">=</span> Tmin <span class="token operator">&amp;</span> x<span class="token punctuation">;</span>  <span class="token keyword">int</span> judge <span class="token operator">=</span> <span class="token punctuation">(</span>signY <span class="token operator">^</span> signX<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">31</span><span class="token punctuation">;</span>   x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">~</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>judge<span class="token operator">&amp;</span>signX<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span>judge<span class="token operator">>></span><span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y<span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token operator">&amp;</span>Tmin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment">// </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="WP1Li"></a></p><h2 id="8logicalnegx"><a class="markdownIt-Anchor" href="#8logicalnegx"></a> 8.logicalNeg(x)</h2><p>这题要求自己实现一个 ！逻辑，即输入0返回1，输入N（N!=0）返回0。一开始的出发点是：x=0，返回1；x 位向量存在为1的位，返回0。但是仅靠逻辑运算符无法实现该想法。<br />于是换了一个想法：先得到x的符号位signX。signx为1，说明x为负数，可以直接得到结果；sign为0，说明x即可能为0也可能为正数，那么就要利用补码加法操作会发生的<strong>positive overflow</strong>现象，即 Tmax + x ，对任意x&gt;0均会使结果变为负数，符号位由0 --&gt;1。（positive overflow 不同于 negative overflow，并没有产生整数溢出，因此不会导致<a href="http://port70.net/~nsz/c/c11/n1570.html#3.4.3p3">undefined behavior</a>）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*  * logicalNeg - implement the ! operator, using all of  *              the legal operators except ! *   Examples: logicalNeg(3) = 0, logi'calNeg(0) = 1 *   Legal ops: ~ &amp; ^ | + &lt;&lt; >> *   Max ops: 12 *   Rating: 4  */</span><span class="token keyword">int</span> <span class="token function">logicalNeg</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> Tmin <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">31</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> Tmax <span class="token operator">=</span> <span class="token operator">~</span>Tmin<span class="token punctuation">;</span>  <span class="token keyword">int</span> signX <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">&amp;</span>Tmin<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>signX<span class="token operator">^</span><span class="token number">0x1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">+</span> Tmax<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x1</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">0x1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="Y5Acb"></a></p><h2 id="9howmanybitsx"><a class="markdownIt-Anchor" href="#9howmanybitsx"></a> 9.howManyBits(x)</h2><p>这题一开始想的是去除符号位后，找位向量中最左边的1的位置序号，但是我忽略了补码的一个性质：<strong>当数的符号位为1时，将数按符号位扩展之后其值不会变</strong>，如1101与101表示的是同一个值(-3)，因此找到最左边的1并不能得到最短的位数。<br />要找到能表示负数的最短位数，而又不受符号位拓展的影响，便要找最左边的0，而不是1。为与对正数的操作相统一，做法是把负数按位取反(Such as: 1101 -&gt; 0010)<br />按二分法逐步缩小范围，找到最左边的1</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* howManyBits - return the minimum number of bits required to represent x in *             two's complement *  Examples: howManyBits(12) = 5 *            howManyBits(298) = 10 *            howManyBits(-5) = 4 *            howManyBits(0)  = 1 *            howManyBits(-1) = 1 *            howManyBits(0x80000000) = 32 *  Legal ops: ! ~ &amp; ^ | + &lt;&lt; >> *  Max ops: 90 *  Rating: 4 */</span><span class="token keyword">int</span> <span class="token function">howManyBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> b16<span class="token punctuation">,</span>b8<span class="token punctuation">,</span>b4<span class="token punctuation">,</span>b2<span class="token punctuation">,</span>b1<span class="token punctuation">,</span>b0<span class="token punctuation">;</span>  <span class="token keyword">int</span> signX <span class="token operator">=</span> x<span class="token operator">>></span><span class="token number">31</span><span class="token punctuation">;</span>  x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">~</span>signX<span class="token punctuation">)</span> <span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>signX<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">~</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// if x is negative, let sign bit:1-> 0</span>    b16 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x<span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// ensure high 16 bits exist 1 or not</span>  x<span class="token operator">=</span>x<span class="token operator">>></span>b16<span class="token punctuation">;</span>  b8 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x<span class="token operator">>></span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// ensure high 8 bits </span>  x<span class="token operator">=</span>x<span class="token operator">>></span>b8<span class="token punctuation">;</span>  b4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x<span class="token operator">>></span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// ensure high 4 bits </span>  x<span class="token operator">=</span>x<span class="token operator">>></span>b4<span class="token punctuation">;</span>    b2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x<span class="token operator">>></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// ensure high 2 bits </span>  x<span class="token operator">=</span>x<span class="token operator">>></span>b2<span class="token punctuation">;</span>   b1 <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ensure 31 bits or not </span>  x <span class="token operator">=</span> x<span class="token operator">>></span>b1<span class="token punctuation">;</span>  b0 <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">return</span> b0<span class="token operator">+</span>b1<span class="token operator">+</span>b2<span class="token operator">+</span>b4<span class="token operator">+</span>b8<span class="token operator">+</span>b16<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 1: sign bit</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="glYde"></a></p><h2 id="10floatscale2uf"><a class="markdownIt-Anchor" href="#10floatscale2uf"></a> 10.floatScale2(uf)</h2><p>先对题目做出一点解释：传入一个<code>unsigned</code>类型的参数，但是函数内将它解释为一个浮点数类型，即参数的值不是参数的十进制值，而是其二进制形式表示的浮点数值(M×2E)<br /><strong>整体思路：用掩码分别提取sign,exponent,fraction三部分，再根据exp的值分类讨论</strong><br />注意点：对normalized，f*2的2是乘在了2E；而对denormalized，是乘在了frac表示的M上，这也是为什么<code>frac = frac &lt;&lt;1</code>，这也使得denormalized能转化到normalized (smoothly)</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//float</span><span class="token comment">/*  * floatScale2 - Return bit-level equivalent of expression 2*f for *   floating point argument f. *   Both the argument and result are passed as unsigned int's, but *   they are to be interpreted as the bit-level representation of *   single-precision floating point values. *   When argument is NaN, return argument    // revision: NaN or infinity *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while *   Max ops: 30 *   Rating: 4 */</span><span class="token keyword">unsigned</span> <span class="token function">floatScale2</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> uf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> musk_exp<span class="token punctuation">,</span>musk_frac<span class="token punctuation">,</span>sign<span class="token punctuation">,</span>exp<span class="token punctuation">,</span>frac<span class="token punctuation">,</span>result<span class="token punctuation">;</span>  musk_exp <span class="token operator">=</span> <span class="token number">0xFF</span> <span class="token operator">&lt;&lt;</span> <span class="token number">23</span><span class="token punctuation">;</span>  musk_frac <span class="token operator">=</span> <span class="token number">0x7FFFFF</span><span class="token punctuation">;</span>  exp <span class="token operator">=</span> <span class="token punctuation">(</span>uf <span class="token operator">&amp;</span> musk_exp<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">23</span><span class="token punctuation">;</span>  frac <span class="token operator">=</span> uf <span class="token operator">&amp;</span> musk_frac<span class="token punctuation">;</span>  sign <span class="token operator">=</span> <span class="token number">0x1</span><span class="token operator">&lt;&lt;</span><span class="token number">31</span> <span class="token operator">&amp;</span> uf<span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>exp <span class="token operator">==</span> <span class="token number">0xFF</span>  <span class="token punctuation">)</span> <span class="token comment">// NaN</span>     result <span class="token operator">=</span> uf<span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>exp <span class="token operator">==</span> <span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token comment">// denormalized</span>  <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>frac <span class="token operator">==</span> <span class="token number">0x0</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span>  <span class="token comment">// -0.0</span>           result <span class="token operator">=</span> uf<span class="token punctuation">;</span>        <span class="token keyword">else</span>     <span class="token comment">// +0.0</span>           result <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>          <span class="token keyword">else</span>     <span class="token punctuation">&#123;</span>        frac <span class="token operator">=</span> frac <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> sign<span class="token operator">+</span> <span class="token punctuation">(</span>exp<span class="token operator">&lt;&lt;</span><span class="token number">23</span><span class="token punctuation">)</span> <span class="token operator">+</span> frac<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>exp <span class="token operator">!=</span> <span class="token number">0x0</span> <span class="token operator">&amp;&amp;</span> exp <span class="token operator">!=</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token comment">// normalized</span>  <span class="token punctuation">&#123;</span>     exp <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>     result <span class="token operator">=</span> sign<span class="token operator">+</span> <span class="token punctuation">(</span>exp<span class="token operator">&lt;&lt;</span><span class="token number">23</span><span class="token punctuation">)</span> <span class="token operator">+</span> frac<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="tO8yh"></a></p><h2 id="11floatfloat2intuf"><a class="markdownIt-Anchor" href="#11floatfloat2intuf"></a> 11.floatFloat2Int(uf)</h2><p>浮点数类型的这几题比前面的题要轻松很多，大概是因为可用符号和结构比较充足的原因吧。<br />对题目的解释：返回浮点数f的int型表示，如输入<code>12345.0 (0x4640E400)</code>, 正确输出为<code>12345 (0x3039)</code><br />注意点：当f的值超过32bit的int类型位向量所能表示的最大值时(2^31-1)，即E&gt;31时，属于out of range</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*  * floatFloat2Int - Return bit-level equivalent of expression (int) f *   for floating point argument f. *   Argument is passed as unsigned int, but *   it is to be interpreted as the bit-level representation of a *   single-precision floating point value. *   Anything out of range (including NaN and infinity) should return *   0x80000000u. *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while *   Max ops: 30 *   Rating: 4 */</span> <span class="token keyword">int</span> <span class="token function">floatFloat2Int</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> uf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> musk_exp<span class="token punctuation">,</span>musk_frac<span class="token punctuation">,</span>exp<span class="token punctuation">,</span>frac<span class="token punctuation">,</span>sign<span class="token punctuation">,</span>E<span class="token punctuation">,</span>Bias<span class="token punctuation">,</span>result<span class="token punctuation">;</span>  musk_exp <span class="token operator">=</span> <span class="token number">0xFF</span> <span class="token operator">&lt;&lt;</span> <span class="token number">23</span><span class="token punctuation">;</span>  musk_frac <span class="token operator">=</span> <span class="token number">0x7FFFFF</span><span class="token punctuation">;</span>  exp <span class="token operator">=</span> <span class="token punctuation">(</span>uf <span class="token operator">&amp;</span> musk_exp<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">23</span><span class="token punctuation">;</span>  frac <span class="token operator">=</span> uf <span class="token operator">&amp;</span> musk_frac<span class="token punctuation">;</span>  sign <span class="token operator">=</span> <span class="token number">0x1</span><span class="token operator">&lt;&lt;</span><span class="token number">31</span> <span class="token operator">&amp;</span> uf<span class="token punctuation">;</span>  Bias <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>exp <span class="token operator">==</span> <span class="token number">0xFF</span>  <span class="token punctuation">)</span> <span class="token comment">// NaN or infinity</span>     result <span class="token operator">=</span> <span class="token number">0x80000000u</span><span class="token punctuation">;</span>       <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>exp <span class="token operator">==</span> <span class="token number">0x0</span><span class="token punctuation">)</span>     result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>exp <span class="token operator">!=</span> <span class="token number">0x0</span> <span class="token operator">&amp;&amp;</span> exp <span class="token operator">!=</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token comment">// normalized</span>  <span class="token punctuation">&#123;</span>     E <span class="token operator">=</span> exp <span class="token operator">-</span>Bias<span class="token punctuation">;</span>  <span class="token comment">// bit_num of fraction</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>E <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>E<span class="token operator">></span><span class="token number">31</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> <span class="token number">0x80000000u</span><span class="token punctuation">;</span>     <span class="token keyword">else</span>     <span class="token punctuation">&#123;</span>        frac <span class="token operator">=</span> frac<span class="token operator">>></span><span class="token punctuation">(</span><span class="token number">23</span><span class="token operator">-</span>E<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0x1</span> <span class="token operator">&lt;&lt;</span> E<span class="token punctuation">)</span> <span class="token operator">+</span> frac <span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>sign <span class="token operator">==</span> <span class="token number">0x1</span><span class="token operator">&lt;&lt;</span><span class="token number">31</span><span class="token punctuation">)</span>           result <span class="token operator">=</span> <span class="token operator">-</span> result<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="UlJMS"></a></p><h2 id="12floatpower2x"><a class="markdownIt-Anchor" href="#12floatpower2x"></a> 12.floatPower2(x)</h2><p>注意点：当2^x超过位向量所能表示的最大值（largest normalized）时，即exp 大于 254（1111 1110），属于too large</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*  * floatPower2 - Return bit-level equivalent of the expression 2.0^x *   (2.0 raised to the power x) for any 32-bit integer x. * *   The unsigned value that is returned should have the identical bit *   representation as the single-precision floating-point number 2.0^x. *   If the result is too small to be represented as a denorm, return *   0. If too large, return +INF. *  *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. Also if, while  *   Max ops: 30  *   Rating: 4 */</span><span class="token keyword">unsigned</span> <span class="token function">floatPower2</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> exp<span class="token punctuation">,</span>frac<span class="token punctuation">,</span>E<span class="token punctuation">,</span>Bias<span class="token punctuation">,</span>result<span class="token punctuation">;</span>  Bias <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  E <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">0x1</span> <span class="token operator">||</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>     frac <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">;</span>     exp <span class="token operator">=</span> E<span class="token operator">+</span>Bias<span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>exp <span class="token operator">></span> <span class="token number">254</span><span class="token punctuation">)</span>  <span class="token comment">// 1111 1110</span>        <span class="token punctuation">&#123;</span>           exp <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>           result <span class="token operator">=</span> exp <span class="token operator">&lt;&lt;</span><span class="token number">23</span><span class="token operator">+</span>frac<span class="token punctuation">;</span>                 <span class="token punctuation">&#125;</span>     <span class="token keyword">else</span>        result <span class="token operator">=</span> <span class="token punctuation">(</span>exp<span class="token operator">&lt;&lt;</span><span class="token number">23</span><span class="token punctuation">)</span> <span class="token operator">+</span> frac<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="iHsuB"></a></p><h2 id="consequence"><a class="markdownIt-Anchor" href="#consequence"></a> consequence</h2><p><code>make</code><br /><code>./driver.pl</code><br /><a name="SLl25"></a></p><h3 id="data_lab_successpng"><a class="markdownIt-Anchor" href="#data_lab_successpng"></a> <img src="https://cdn.nlark.com/yuque/0/2022/png/29536731/1669795434321-27bd7778-bde0-4d21-9ae0-425e1e785bd1.png#averageHue=%230d0c0c&amp;clientId=u8b4f2be4-4c9f-4&amp;from=ui&amp;id=ue9c8e7dc&amp;name=data_lab_success.png&amp;originHeight=631&amp;originWidth=1162&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=183673&amp;status=done&amp;style=none&amp;taskId=u00d5bd76-a7dc-4107-8697-fafe865d7ec&amp;title=" alt="data_lab_success.png" /></h3><hr /><p><a name="FsQk5"></a></p><h1 id="lab2-bomblab"><a class="markdownIt-Anchor" href="#lab2-bomblab"></a> lab2 bombLab</h1><p><a name="mm3BW"></a></p><h2 id="phase_1"><a class="markdownIt-Anchor" href="#phase_1"></a> phase_1</h2><ol><li>反汇编<code>main</code>函数：<code>read_line</code>函数之后寄存器<code>%rax</code>和<code>%rdi</code>存储了我们输入的字符串的首地址(后续的phase都是如此)</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677142575501-aadca48e-4054-40dc-977b-4719009de3e3.png#averageHue=%2362372c&amp;clientId=u40dabece-2d53-4&amp;from=paste&amp;height=113&amp;id=u7f5a75e8&amp;name=image.png&amp;originHeight=113&amp;originWidth=1058&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=65961&amp;status=done&amp;style=none&amp;taskId=u19a9cc96-f38d-462d-9d4b-fbdd1e6cd16&amp;title=&amp;width=1058" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677163430669-16842232-e1ab-4ac7-a90d-8f9a18e1c5d2.png#averageHue=%232d2d2d&amp;clientId=u40dabece-2d53-4&amp;from=paste&amp;height=128&amp;id=u1267f1f6&amp;name=image.png&amp;originHeight=128&amp;originWidth=1060&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;size=59576&amp;status=done&amp;style=none&amp;taskId=ufdd9544b-0308-49f4-86fd-49a8013d976&amp;title=%E9%AA%8C%E8%AF%81%25rdi%E6%8C%87%E5%90%91%E8%BE%93%E5%85%A5%E5%AD%97%E7%AC%A6%E4%B8%B2%281%29&amp;width=1060" alt="image.png" title="验证%rdi指向输入字符串(1)" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677163457263-f780263b-09ed-4875-bafc-0f00d7e8e894.png#averageHue=%23323232&amp;clientId=u40dabece-2d53-4&amp;from=paste&amp;height=77&amp;id=ubbe401e0&amp;name=image.png&amp;originHeight=77&amp;originWidth=723&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;size=31472&amp;status=done&amp;style=none&amp;taskId=u152fe82b-0961-427e-bd1e-8a6755f1504&amp;title=%E9%AA%8C%E8%AF%81%25rdi%E6%8C%87%E5%90%91%E8%BE%93%E5%85%A5%E5%AD%97%E7%AC%A6%E4%B8%B2%282%29&amp;width=723" alt="image.png" title="验证%rdi指向输入字符串(2)" /></p><ol start="2"><li>反汇编<code>strings_not_equal</code>函数：该函数在输入字符串与目的字符串相同时，将寄存器<code>%rax</code>（通常用作函数返回值）赋值为0 (1 vice versa)</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677143001741-9ecdcda9-b9a6-4b31-a450-5d80ed226850.png#averageHue=%23302f2f&amp;clientId=u40dabece-2d53-4&amp;from=paste&amp;height=147&amp;id=u575b769d&amp;name=image.png&amp;originHeight=147&amp;originWidth=1140&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=79269&amp;status=done&amp;style=none&amp;taskId=u9916894f-f032-4f63-b09d-6ce04314c3f&amp;title=&amp;width=1140" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677143020716-757eda92-ee3e-4fe0-9c1b-597af2e24eab.png#averageHue=%23323131&amp;clientId=u40dabece-2d53-4&amp;from=paste&amp;height=214&amp;id=uca455390&amp;name=image.png&amp;originHeight=214&amp;originWidth=973&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=98661&amp;status=done&amp;style=none&amp;taskId=u7c4aadd7-6706-4e4d-8a95-2e31a1df894&amp;title=&amp;width=973" alt="image.png" /></p><ol start="3"><li>反汇编<code>phase_1</code>函数：<code>strings_not_equal</code>函数返回值为0时，<code>test %eax, %eax</code>能使<code>je 0x400ef7&lt;phase_1+23&gt;</code>执行，phase_1 defused (explode vice versa)</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677143312955-e1e9a80c-1730-48ae-84f7-5dfded69d3a9.png#averageHue=%232e2d2d&amp;clientId=u40dabece-2d53-4&amp;from=paste&amp;height=361&amp;id=ue40fcfa2&amp;name=image.png&amp;originHeight=361&amp;originWidth=1126&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=206173&amp;status=done&amp;style=none&amp;taskId=u54ecca10-9722-4536-ba3f-f972c656feb&amp;title=&amp;width=1126" alt="image.png" /></p><ol start="4"><li>至此，只需找出目的字符串的位置即可，而目的字符串的地址明显在调用<code>strings_not_equal</code>函数之前赋值的<code>%esi：0x402400</code>寄存器中</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677143752561-a0f86e1a-fc9c-4ff2-b386-d8d929f293c5.png#averageHue=%23333333&amp;clientId=u40dabece-2d53-4&amp;from=paste&amp;height=102&amp;id=ua334cc19&amp;name=image.png&amp;originHeight=102&amp;originWidth=1118&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=39885&amp;status=done&amp;style=none&amp;taskId=u26286ab1-642e-4f50-9434-8d65b1add7d&amp;title=&amp;width=1118" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677143789980-9946be38-59bb-4852-bd3c-72747f67fc16.png#averageHue=%23333333&amp;clientId=u40dabece-2d53-4&amp;from=paste&amp;height=152&amp;id=u0cd1b8f0&amp;name=image.png&amp;originHeight=152&amp;originWidth=1065&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=69532&amp;status=done&amp;style=none&amp;taskId=u1b6e1505-7e71-4000-8504-44c050e2921&amp;title=&amp;width=1065" alt="image.png" /><br /><a name="aPHyw"></a></p><h2 id="phase_2"><a class="markdownIt-Anchor" href="#phase_2"></a> phase_2</h2><ol><li>反汇编<code>read_six_numbers</code>函数：可以推断出其实现了<code>sscanf(input, &quot;%d %d %d %d %d %d&quot;,&amp;a1,&amp;a2,&amp;a3,&amp;a4,&amp;a5,&amp;a6)</code>的功能，其中<code>&amp;a1~&amp;a6</code>分别在1)<code>%rcx:0x4(%rsi)</code>2)<code>%r8:0x8(%rsi)</code>3)<code>%r9:0xc(%rsi)</code>4)<code>%rsp:0x10(%rsi)</code>5)<code>0x8(%rsp):0x14(%rsi), 0x18(%rsi) </code> 前3个指针存储在寄存器中传递给<code>sscanf</code>函数，后三个指针存储在为<code>read_six_numbers</code>函数分配的栈空间中,可以推断出<code>%rsi</code>为一个含有六个元素的数组的首地址</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677148614935-cd29c501-e2a8-4185-9924-0829124ef293.png#averageHue=%232e2d2d&amp;clientId=u40dabece-2d53-4&amp;from=paste&amp;height=506&amp;id=ue62a1cc7&amp;name=image.png&amp;originHeight=506&amp;originWidth=1045&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=292132&amp;status=done&amp;style=none&amp;taskId=udf564ea8-5d5d-4db1-9fe7-6784845d360&amp;title=&amp;width=1045" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677150202265-dda02d42-7661-48f0-9ec1-5b420d781e9d.png#averageHue=%23313131&amp;clientId=u40dabece-2d53-4&amp;from=paste&amp;height=74&amp;id=u5d32cc04&amp;name=image.png&amp;originHeight=74&amp;originWidth=675&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=24474&amp;status=done&amp;style=none&amp;taskId=u7f387e07-3b4e-4ad1-bae1-5f9cf213c77&amp;title=&amp;width=675" alt="image.png" /></p><ol start="2"><li>反汇编<code>phase_2</code>函数：判断a1与0x1相等，不相等则explode；接着判断a2与2*a1是否相等，不相等则explode，接着都是一样的模式：判断当前数据是否与前一个数据的2倍相等，不相等则explode，直到判断完六个数据</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677150067118-dd3962a5-1458-4a3e-9399-4cf1699ca7a7.png#averageHue=%23423227&amp;clientId=u40dabece-2d53-4&amp;from=paste&amp;height=656&amp;id=u8a1ec132&amp;name=image.png&amp;originHeight=656&amp;originWidth=885&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=478280&amp;status=done&amp;style=none&amp;taskId=u1da79441-ac63-407b-ab6c-037fd3e1450&amp;title=&amp;width=885" alt="image.png" /></p><ol start="3"><li>自此，我们可以判断出这六个数字分别是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>0</mn></msup><mo separator="true">,</mo><msup><mn>2</mn><mn>1</mn></msup><mo separator="true">,</mo><msup><mn>2</mn><mn>2</mn></msup><mo separator="true">,</mo><msup><mn>2</mn><mn>3</mn></msup><mo separator="true">,</mo><msup><mn>2</mn><mn>4</mn></msup><mo separator="true">,</mo><msup><mn>2</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">2^0,2^1,2^2,2^3,2^4,2^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677149991615-e3f805b9-b4b0-4f49-bfbf-36dc2153557b.png#averageHue=%23313131&amp;clientId=u40dabece-2d53-4&amp;from=paste&amp;height=112&amp;id=ua5f4ba93&amp;name=image.png&amp;originHeight=112&amp;originWidth=782&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=34849&amp;status=done&amp;style=none&amp;taskId=u43537a4a-415e-4df2-b80d-0601d361576&amp;title=&amp;width=782" alt="image.png" /><br /><a name="XKRDk"></a></p><h2 id="phase_3"><a class="markdownIt-Anchor" href="#phase_3"></a> phase_3</h2><ol><li>反汇编<code>phase_3</code>：从<code>(%esi)</code>的字符串可以看出该函数先读取了两个输入的值，接着判断第一个值是否大于7(<code>cmpl 0x7,0x8(rsp)</code>)，并根据这个值执行间接跳转操作(<code>jmp *0x402470(,rax,8)</code>)</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677150892423-92750918-b2b5-4aa5-9b0e-e08eec5cffdd.png#averageHue=%23141313&amp;clientId=u40dabece-2d53-4&amp;from=paste&amp;height=150&amp;id=uf4734a85&amp;name=image.png&amp;originHeight=150&amp;originWidth=1074&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=61373&amp;status=done&amp;style=none&amp;taskId=u56bba885-3031-4576-9ddd-85ccf2060e9&amp;title=&amp;width=1074" alt="image.png" /></p><ol start="2"><li>查看0x402470附近存储的地址值(用于实现switch语句的跳转表)，只要地址值的地址可以由0x402470加上一个8的倍数得到，就是符合条件的，最后验证出来有7个地址值，进而有7个符合条件的<code>0x8(%rsp</code>：1 2 3 4 5 6 7</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677072562462-74d53e52-6a59-498d-9186-02f1b43b8be5.png#averageHue=%23131313&amp;clientId=u39d47224-2023-4&amp;from=paste&amp;height=324&amp;id=u10476384&amp;name=image.png&amp;originHeight=324&amp;originWidth=1067&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=80101&amp;status=done&amp;style=none&amp;taskId=u49754a92-19b8-499c-8daf-4c666824406&amp;title=&amp;width=1067" alt="image.png" /></p><ol start="3"><li>根据后续的赋值-跳转指令，可以得到对应的7个<code>0xc(%rsp)</code>：311 707 256 389 206 682 327，所以最终答案有7个: (1, 311)，(2, 707)，(3, 256)，(4, 389)，(5, 206)，(6, 682)，(7, 327)</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677151557789-3726bd23-9a03-48c7-bb2b-1a31a71ae4c0.png#averageHue=%23121212&amp;clientId=u40dabece-2d53-4&amp;from=paste&amp;height=286&amp;id=ud77abcea&amp;name=image.png&amp;originHeight=327&amp;originWidth=347&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=72813&amp;status=done&amp;style=none&amp;taskId=uaa3da35e-6e2a-42ba-af96-025e357b784&amp;title=&amp;width=304" alt="image.png" /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677151578594-a2486d66-586a-473a-ba87-8ed30e462b01.png#averageHue=%231e1e1e&amp;clientId=u40dabece-2d53-4&amp;from=paste&amp;height=294&amp;id=ud120ef9a&amp;name=image.png&amp;originHeight=391&amp;originWidth=354&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=101567&amp;status=done&amp;style=none&amp;taskId=ub5d0284e-6af4-4113-b8cd-89ebdce0f6d&amp;title=&amp;width=266" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677073427546-61c8a627-e902-4132-922f-d9c30d888865.png#averageHue=%23303030&amp;clientId=u39d47224-2023-4&amp;from=paste&amp;height=50&amp;id=u47146b93&amp;name=image.png&amp;originHeight=75&amp;originWidth=297&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8224&amp;status=done&amp;style=none&amp;taskId=u32d95d06-a5d5-44ea-9c62-17652eea139&amp;title=&amp;width=197" alt="image.png" /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677073446185-f50d15ab-e6e5-4d7f-b87a-7c41585c225e.png#averageHue=%232f2f2f&amp;clientId=u39d47224-2023-4&amp;from=paste&amp;height=47&amp;id=ue4a4e105&amp;name=image.png&amp;originHeight=70&amp;originWidth=287&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8707&amp;status=done&amp;style=none&amp;taskId=u21abdc4b-34e0-4b23-8ae8-6a213e06389&amp;title=&amp;width=192" alt="image.png" /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677073458555-0aefc97d-f40a-4b0b-8e5e-1c592d1478fb.png#averageHue=%23313131&amp;clientId=u39d47224-2023-4&amp;from=paste&amp;height=51&amp;id=u12915178&amp;name=image.png&amp;originHeight=74&amp;originWidth=307&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8649&amp;status=done&amp;style=none&amp;taskId=u884bf4d9-3d42-48e3-9d32-a6cc91f0115&amp;title=&amp;width=212" alt="image.png" /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677073483221-c6634274-ca68-4d70-b35d-bcf9c12bc64d.png#averageHue=%23292929&amp;clientId=u39d47224-2023-4&amp;from=paste&amp;height=48&amp;id=u8a9d1cb9&amp;name=image.png&amp;originHeight=71&amp;originWidth=296&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10382&amp;status=done&amp;style=none&amp;taskId=u3d742e48-f459-45a3-abcb-5a2e46a9698&amp;title=&amp;width=201" alt="image.png" /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677073498912-78462783-24d1-48c5-bd9c-dc0efd391d71.png#averageHue=%232a2a29&amp;clientId=u39d47224-2023-4&amp;from=paste&amp;height=47&amp;id=uc7e8ea56&amp;name=image.png&amp;originHeight=75&amp;originWidth=290&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11606&amp;status=done&amp;style=none&amp;taskId=u579ff7da-06cc-49aa-bbb5-7d665920365&amp;title=&amp;width=183" alt="image.png" /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677073505761-bdd3ef17-0fcd-491a-8c9d-c021bd67b4a8.png#averageHue=%23272727&amp;clientId=u39d47224-2023-4&amp;from=paste&amp;height=53&amp;id=u656875e3&amp;name=image.png&amp;originHeight=78&amp;originWidth=307&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11833&amp;status=done&amp;style=none&amp;taskId=u1ec87705-b895-47c3-98cb-1da89ebe401&amp;title=&amp;width=208" alt="image.png" /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677073525247-e99ecac4-12c7-4929-ac87-722029dcb4fd.png#averageHue=%23303030&amp;clientId=u39d47224-2023-4&amp;from=paste&amp;height=49&amp;id=uaaf9dd91&amp;name=image.png&amp;originHeight=74&amp;originWidth=316&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8976&amp;status=done&amp;style=none&amp;taskId=u262b648d-9811-41df-9106-07a991aca4a&amp;title=&amp;width=208" alt="image.png" /><br /><a name="Qae7S"></a></p><h2 id="phase_4"><a class="markdownIt-Anchor" href="#phase_4"></a> phase_4</h2><ol><li>反汇编<code>phase_4</code>函数：开头部分具有与<code>phase_3</code>函数相似的部分，均需输入两个值（留意这里，其实只需保证填充了两个值就可以），且规定了第1个值不大于14(<code>cmpl $0xe, 0x8(%rsp)</code>)，之后函数调用<code>func4</code>函数，传入三个参数<code>%edx</code>, <code>%esi</code>, <code>0x8(%rsp)</code>。虽然目前不清楚func4做了什么，但可以确定返回值必须为0(<code>test %eax, %eax</code>)。后续的<code>cmpl $0x0, 0xc(%rsp)</code>足以确定第2个值为0</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677206362623-39fe4977-5cab-4016-9003-2541d41dbe6a.png#averageHue=%232a2823&amp;clientId=u15f83395-fa33-4&amp;from=paste&amp;height=416&amp;id=ubcbcc5b1&amp;name=image.png&amp;originHeight=587&amp;originWidth=1125&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=601648&amp;status=done&amp;style=none&amp;taskId=ucd50703b-cd59-4e1b-b4f1-5fefbaddeb2&amp;title=&amp;width=797" alt="image.png" /></p><ol start="2"><li>反汇编<code>func4</code>函数：出现了<code>func4</code>调用自身的情况，所以<code>func4</code>是一个递归函数。第1部分将<code>%rax</code>赋值为<code>%edx</code>-<code>%esi</code>,再加上它的最高位(<code>%rax &gt;&gt; 31</code>)，接着执行算数右移。这里加上最高位的原因在于，当后续<code>%rax</code>在递归中值减少为-1时，最高位是符号位1，两者相加能保证<code>%rax</code>始终大于等于0，结合后续汇编内容，可以推断出第一个值<code>0x8(%rsp)</code>应当是一个无符号数，范围为0~14; 第2部分，可以看出这是一个二分查找的过程，如果<code>%ecx &gt; %edi</code>，那么就使<code>%ecx</code>变为<code>%esi</code>到<code>%edx</code>的中间值(<code>lea -0x1(%rcx), %edx</code>)；第3部分，结合eax返回必须为0的条件，可以推断出所有递归的函数调用均不应使第3部分的跳转指令执行，否则会使返回<code>phase_4</code>的<code>%rax</code>值为1</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677204842268-34841e29-56e5-4d63-9e9f-b1576cec24a4.png#averageHue=%232b2a2a&amp;clientId=u15f83395-fa33-4&amp;from=paste&amp;height=562&amp;id=u81eba999&amp;name=image.png&amp;originHeight=843&amp;originWidth=1305&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=520895&amp;status=done&amp;style=none&amp;taskId=u37b9260f-a9c9-4dd9-abb9-dd995610f26&amp;title=&amp;width=870" alt="image.png" /></p><ol start="3"><li>自此，可以推断出第1个值随递归调用次数增多而减少，进而有多个不同的值，并在减少为0时停止变化。分析后可得出有以下4个值7 3 1 0，结合第2个值为0的条件，得出符合条件的字符串有(7, 0), (3, 0), (1, 0), (0, 0)</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677206164369-fa35758d-403b-483b-ad52-af80ef73df84.png#averageHue=%232c2c2c&amp;clientId=u15f83395-fa33-4&amp;from=paste&amp;height=49&amp;id=u3b0eedfa&amp;name=image.png&amp;originHeight=74&amp;originWidth=649&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=17085&amp;status=done&amp;style=none&amp;taskId=ub467ca8a-a273-4b74-b425-f72d9e99ae4&amp;title=&amp;width=432.6666666666667" alt="image.png" /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677206214348-cbc56dfd-faed-4afb-8859-c6bb00e4be62.png#averageHue=%232c2c2c&amp;clientId=u15f83395-fa33-4&amp;from=paste&amp;height=49&amp;id=ub80967c2&amp;name=image.png&amp;originHeight=74&amp;originWidth=686&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=17880&amp;status=done&amp;style=none&amp;taskId=u78e1925a-de3d-4ff7-a76b-00e4657dd48&amp;title=&amp;width=457.3333333333333" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677206249049-10571826-c506-4fdf-bcae-4ca9487bd383.png#averageHue=%232d2d2d&amp;clientId=u15f83395-fa33-4&amp;from=paste&amp;height=46&amp;id=u3c92002a&amp;name=image.png&amp;originHeight=75&amp;originWidth=713&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=17666&amp;status=done&amp;style=none&amp;taskId=u81f0177a-9477-484d-bc60-f8009a91d73&amp;title=&amp;width=435.3333435058594" alt="image.png" /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677206271742-0b02d5c9-234f-465e-9fb7-6a9cb6c3b2f3.png#averageHue=%232c2c2c&amp;clientId=u15f83395-fa33-4&amp;from=paste&amp;height=49&amp;id=u0a7235e4&amp;name=image.png&amp;originHeight=73&amp;originWidth=674&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=17218&amp;status=done&amp;style=none&amp;taskId=u48f4584a-4771-47be-b5b5-5281e909d12&amp;title=&amp;width=449.3333333333333" alt="image.png" /><br /><a name="Kxq7k"></a></p><h2 id="phase_5"><a class="markdownIt-Anchor" href="#phase_5"></a> phase_5</h2><ol><li>反汇编<code>phase_5</code>函数：要求输入字符串包含六个字符（注意！包含空格），根据后续汇编逻辑，可反编译得到以下程序 (%fs:0x28在这里的作用：作为金丝雀值，提供堆栈保护检查)</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> index<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// %rax</span><span class="token keyword">do</span><span class="token punctuation">&#123;</span>index <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>input<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>index <span class="token operator">=</span> index<span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">;</span> <span class="token comment">// take lower four bits</span>dest<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// dest: (%rsp+0x10+%rax) source: 0x4024b0</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">string_not_equal</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// target: 0x40245e --- "flyers"</span>      <span class="token comment">//defuse</span><span class="token keyword">else</span>   <span class="token function">explode_bomb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677227102569-50a0daeb-22b8-4911-84ee-83283088ca0d.png#averageHue=%23211710&amp;clientId=ub432d06a-c081-4&amp;from=paste&amp;height=629&amp;id=u029c0758&amp;name=image.png&amp;originHeight=944&amp;originWidth=901&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=467386&amp;status=done&amp;style=none&amp;taskId=uaa2e377e-a27a-4e06-9129-f19ece505a9&amp;title=&amp;width=600.6666666666666" alt="image.png" /></p><ol start="2"><li>分别查看<code>source: 0x4024b0</code>和<code>target: 0x40245e</code>处的字符串，我们要做的就是使输入字符串形成的索引值能够从<code>0x4024b0</code>处的字符集中提取出 “flyers”</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677227207876-48a2e806-f23e-49ec-982e-698183c7bc19.png#averageHue=%23151515&amp;clientId=ub432d06a-c081-4&amp;from=paste&amp;height=52&amp;id=u3302b9b7&amp;name=image.png&amp;originHeight=78&amp;originWidth=1766&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=39766&amp;status=done&amp;style=none&amp;taskId=u6f4121a7-1717-4bf8-9d35-1f34adc43a8&amp;title=&amp;width=1177.3333333333333" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677227244326-73d2e1d2-8fa8-4452-bb1c-64b132ecd786.png#averageHue=%23131313&amp;clientId=ub432d06a-c081-4&amp;from=paste&amp;height=49&amp;id=u7ad1cd69&amp;name=image.png&amp;originHeight=73&amp;originWidth=906&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=18317&amp;status=done&amp;style=none&amp;taskId=u0a7a9ee0-efaa-4b08-8a9e-6e726ed5958&amp;title=&amp;width=604" alt="image.png" /></p><ol start="3"><li>我们的输入字符串每个字符在内存中占一个byte，<code>movzbl (%rbx, %rax, 1), %ecx</code>说明了一次循环提取一个字符，并只取该字符的低四位(<code>and $0xf, %edx</code>)作为索引值</li><li>首先先确定索引值，然后推出字符串：对比source和target两个字符串，可以确定索引值为：7 15 14 5 6 7，这6个索引值在ASCII表中对应的字符是无法输入的（eg：7 BEL），因此我们要利用只取低四位作索引值这一特点，索引值对应的四位二进制为：1001，1111，1110，0101，0110，0111 ， 因此所有(prefer a~z)低四位为以上二进制组合的均可以defuse，如ionefg，yONuvw</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677228092474-185f8fde-3015-4a64-ae85-2a4931bb2ca9.png#averageHue=%23191919&amp;clientId=ub432d06a-c081-4&amp;from=paste&amp;height=72&amp;id=u2762ccc0&amp;name=image.png&amp;originHeight=108&amp;originWidth=741&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=24485&amp;status=done&amp;style=none&amp;taskId=u4d7584c2-7474-4bc2-8df3-b7710936568&amp;title=&amp;width=494" alt="image.png" /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677228432835-1ddc8d9b-d067-4d80-82c1-d63b067d6c25.png#averageHue=%23191919&amp;clientId=ub432d06a-c081-4&amp;from=paste&amp;height=71&amp;id=uaf8564a8&amp;name=image.png&amp;originHeight=107&amp;originWidth=705&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=24585&amp;status=done&amp;style=none&amp;taskId=ud201852c-7855-4553-8543-43f2a63028c&amp;title=&amp;width=470" alt="image.png" /><br /><a name="BuuHr"></a></p><h2 id="phase_6"><a class="markdownIt-Anchor" href="#phase_6"></a> phase_6</h2><ol><li>thinking process</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">phase_6</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// %r12d</span><span class="token keyword">int</span><span class="token operator">*</span> input_copy <span class="token operator">=</span> input<span class="token punctuation">;</span> <span class="token comment">// mov %rsp, %r13</span><span class="token keyword">int</span> val<span class="token punctuation">;</span> <span class="token comment">// %eax</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    val <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>input_copy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0x0(%r13)</span>    val <span class="token operator">=</span> val<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>val<span class="token operator">></span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token function">explode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 元素值不得大于6</span>            <span class="token operator">++</span>a1<span class="token punctuation">;</span> <span class="token comment">// add $0x1, %r12d</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a1 <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// jmp 95</span>    <span class="token keyword">int</span> a2 <span class="token operator">=</span> a1<span class="token punctuation">;</span> <span class="token comment">// mov %r12d, %ebx</span>    <span class="token keyword">do</span><span class="token punctuation">&#123;</span>   <span class="token comment">// 65</span>        val <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>input<span class="token operator">+</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">==</span> <span class="token operator">*</span>input_copy<span class="token punctuation">)</span>            <span class="token function">explode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>a2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>a2<span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token punctuation">)</span> <span class="token comment">// 87</span>    <span class="token operator">++</span>input_copy<span class="token punctuation">;</span> <span class="token comment">// add $0x4, %r13</span><span class="token punctuation">&#125;</span> <span class="token comment">// 93</span><span class="token comment">/*两个信息：(已验证)1. 输入字符串中所有元素不大于62. 输入字符串中所有元素互不相等 */</span> <span class="token number">0</span><span class="token operator">~</span><span class="token number">6</span><span class="token keyword">int</span><span class="token operator">*</span> sentry <span class="token operator">=</span> input<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment">// mov 0x18(%rsp), %rsi   95</span><span class="token keyword">int</span><span class="token operator">*</span> input_copy_2 <span class="token operator">=</span> input<span class="token punctuation">;</span> <span class="token comment">// %rax</span><span class="token keyword">int</span> a3 <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment">// %edx, %ecx</span><span class="token keyword">do</span><span class="token punctuation">&#123;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>input_copy_2<span class="token punctuation">)</span> <span class="token operator">=</span> a3 <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span>input_copy_2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">++</span>input_copy_2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>input_copy_2 <span class="token operator">!=</span> sentry<span class="token punctuation">)</span><span class="token comment">/* 更新输入字符串所有值为：7-初始值(已证实), 结合之前的信息，说明此时的输入字符串均不小于1，且只可能存在一个等于1 */</span> <span class="token keyword">int</span> a4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 123 %esi  -- index</span><span class="token keyword">int</span> a5<span class="token punctuation">;</span> <span class="token comment">// %edx</span><span class="token keyword">int</span> a6<span class="token punctuation">;</span> <span class="token comment">// %eax  -- index</span>offset_166<span class="token operator">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>a4<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 166  %ecx</span><span class="token punctuation">&#123;</span>    a5 <span class="token operator">=</span> <span class="token number">0x6032d0</span><span class="token punctuation">;</span> <span class="token comment">// 143</span>    offset_148<span class="token operator">:</span>    <span class="token operator">*</span><span class="token punctuation">(</span>input<span class="token operator">+</span><span class="token number">0x20</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>a4<span class="token punctuation">)</span> <span class="token operator">=</span> a5<span class="token punctuation">;</span> <span class="token comment">// 148 [8]:20, [10]:28, [12]:30, [14]:38, [16]:40,[18]:48</span>                             <span class="token comment">//   0x6032d0, 0x6032e0  0x6032f0 0x603200 0x603310 0x603320   </span>    a4 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// add $0x4, %rsi </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a4 <span class="token operator">==</span>  <span class="token number">24</span> <span class="token punctuation">)</span>        <span class="token keyword">goto</span> offset_183<span class="token punctuation">;</span> <span class="token comment">// 161 </span>    <span class="token keyword">else</span>         <span class="token keyword">goto</span> offset_166<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span>  <span class="token comment">// 均要走这个else， 可能有一个不走这个else -->肯定有一个不走</span><span class="token punctuation">&#123;</span>    a6 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 171  </span>    <span class="token operator">&amp;</span>a5 <span class="token operator">=</span> <span class="token number">0x6032d0</span><span class="token punctuation">;</span> <span class="token comment">// 176  这个地址+0x8能多次跳转</span>    <span class="token keyword">do</span><span class="token punctuation">&#123;</span> <span class="token comment">// 130</span>        a5 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a5 <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment">// mov 0x8(%rdx),%rdx  链表?</span>        <span class="token operator">++</span>a6<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>a6 <span class="token operator">!=</span> <span class="token operator">*</span><span class="token punctuation">(</span>input<span class="token operator">+</span>a4<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment">// 139  (must have 1-6), 2-5, 3-4 , 4-3, 5-2, 6-1, (7-0)</span>    <span class="token keyword">goto</span> offset_148<span class="token punctuation">;</span>         <span class="token comment">// recorrect: 3-4, 4-3,5-2,6-1,1-6,2-5</span><span class="token punctuation">&#125;</span> <span class="token comment">// 181</span>offset_183：    function<span class="token operator">:</span> link node in order<span class="token keyword">int</span> a7 <span class="token operator">=</span> input<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//%rbx 0x20(%rsp)   *(input+ 8) ~ *(input+16) all represent a address</span><span class="token keyword">int</span><span class="token operator">*</span> input_copy_3 <span class="token operator">=</span> input<span class="token operator">+</span><span class="token number">10</span> <span class="token comment">// %rax  0x28(%rsp)</span><span class="token keyword">int</span><span class="token operator">*</span> input_copy_4 <span class="token operator">=</span> input<span class="token operator">+</span><span class="token number">20</span> <span class="token comment">// %rsi  0x50(%rsp)</span>a3 <span class="token operator">=</span> a7<span class="token punctuation">;</span> <span class="token comment">// a3:%rcx</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 201</span>    a5 <span class="token operator">=</span> <span class="token operator">*</span>input_copy_3<span class="token punctuation">;</span> <span class="token comment">//a5:%rdx [10][12]...[18][20] 6</span>    <span class="token operator">*</span><span class="token punctuation">(</span>a3<span class="token operator">+</span><span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">=</span> a5<span class="token punctuation">;</span> <span class="token comment">// 0x8(%rcx)</span>    input_copy_3 <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 0x8 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>input_copy_3 <span class="token operator">==</span> input_copy_4<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 215 </span>    a3 <span class="token operator">=</span> a5<span class="token punctuation">;</span> <span class="token comment">// mov %rdx, %rcx</span><span class="token punctuation">&#125;</span>    <span class="token comment">//   make  *(a[i-2] + 0x8) = a[i] (i = i+2: 10 12 .. 18)</span><span class="token comment">// 结束时 %rdx = * (input + 18)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>input<span class="token operator">+</span><span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 222   set last node's pointer to nullptr</span><span class="token keyword">int</span> a8 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// %ebp</span><span class="token keyword">int</span> a9 <span class="token comment">// %rax </span><span class="token keyword">do</span><span class="token punctuation">&#123;</span> <span class="token operator">&amp;</span>a9 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>a7<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// %rax   initial a7 = input[8]</span>  a9 <span class="token operator">=</span> <span class="token operator">*</span>a9<span class="token punctuation">;</span> <span class="token comment">// mov (%rax), %eax</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>input<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> a9<span class="token punctuation">)</span> <span class="token comment">// cmp %eax, (%rbx) </span>    <span class="token function">explode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 验证是否降序</span>a7 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>input<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// mov 0x8(%rbx), %rbx 更新%rbx  </span><span class="token operator">--</span>a8<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>a8<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// over</span>    <span class="token comment">/*inital:0x14c(0): 332;0x0a8(1): 168;0x39c(2): 924;0x2b3(3): 6910x1dd(4): 4770x1bb(5): 4432->3->4->5->0->1 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>我完成phase_6的时间比前五个加起来还多，从第一次反汇编phase_6到彻底搞清楚phase_6各个步骤做了什么并推出答案花的时间可能接近有6，7个小时了，确定了这是一个链表问题，将链表排序并验证。这个phase里很关键的信息就是<code>0x6032d0</code>这个地址值，通过查看该地址后24个字的内容，可以看见这里储存了一个含有6个结点的链表，然后根据这个信息分析并反编译汇编代码， 即可发现我们的最终目的是使<code>0x6032d0</code>这里的链表降序排列。输入自己推算出的答案，看见终端显示出拆弹成功真的超开心</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677403752602-71565a7a-ae83-4e0e-a0d7-cdd2e3df1fd5.png#averageHue=%23232222&amp;clientId=u54232b82-dfec-4&amp;from=paste&amp;height=165&amp;id=u5a9db9de&amp;name=image.png&amp;originHeight=248&amp;originWidth=1501&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=true&amp;size=164901&amp;status=done&amp;style=none&amp;taskId=u365af322-15ad-46fb-9cfc-245887947ea&amp;title=list%20after%20sort&amp;width=1000.6666666666666" alt="image.png" title="list after sort" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677402131273-de3ea8a9-669e-4bf2-8194-cccb235cd58b.png#averageHue=%23282828&amp;clientId=u54232b82-dfec-4&amp;from=paste&amp;height=217&amp;id=ucd4dd2ed&amp;name=image.png&amp;originHeight=325&amp;originWidth=1104&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=146781&amp;status=done&amp;style=none&amp;taskId=u67c0a4b5-d060-40b2-9b3c-921a69962c7&amp;title=&amp;width=736" alt="image.png" /><br /><a name="QjpMp"></a></p><h2 id="secret_phase"><a class="markdownIt-Anchor" href="#secret_phase"></a> secret_phase</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677404056138-294107ed-6f1c-4477-83c9-44b00041ef4b.png#averageHue=%232a2929&amp;clientId=u54232b82-dfec-4&amp;from=paste&amp;height=152&amp;id=u674c8aa7&amp;name=image.png&amp;originHeight=228&amp;originWidth=1213&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=42994&amp;status=done&amp;style=none&amp;taskId=u89aa5f1c-7b78-46bb-b51c-a2062f218dc&amp;title=&amp;width=808.6666666666666" alt="image.png" /></p><ol><li>发现彩蛋</li></ol><p>以上语句说明邪恶博士还给我们留了一手， 拆弹还没彻底完成，这个easter egg在bomb.c中是发现不了的，只能在bomb文件中寻找。CMU给出的writeup给了我们明确的提示，可以用<code>objdump -t bomb</code>查看函数的符号表，包括全局变量的名称和所有函数的名称，进而我们可以在符号表中发现secret_phase。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677404753141-3d41a656-d41d-476c-aae5-e51421f24d6e.png#averageHue=%230b0b0a&amp;clientId=u54232b82-dfec-4&amp;from=paste&amp;height=338&amp;id=u59b20a1e&amp;name=image.png&amp;originHeight=507&amp;originWidth=1706&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=217929&amp;status=done&amp;style=none&amp;taskId=ub07a14e6-ebf4-4769-b55c-e586658a966&amp;title=&amp;width=1137.3333333333333" alt="image.png" /></p><ol start="2"><li>怎么触发</li></ol><p>1)谁调用了secret_phase：<code>secret_phase</code>既然作为一个函数，那么就需要被调用，邪恶博士不会做了炸弹而不接引线，因此我们要在<code>main</code>函数中寻找可能调用<code>secret_base</code>的语句，既然phase_1到phase_6我们都分析过源码，所以调用语句肯定只能存在<code>phase_defused</code>函数中，反汇编<code>phase_defused</code>函数，果然发现了调用<code>secret_phase</code>的指令<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677404954528-c0e39bd3-077e-49cd-a460-d820f2047ce8.png#averageHue=%232b2a2a&amp;clientId=u54232b82-dfec-4&amp;from=paste&amp;height=488&amp;id=u9e4e339a&amp;name=image.png&amp;originHeight=732&amp;originWidth=1266&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=459111&amp;status=done&amp;style=none&amp;taskId=u6d1b7d59-0bf7-4df3-9948-00a20fc914f&amp;title=&amp;width=844" alt="image.png" /><br />2）在phase_defused中如何触发：从<code>main</code>函数可以看出，bomb文件在每次未触发炸弹而执行完一个phase的时候都会调用一次<code>phase_defused</code>。分析phase_defused，该函数当输入字符串表示分隔的数字值时，如果数字个数小于6个，直接返回，对应phase1~phase5；如果数字等于6个，继续执行，对应phase6<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677414713624-83322f4b-2b99-42ce-9152-3c094464743d.png#averageHue=%232a2a29&amp;clientId=u54232b82-dfec-4&amp;from=paste&amp;height=167&amp;id=u4e91d4e7&amp;name=image.png&amp;originHeight=251&amp;originWidth=1753&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=206560&amp;status=done&amp;style=none&amp;taskId=u8107d152-8bbe-44eb-beb6-bd477c6e492&amp;title=&amp;width=1168.6666666666667" alt="image.png" /><br />接着从地址<code>0x603870</code>处读取两个数字，一个字符串<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677414792269-cc61be84-af1a-449f-b88a-efdf5b602450.png#averageHue=%23262626&amp;clientId=u54232b82-dfec-4&amp;from=paste&amp;height=52&amp;id=u54634d3d&amp;name=image.png&amp;originHeight=78&amp;originWidth=676&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=25535&amp;status=done&amp;style=none&amp;taskId=uf1933c57-b4a3-46a2-a583-11eeb6c7623&amp;title=&amp;width=450.6666666666667" alt="image.png" /><br />经过验证，地址<code>0x603870</code>为phase_4阶段输入字符串的开始地址<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677414872028-db9b7aa7-d78c-450a-877d-8d643d89022d.png#averageHue=%23272626&amp;clientId=u54232b82-dfec-4&amp;from=paste&amp;height=52&amp;id=u20d9ba63&amp;name=image.png&amp;originHeight=78&amp;originWidth=763&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=32367&amp;status=done&amp;style=none&amp;taskId=uf4f5ab27-77d8-4b6a-9614-34ea9d69b04&amp;title=&amp;width=508.6666666666667" alt="image.png" /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677414887631-8de449af-6eff-4f20-9632-860f0d751f77.png#averageHue=%232b2b2b&amp;clientId=u54232b82-dfec-4&amp;from=paste&amp;height=51&amp;id=u78a64d3f&amp;name=image.png&amp;originHeight=76&amp;originWidth=856&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=31655&amp;status=done&amp;style=none&amp;taskId=u1f45d585-4254-407d-a785-6859f161d5b&amp;title=&amp;width=570.6666666666666" alt="image.png" /><br />根据后续逻辑，只要在phase_4阶段时输入<code>&quot;7 0 DrEvil&quot;</code>即可触发<code>secret_bomb</code><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677415081966-c8dd9474-52be-4ca5-b73b-da79cea387f2.png#averageHue=%232b2a2a&amp;clientId=u54232b82-dfec-4&amp;from=paste&amp;height=289&amp;id=uff04a21c&amp;name=image.png&amp;originHeight=434&amp;originWidth=1193&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=295794&amp;status=done&amp;style=none&amp;taskId=uc3d47c14-4fd2-4066-8097-d303800fa51&amp;title=&amp;width=795.3333333333334" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677415023030-75fb6b08-160a-41a7-ac0c-2cd054c806ee.png#averageHue=%23272727&amp;clientId=u54232b82-dfec-4&amp;from=paste&amp;height=53&amp;id=u647b3556&amp;name=image.png&amp;originHeight=79&amp;originWidth=501&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=19252&amp;status=done&amp;style=none&amp;taskId=ubfabe50b-c88f-4d79-8759-413c728c17a&amp;title=&amp;width=334" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677415142283-f37e926f-a289-4c18-9170-346e631d561e.png#averageHue=%232a2a2a&amp;clientId=u54232b82-dfec-4&amp;from=paste&amp;height=361&amp;id=uc5b1fa4e&amp;name=image.png&amp;originHeight=542&amp;originWidth=1158&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=228864&amp;status=done&amp;style=none&amp;taskId=u4bbc5a61-2cb2-48b7-95b7-d8b064cb1ad&amp;title=&amp;width=772" alt="image.png" /></p><ol start="3"><li>终章：拆解secret_phase</li></ol><p>1）反编译secret_base</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">secret_phase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> input_2<span class="token punctuation">;</span><span class="token comment">// (%rdi)</span>    <span class="token operator">&amp;</span>input_2 <span class="token operator">=</span> <span class="token function">read_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  %rdi</span>        <span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">0xa</span><span class="token punctuation">;</span> <span class="token comment">// %edx</span>    <span class="token keyword">int</span> a2 <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">;</span> <span class="token comment">// %esi</span>    <span class="token keyword">long</span> <span class="token keyword">int</span> input_num_1 <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>input_2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// %rax</span>    <span class="token keyword">long</span> <span class="token keyword">int</span> input_num_2 <span class="token operator">=</span> input_num_1 <span class="token comment">// %rbx</span>    input_num_1 <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>input_num_1 <span class="token operator">></span> <span class="token number">0x3e8</span> <span class="token comment">/*1000*/</span><span class="token punctuation">)</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输入的数字字符串 值小于 1001</span>    a2 <span class="token operator">=</span> input_num_2<span class="token punctuation">;</span><span class="token comment">// mov %ebx, %esi  </span>    <span class="token operator">&amp;</span>input_2 <span class="token operator">=</span> <span class="token number">0x6030f0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">fun7</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input_2<span class="token punctuation">,</span>a2<span class="token punctuation">,</span>input_num_1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ret_value: %rax</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0x2</span><span class="token punctuation">)</span>        <span class="token function">defused</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">explode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">fun7</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input_2<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> input_num_1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input_2 <span class="token operator">==</span> <span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// avoid endless recursion</span>    <span class="token keyword">int</span> a3 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input_2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 9 %edx   initial a3 = 24</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a3 <span class="token operator">&lt;=</span> a2<span class="token punctuation">)</span> <span class="token keyword">goto</span> offset_28<span class="token punctuation">;</span> <span class="token comment">// 13  a2是输入值 </span>    <span class="token comment">// a3 > a2</span>    input_2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input_2 <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// +2  turn left</span>    input_num_1 <span class="token operator">=</span> <span class="token function">fun7</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input_2<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> input_num_1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 19</span>    input_num_1 <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// input_num_q is 1 here</span>    <span class="token keyword">return</span> input_num_1<span class="token punctuation">;</span>    offset_28<span class="token operator">:</span>    input_num_1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a3 <span class="token operator">==</span> a2<span class="token punctuation">)</span> <span class="token keyword">return</span> input_num_1<span class="token punctuation">;</span>    <span class="token comment">// a3 &lt; a2</span>    input_2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input_2 <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// +4   turn right</span>    input_num_1 <span class="token operator">=</span> <span class="token function">fun7</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input_2<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> input_num_1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>    input_num_1 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>input_num_1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 1</span>    <span class="token keyword">return</span> input_num_1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）有了phase_6的经验，我在查看了特殊地址<code>0x6030f0</code>的内容后很快就反应出这又是链表相关的问题，扩大查看的地址范围后，我发现地址<code>0x6030f0</code>为起点进行索引，后面120个字大小的地址空间，表示一个高度为3，结点大小为8 words的二叉搜索树；再结合<code>secret_phase</code>的逻辑，在子函数<code>fun7</code>返回值为2时defuse，经过分析，<code>fun7</code>这个递归函数，在最后三次递归时为turn left(<code>&amp;input_2 + 0x8</code>）-&gt;turn right(<code>&amp;input_2 + 0x10</code>) -&gt; return 0时才能保证最终返回值为2，画出二叉树后，可以很清楚的看到，满足这样三步走的有且仅有子结点22 （子结点22再左走一步到叶子结点20，只是重复了一遍return 0，也满足要求，因此20也是最终答案，）<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677484445488-99b96bb8-8026-406a-8606-b6ed814389d7.png#averageHue=%232b2b2b&amp;clientId=u289fcf2a-d904-4&amp;from=paste&amp;height=565&amp;id=u5030ad8b&amp;name=image.png&amp;originHeight=848&amp;originWidth=1530&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=595091&amp;status=done&amp;style=none&amp;taskId=uf7e602a3-1dfa-4402-88da-6b6d06e26db&amp;title=&amp;width=1020" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677484586007-34081aec-ae5a-409a-9270-7503f23d697b.png#averageHue=%23fefefe&amp;clientId=u289fcf2a-d904-4&amp;from=paste&amp;height=268&amp;id=u3886e51a&amp;name=image.png&amp;originHeight=321&amp;originWidth=613&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=45328&amp;status=done&amp;style=none&amp;taskId=uc94db6c6-0837-40f5-8324-986eeadfa19&amp;title=&amp;width=511.66668701171875" alt="image.png" /><br />3) 至此，整个bomblab就结束了，花费了我十多个小时完成了这个lab还是很值得的，伴随这一个又一个defuse，成就感是满满的，哈哈哈<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677484822762-1f6d54b5-8a8f-405e-ab5b-b3de5c095440.png#averageHue=%232d2d2d&amp;clientId=u289fcf2a-d904-4&amp;from=paste&amp;height=309&amp;id=ua22fc755&amp;name=image.png&amp;originHeight=463&amp;originWidth=1657&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=276450&amp;status=done&amp;style=none&amp;taskId=ua2ea40a4-48b8-410d-a36d-c5de36dd026&amp;title=&amp;width=1104.6666666666667" alt="image.png" /></p><hr /><p><a name="SLpu6"></a></p><h1 id="lab3-attacklab"><a class="markdownIt-Anchor" href="#lab3-attacklab"></a> lab3 attacklab</h1><p><a name="UbCO7"></a></p><h2 id="前提-2"><a class="markdownIt-Anchor" href="#前提-2"></a> 前提</h2><ol><li>注意！该实验在ubuntu22.04上是没法做的，任何形式的攻击都会引发segment fault，建议用ubuntu22.04的同学跟博主一样另外再安装一个ubuntu20.04</li></ol><p>博主就是在这踩了坑，一直以为操作有问题，后来带着实验的执行环境google了一下才发现这个问题</p><ol start="2"><li>exploit string用工具<code>hex/2raw</code>构造并传递给字符串，该工具要求输入的每个字节用2-digit 十六进制数表示，两个字节之间用空格分开，输出对应的二进制序列。</li></ol><p>writeup的附录A介绍了多种<code>hex/2raw</code>接受输入字符串并传递给ctarget的多种方式，我习惯用：<br /><code>./hex2raw &lt; exploit_string.txt | ./ctarget -q</code><br />这条命令将<code>exploit_string.txt</code>作为<code>hex2raw</code>的输入，并建立管道将<code>hex2raw</code>的输出传输到<code>./ctarget</code>中，-q命令选项表示不向评分服务器发送信息，如果你是CMU的可以不用这个选项（哈哈哈）。该工具应该只接受文件流的输入，如果在终端直接执行<code>./hex2raw</code>那么将无法中止输入<br /><a name="Kk3w5"></a></p><h2 id="phase_1-2"><a class="markdownIt-Anchor" href="#phase_1-2"></a> phase_1</h2><ol><li>反汇编<code>ctarget</code>：可用<code>objdump -d ctarget</code>获取ctarget的汇编版本，为了方便，我们直接将输出定向到一个asm文件中</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677585087533-3d1cfcba-4dd9-41f4-8cc8-bb4c35b8674f.png#averageHue=%231b1b1b&amp;clientId=u2c7b2c0d-00ea-4&amp;from=paste&amp;height=40&amp;id=u07c104d6&amp;name=image.png&amp;originHeight=60&amp;originWidth=1223&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=26128&amp;status=done&amp;style=none&amp;taskId=u6e9b8aa5-d406-4587-b032-e270697a03a&amp;title=&amp;width=815.3333333333334" alt="image.png" /><br />这样我们每次查看ctarget的汇编版本时，就不用重新反汇编一次了</p><ol start="2"><li><code>vim dis_ctarget.asm</code>查看<code>getbuf</code>函数的汇编代码，可以看见它的栈帧长度为0x28（40）个字节，因此要覆盖在这之上的调用者<code>test</code>函数的ret地址，只需在缓冲区写入0x30（48）个字节即可；查看<code>touch1</code>函数，它的地址在<code>0x004017c0</code>处，因此要在exploit_string的最后8个字节上填入c0 17 40 00（little-endian）</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677585873581-353e1114-4253-4b23-aceb-6ba85c12e660.png#averageHue=%231c1c1c&amp;clientId=u2c7b2c0d-00ea-4&amp;from=paste&amp;height=318&amp;id=ub151bf36&amp;name=image.png&amp;originHeight=477&amp;originWidth=1375&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=178834&amp;status=done&amp;style=none&amp;taskId=u661b7e64-355d-4240-a2ac-0d48718019c&amp;title=&amp;width=916.6666666666666" alt="image.png" /></p><ol start="3"><li><code>vim phase_1.txt</code>输入</li></ol><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mn>0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>17</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>40</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>00</mn></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{matrix}  &amp;00  &amp;00  &amp;00  &amp;00  &amp;00  &amp;00  &amp;00 &amp;00 \\  &amp;00 &amp;00  &amp; 00 &amp;00  &amp;00  &amp;00  &amp;00 &amp;00 \\  &amp;00  &amp;00  &amp;00  &amp;00 &amp;00  &amp;00  &amp;00  &amp;00\\  &amp;00  &amp;00  &amp;00  &amp;00  &amp;00  &amp;00  &amp;00  &amp;00\\  &amp;00  &amp;00  &amp;00  &amp;00  &amp;00  &amp;00  &amp;00  &amp;00\\  &amp;c0 &amp;17  &amp;40  &amp;00  &amp;00  &amp;00  &amp;00\end{matrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.200000000000001em;vertical-align:-3.35em;"></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.850000000000001em;"><span style="top:-5.8500000000000005em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-4.650000000000001em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-3.45em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-1.05em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:0.1500000000000002em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.850000000000001em;"><span style="top:-6.010000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-4.810000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-3.6100000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-1.2100000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-0.009999999999999953em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.850000000000001em;"><span style="top:-6.010000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-4.810000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-3.6100000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-1.2100000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-0.009999999999999953em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.850000000000001em;"><span style="top:-6.010000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-4.810000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-3.6100000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-1.2100000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-0.009999999999999953em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.850000000000001em;"><span style="top:-6.010000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-4.810000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-3.6100000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-1.2100000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-0.009999999999999953em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.850000000000001em;"><span style="top:-6.010000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-4.810000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-3.6100000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-1.2100000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-0.009999999999999953em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.850000000000001em;"><span style="top:-6.010000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-4.810000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-3.6100000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-1.2100000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-0.009999999999999953em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.850000000000001em;"><span style="top:-6.010000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-4.810000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-3.6100000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-1.2100000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-0.009999999999999953em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.850000000000001em;"><span style="top:-6.010000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-4.810000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-3.6100000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-1.2100000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span></span></span></span><br />最后留了一个字节以供gets放入’ \n ’ (不放也没事，执行touch1能直接退出程序)。最后一行result显示PASS就说明攻击生效了<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677586525442-cc13fc97-7de2-4bc6-90c7-bdb9356cc9b4.png#averageHue=%231c1c1c&amp;clientId=u2c7b2c0d-00ea-4&amp;from=paste&amp;height=196&amp;id=u93bb9ade&amp;name=image.png&amp;originHeight=294&amp;originWidth=1896&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=129168&amp;status=done&amp;style=none&amp;taskId=u503e0466-2b33-4b30-9a9e-f21980d78e7&amp;title=&amp;width=1264" alt="image.png" /><br /><a name="xCSRi"></a></p><h2 id="phase_2-2"><a class="markdownIt-Anchor" href="#phase_2-2"></a> phase_2</h2><ol><li>编写汇编代码，转化为字节码：<code>vim asb.s</code>，输入以下汇编代码（push可直接压入地址，不必先放入寄存器）</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677637642575-745a9de7-6e49-4ef0-9f44-46dbe3cfb8a0.png#averageHue=%23232323&amp;clientId=u7f8a8b62-e84b-4&amp;from=paste&amp;height=62&amp;id=uc88e8483&amp;name=image.png&amp;originHeight=93&amp;originWidth=380&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=15349&amp;status=done&amp;style=none&amp;taskId=u1fe3d97e-2ee2-4e3f-b2f0-921ac53df4e&amp;title=&amp;width=253.33333333333334" alt="image.png" /><br />line1将<code>cookie</code>值赋给<code>%rdi</code>传参给<code>touch2</code>；ine2将2<code>touch2</code>的地址压入栈中，目的在于在<code>ret</code>指令执行后，从栈中弹出并赋值给<code>%rip</code>的返回地址是<code>touch2</code>的地址<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677637347348-81a97333-5ab5-4766-b689-e0a40d50a9b1.png#averageHue=%23131313&amp;clientId=u7f8a8b62-e84b-4&amp;from=paste&amp;height=221&amp;id=u494680d1&amp;name=image.png&amp;originHeight=331&amp;originWidth=1165&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=true&amp;size=130023&amp;status=done&amp;style=none&amp;taskId=u8d81b4ca-fd2a-4ce9-ba46-d1e09ded02c&amp;title=%E8%8E%B7%E5%8F%96touch2%E7%9A%84%E5%9C%B0%E5%9D%80&amp;width=776.6666666666666" alt="image.png" title="获取touch2的地址" /><br />writeup的附录B提示我们将gcc与objdump结合使用产生指令序列的字节码<br /><code>gcc -c asb.s</code><br /><code>objdump -d asb.o &gt; asb.d</code><br />这样我们就得到了指令序列的字节码，可用于构造exploit_string<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677638192080-ecafc66a-645a-4bf0-a9d2-af3a00412381.png#averageHue=%23191918&amp;clientId=u7f8a8b62-e84b-4&amp;from=paste&amp;height=203&amp;id=u9041b219&amp;name=image.png&amp;originHeight=304&amp;originWidth=962&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=84296&amp;status=done&amp;style=none&amp;taskId=ue5e430b5-0a7a-42c3-8791-f51017acec7&amp;title=&amp;width=641.3333333333334" alt="image.png" /></p><ol start="2"><li>构造<code>phase_2.txt</code>，因为<code>asb.o</code>中的代码本身就已经逆序，所以直接输入即可；用于覆盖<code>test</code>栈帧中返回地址的值可由<code>%rsp</code>的值推算出（取决于你将字节码放在缓冲区的位置），这里为了方便， 我将字节码放在了缓冲区的开头，则用于覆盖的地址就是<code>%rsp</code>的值</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677591555601-28a75db3-4efc-445a-bd75-67d6722d57ee.png#averageHue=%231d1d1d&amp;clientId=u2c7b2c0d-00ea-4&amp;from=paste&amp;height=359&amp;id=pvcAu&amp;name=image.png&amp;originHeight=539&amp;originWidth=1175&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=true&amp;size=188389&amp;status=done&amp;style=none&amp;taskId=u8ffbde5e-78e3-433e-a1a6-dfa4742b694&amp;title=%E8%8E%B7%E5%8F%96%E6%A0%88%E9%A1%B6%E5%80%BC&amp;width=783.3333333333334" alt="image.png" title="获取栈顶值" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677638376139-5fb21190-4237-424f-a168-1c204bce6ef7.png#averageHue=%231b1b1b&amp;clientId=u7f8a8b62-e84b-4&amp;from=paste&amp;height=406&amp;id=ud656f730&amp;name=image.png&amp;originHeight=609&amp;originWidth=806&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=true&amp;size=117050&amp;status=done&amp;style=none&amp;taskId=u39e09168-0d44-4223-a419-2cad498a46f&amp;title=phase_2_exploit_string&amp;width=537.3333333333334" alt="image.png" title="phase_2_exploit_string" /></p><ol start="3"><li>攻击生效</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677638454464-852c44b4-14f9-43fe-8e9f-a927c267b260.png#averageHue=%230b0b0b&amp;clientId=u7f8a8b62-e84b-4&amp;from=paste&amp;height=233&amp;id=ua99fc494&amp;name=image.png&amp;originHeight=349&amp;originWidth=1225&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=146341&amp;status=done&amp;style=none&amp;taskId=uba333293-f36a-4b4a-bd6b-7ab4d63bd03&amp;title=&amp;width=816.6666666666666" alt="image.png" /><br /><a name="TVVPU"></a></p><h2 id="phase_3-2"><a class="markdownIt-Anchor" href="#phase_3-2"></a> phase_3</h2><ol><li>与<code>phase_2</code>很像，但这次要传递的参数是字符串形式的<code>cookie</code>。因为<code>getbuf</code>的栈帧在函数结束后就被操作系统收回，且会被后续函数调用占用，因此我们将字符串<code>cookie</code>放在<code>test</code>函数的栈帧中，地址<code>0x5561dca8</code>；获取<code>touch3</code>函数的地址，编写攻击代码</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677673769317-083e3c3d-3eb7-4716-8b34-154511f96d34.png#averageHue=%231c1c1c&amp;clientId=ub6cccc71-6474-4&amp;from=paste&amp;height=236&amp;id=ufe6c6401&amp;name=image.png&amp;originHeight=354&amp;originWidth=1183&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=123850&amp;status=done&amp;style=none&amp;taskId=ue426e205-3b8c-42f1-a2ca-516774edd68&amp;title=&amp;width=788.6666666666666" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677678328785-d2f2582c-e25c-484b-83d8-4a0a2595ab07.png#averageHue=%23060606&amp;clientId=ub6cccc71-6474-4&amp;from=paste&amp;height=61&amp;id=u15b6d558&amp;name=image.png&amp;originHeight=91&amp;originWidth=347&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=11449&amp;status=done&amp;style=none&amp;taskId=u1ce98f2a-043c-4c00-b0a0-20b0f14e918&amp;title=&amp;width=231.33333333333334" alt="image.png" /></p><ol start="2"><li><code>ascii -ax</code>查看十六进制形式的ascii-table，得出<code>&quot;59b997fa&quot;</code>的ascii形式为<code>35 39 62 39 39 37 66 61</code></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677678551264-8b3b6a28-3390-45cb-bbc6-b20f241eb472.png#averageHue=%231d1d1d&amp;clientId=ub6cccc71-6474-4&amp;from=paste&amp;height=247&amp;id=u95244bf5&amp;name=image.png&amp;originHeight=370&amp;originWidth=1204&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=116378&amp;status=done&amp;style=none&amp;taskId=u6e6beaa6-64b0-4c0c-ba41-3a88510ea43&amp;title=&amp;width=802.6666666666666" alt="image.png" /></p><ol start="3"><li>覆盖返回地址和test栈帧，写入攻击代码的地址和字符串<code>cookie</code></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677678755332-3ea51646-6c2b-4212-8f6a-d6fe5551fa9a.png#averageHue=%23202020&amp;clientId=ub6cccc71-6474-4&amp;from=paste&amp;height=210&amp;id=u5caf20c9&amp;name=image.png&amp;originHeight=315&amp;originWidth=871&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=61586&amp;status=done&amp;style=none&amp;taskId=uc183fab2-b53c-4109-9912-d5f30dc3d02&amp;title=&amp;width=580.6666666666666" alt="image.png" /></p><ol start="4"><li>攻击生效</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677678782689-4f003174-6f36-4200-87cd-d46e586d9907.png#averageHue=%231d1d1d&amp;clientId=ub6cccc71-6474-4&amp;from=paste&amp;height=235&amp;id=u145918cd&amp;name=image.png&amp;originHeight=353&amp;originWidth=1184&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=131718&amp;status=done&amp;style=none&amp;taskId=u08615a2d-ec29-45b1-bc0c-7f9a93e2212&amp;title=&amp;width=789.3333333333334" alt="image.png" /><br /><a name="UnHwd"></a></p><h2 id="phase_4-2"><a class="markdownIt-Anchor" href="#phase_4-2"></a> phase_4</h2><p>确定攻击方案：<code>rtarget</code>由于具备栈随机化，以及栈内代码不可执行这两个属性，所以如果要在栈中插入攻击代码将面临两个问题：1）用于指向攻击代码的地址无法确定：因为我们要把攻击代码放入栈中，但栈的位置不确定，进而我们也无法创建指向攻击代码的指针  2）攻击代码无法执行，因为栈被标注为不可执行。writeup给了我们明确的提示，既然我们无法插入自己的攻击代码，那么就用<code>ctarget</code>自身的代码实现攻击，具体做法是通过地址跳转，截取<code>ctarget</code>的部分代码用作攻击代码；<code>gadget</code>指的是几条指令后跟着一条ret指令的程序片段，如果把函数栈设置为一连串<code>gadget</code>的地址，那么一旦执行其中一个<code>gadget</code>，<code>ret</code>指令就会不断的从栈中弹出新的<code>gadget</code>的地址赋给<code>%rip</code>,由此引发多个<code>gadget</code>的连续执行（注意函数调用栈地址的随机化跟程序代码的地址无关）</p><ol><li><code>cookie</code>的值不可能从<code>rgadget</code>中找到，需要我们自己放到栈中，如同<code>phase_3</code>一样，放的位置不能是<code>getbuf</code>的缓冲区，因此我们将其放到<code>test</code>的栈帧中；接着要实现<code>mov $0x59b997fa,%rdi</code>，需执行<code>popq %rdi</code>，根据writeup的参照表，先在<code>start_farm</code>和<code>end_farm</code>之间寻找<code>5f</code>，结果没有，但是找到了<code>58 90</code>,地址为<code>0x004019ab</code>，这代表<code>popq %rax  nop</code>，因此我们需要用<code>%rax</code>作介质传递<code>cookie</code>给<code>%rdi</code>，而在farm中我们也确实找到了<code>movq %rax, %rdi：48 89 c7</code>，地址为<code>0x004019c5</code>，一共用到了两个<code>gadget</code></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677748308138-674aa437-9522-414c-afcf-828967ad2c1b.png#averageHue=%231f1f1f&amp;clientId=u0689b11d-a2d1-4&amp;from=paste&amp;height=82&amp;id=ueb5eeaef&amp;name=image.png&amp;originHeight=123&amp;originWidth=1061&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=44128&amp;status=done&amp;style=none&amp;taskId=u3043295b-c67b-407d-81b2-642907b3b41&amp;title=&amp;width=707.3333333333334" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677748250489-e3dcf01c-ae26-4997-a969-4efde7d2c835.png#averageHue=%231c1b1b&amp;clientId=u0689b11d-a2d1-4&amp;from=paste&amp;height=163&amp;id=ube7f5b3e&amp;name=image.png&amp;originHeight=244&amp;originWidth=1060&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=73997&amp;status=done&amp;style=none&amp;taskId=ub3c3a582-4fc1-4e85-ac8e-de93a3fa7d2&amp;title=&amp;width=706.6666666666666" alt="image.png" /></p><ol start="2"><li>按照下图逻辑编写phase_4，可实现攻击。自此attacklab就结束了，第一次感觉自己当了一名hacker，感觉很棒</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677750944719-6ccf095c-ffce-4020-8cb6-f5b0f0fde9f8.png#averageHue=%2310222d&amp;clientId=u0689b11d-a2d1-4&amp;from=ui&amp;height=546&amp;id=u0eb7edee&amp;name=yuque_diagram.png&amp;originHeight=1110&amp;originWidth=380&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=38484&amp;status=done&amp;style=none&amp;taskId=uf668df10-5035-4532-8f4f-6e2ef500940&amp;title=&amp;width=187" alt="yuque_diagram.png" /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677751046005-10305a9e-443a-4de9-9d53-344ef204db84.png#averageHue=%23202020&amp;clientId=u0689b11d-a2d1-4&amp;from=paste&amp;height=186&amp;id=u3879cf7f&amp;name=image.png&amp;originHeight=279&amp;originWidth=762&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=62095&amp;status=done&amp;style=none&amp;taskId=uef71dd0c-5925-4f87-8c3b-ca049535c44&amp;title=&amp;width=508" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1677750954828-918501d5-682b-4638-ac25-f66bced64fb7.png#averageHue=%231c1c1c&amp;clientId=u0689b11d-a2d1-4&amp;from=paste&amp;height=235&amp;id=u61b7152b&amp;name=image.png&amp;originHeight=353&amp;originWidth=1387&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=128770&amp;status=done&amp;style=none&amp;taskId=u3e63c29c-34df-412e-b6ae-c66bfaa71c6&amp;title=&amp;width=924.6666666666666" alt="image.png" /></p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Foundation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言【王爽】实验流程</title>
      <link href="/2023/02/04/assembly/"/>
      <url>/2023/02/04/assembly/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><a name="MTE7s"></a># 前言：前前后后看完这本书，做完所有实验和检测点，用了接近一个月的时间，除了最后几天比较认真，其余时间是比较懒散的，这本书其实最多半个月就能解决掉。接下来会步入CSAPP第三章的学习，争取早日把有名的attack lab完成了<span id="more"></span>---<p><a name="PhqOH"></a></p><h1 id="实验1-查看cpu和内存用机器指令和汇编指令编程"><a class="markdownIt-Anchor" href="#实验1-查看cpu和内存用机器指令和汇编指令编程"></a> 实验1 查看CPU和内存，用机器指令和汇编指令编程</h1><p><a name="xymUo"></a></p><h2 id="debug环境搭建参考此文"><a class="markdownIt-Anchor" href="#debug环境搭建参考此文"></a> debug环境搭建：<a href="https://blog.csdn.net/YuzuruHanyu/article/details/80287419?spm=1001.2014.3001.5506">参考此文</a></h2><p><a name="UrdzB"></a></p><h2 id="assignment-1"><a class="markdownIt-Anchor" href="#assignment-1"></a> assignment 1</h2><ol><li>用A命令向内存中写入汇编指令，用U命令查看</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673249473372-3a80b2ab-d9e2-483c-ac41-140d30fdd765.png#averageHue=%23161616&amp;clientId=uc99250e8-54b1-4&amp;from=paste&amp;height=248&amp;id=ub963f2d1&amp;name=image.png&amp;originHeight=245&amp;originWidth=374&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6659&amp;status=done&amp;style=none&amp;taskId=u0fa9efb8-dccf-4ce1-b3ea-8d79929c540&amp;title=&amp;width=378" alt="image.png" /></p><ol start="2"><li>用R命令分别修改CS、IP寄存器，即CS:IP的指向，用T命令逐条执行</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673249669344-d36231e5-8310-46ba-a3c6-155e2601ff58.png#averageHue=%230e0e0e&amp;clientId=uc99250e8-54b1-4&amp;from=paste&amp;height=309&amp;id=udc060390&amp;name=image.png&amp;originHeight=309&amp;originWidth=608&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7838&amp;status=done&amp;style=none&amp;taskId=udc51570f-ded8-4f72-a2f5-ee442502176&amp;title=&amp;width=608" alt="image.png" /><br /><a name="rTW1r"></a></p><h2 id="assignment-2"><a class="markdownIt-Anchor" href="#assignment-2"></a> assignment 2</h2><ol><li>写入并查看指令</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673250172971-61fbb876-feda-4ca9-b81d-e558cc0e5a6a.png#averageHue=%23151515&amp;clientId=uc99250e8-54b1-4&amp;from=paste&amp;height=174&amp;id=u55f6e2fe&amp;name=image.png&amp;originHeight=174&amp;originWidth=376&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4324&amp;status=done&amp;style=none&amp;taskId=u9c9ba619-9a5c-4e5c-9e9d-45d5a6ea724&amp;title=&amp;width=376" alt="image.png" /></p><ol start="2"><li>修改_CS:IP_指向</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673250237721-ec3e62f5-f6bc-4890-8f25-b62f6d89e60e.png#averageHue=%230c0c0c&amp;clientId=uc99250e8-54b1-4&amp;from=paste&amp;height=228&amp;id=u87c23aee&amp;name=image.png&amp;originHeight=228&amp;originWidth=642&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7409&amp;status=done&amp;style=none&amp;taskId=u0c70f1dc-bfd2-4472-a4d5-84a3fe97214&amp;title=&amp;width=642" alt="image.png" /></p><ol start="3"><li>执行指令，计算<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>8</mn></msup></mrow><annotation encoding="application/x-tex">2^8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span>，结果为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>X</mi><mo>=</mo><mn>0100</mn><mi>H</mi></mrow><annotation encoding="application/x-tex">AX = 0100H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span></span></span></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673250558182-3582fd8d-9783-421c-9731-0d83ae5c81a8.png#averageHue=%23121212&amp;clientId=uc99250e8-54b1-4&amp;from=paste&amp;height=72&amp;id=u92a48cc6&amp;name=image.png&amp;originHeight=72&amp;originWidth=583&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=2934&amp;status=done&amp;style=none&amp;taskId=ud124b271-ce25-43f5-aabf-1f9dd478c19&amp;title=&amp;width=583" alt="image.png" /><br /><a name="QAZ3Z"></a></p><h2 id="assignment-3"><a class="markdownIt-Anchor" href="#assignment-3"></a> assignment 3</h2><ol><li>用D命令查找，最终在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>F</mi><mi>F</mi><mi>F</mi><mn>5</mn><mi>H</mi><mo>→</mo><mi>F</mi><mi>F</mi><mi>F</mi><mi>F</mi><mi>C</mi><mi>H</mi><mtext>（</mtext><mi>F</mi><mi>F</mi><mi>F</mi><mi>F</mi><mo>:</mo><mn>0005</mn><mo>→</mo><mi>F</mi><mi>F</mi><mi>F</mi><mi>F</mi><mo>:</mo><mn>000</mn><mi>C</mi><mtext>）</mtext></mrow><annotation encoding="application/x-tex">FFFF5H \to FFFFCH（FFFF:0005 \to FFFF:000C）</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord">5</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord cjk_fallback">（</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord cjk_fallback">）</span></span></span></span>发现<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>d</mi><mi mathvariant="normal">/</mi><mi>m</mi><mi>m</mi><mi mathvariant="normal">/</mi><mi>y</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">dd/mm/yy</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">d</span><span class="mord">/</span><span class="mord mathnormal">m</span><span class="mord mathnormal">m</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>字样的生产日期</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673251622812-ca79ef23-5a2a-46b2-ba9f-326aa9d3bc54.png#averageHue=%23161616&amp;clientId=uc99250e8-54b1-4&amp;from=paste&amp;height=68&amp;id=ud8481a70&amp;name=image.png&amp;originHeight=68&amp;originWidth=630&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=3411&amp;status=done&amp;style=none&amp;taskId=u26b9075a-3732-4bca-831f-f7252d9a335&amp;title=&amp;width=630" alt="image.png" /></p><ol start="2"><li>尝试用E命令修改，该操作失效，因为这是ROM</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673251941938-25cdf39e-5c26-49a3-81da-f108dff28da7.png#averageHue=%230f0f0f&amp;clientId=uc99250e8-54b1-4&amp;from=paste&amp;height=120&amp;id=u23687460&amp;name=image.png&amp;originHeight=120&amp;originWidth=632&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4133&amp;status=done&amp;style=none&amp;taskId=uca81322b-a794-4e03-b596-0d7a694a021&amp;title=&amp;width=632" alt="image.png" /><br /><a name="CHS7t"></a></p><h2 id="assignment-4"><a class="markdownIt-Anchor" href="#assignment-4"></a> assignment 4</h2><p>1.<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mn>0000</mn><mi>H</mi><mo>→</mo><mi>B</mi><mi>F</mi><mi>F</mi><mi>F</mi><mi>F</mi><mi>H</mi></mrow><annotation encoding="application/x-tex">A0000H \to BFFFFH</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span></span></span>对8086 PC机是显存地址，往这个范围内的内存写入数据，会改变显示器上的内容，我们可以看见屏幕上出现了笑脸、爱心和钻石<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673253290191-823908a7-61e0-4e4d-ac20-66184b8a4509.png#averageHue=%23141414&amp;clientId=uc99250e8-54b1-4&amp;from=paste&amp;height=24&amp;id=udb4b1014&amp;name=image.png&amp;originHeight=24&amp;originWidth=316&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=646&amp;status=done&amp;style=none&amp;taskId=uc1f68660-8c22-4e6b-81ab-8168f9d217e&amp;title=&amp;width=316" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673253301915-ead25a09-d4a2-48f2-ba25-7bb4b7279d64.png#averageHue=%230000aa&amp;clientId=uc99250e8-54b1-4&amp;from=paste&amp;height=46&amp;id=u1f906edf&amp;name=image.png&amp;originHeight=46&amp;originWidth=489&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1808&amp;status=done&amp;style=none&amp;taskId=u8980a613-e82f-4ceb-a518-1e33c095648&amp;title=&amp;width=489" alt="image.png" /></p><hr /><p><a name="hcb7h"></a></p><h1 id="实验2-用机器指令和汇编指令编程"><a class="markdownIt-Anchor" href="#实验2-用机器指令和汇编指令编程"></a> 实验2 用机器指令和汇编指令编程</h1><p><a name="vDc8z"></a></p><h2 id="assignment-1-2"><a class="markdownIt-Anchor" href="#assignment-1-2"></a> assignment 1</h2><ol><li>用A指令向内存中写入汇编指令，用U指令查看</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673596808599-b129a717-4d20-42a3-8823-64dc726440e3.png#averageHue=%23151515&amp;clientId=u2caa9258-9642-4&amp;from=paste&amp;height=236&amp;id=uc9b341b4&amp;name=image.png&amp;originHeight=236&amp;originWidth=374&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6210&amp;status=done&amp;style=none&amp;taskId=uf45debe0-8185-465e-b3c1-03874bac6c7&amp;title=&amp;width=374" alt="image.png" /></p><ol start="2"><li>修改CS:IP使其指向代码段</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673596896692-f6335ebe-e9b7-44cf-9a38-d686dde7d140.png#averageHue=%230a0a0a&amp;clientId=u2caa9258-9642-4&amp;from=paste&amp;height=162&amp;id=u325eac60&amp;name=image.png&amp;originHeight=162&amp;originWidth=577&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4064&amp;status=done&amp;style=none&amp;taskId=uaa5719c7-c665-4f9e-baa5-b5de2b24fc8&amp;title=&amp;width=577" alt="image.png" />、</p><ol start="3"><li>t命令逐步执行指令后查看AX、BX、SP寄存器内容</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673597028389-791ccf84-0268-4f23-976f-53e6ecd97b36.png#averageHue=%23121212&amp;clientId=u2caa9258-9642-4&amp;from=paste&amp;height=374&amp;id=ueb563e3c&amp;name=image.png&amp;originHeight=374&amp;originWidth=635&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=15302&amp;status=done&amp;style=none&amp;taskId=u24406e7c-e085-4926-bf36-d7ff7eeb06a&amp;title=&amp;width=635" alt="image.png" /><br /><a name="NB9fg"></a></p><h2 id="assignment-2-2"><a class="markdownIt-Anchor" href="#assignment-2-2"></a> assignment 2</h2><p>在使用T命令进行单步追踪的时候，产生了中断，为了保护现场，CPU将PSW、CS和IP依此入栈，导致了内存相关位置内容的改变（保留疑问）</p><hr /><p><a name="jpe3I"></a></p><h1 id="实验3-编程-编译-链接-跟踪"><a class="markdownIt-Anchor" href="#实验3-编程-编译-链接-跟踪"></a> 实验3 编程、编译、链接、跟踪</h1><p><a name="QMUAH"></a></p><h2 id="assignment-1-3"><a class="markdownIt-Anchor" href="#assignment-1-3"></a> assignment 1</h2><ol><li>编译链接生成可执行文件</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673681789903-cb9f13be-b044-4c3f-be1d-8fa401195306.png#averageHue=%230b0b0b&amp;clientId=ufc3ba72b-b1bc-4&amp;from=paste&amp;height=328&amp;id=ufc540080&amp;name=image.png&amp;originHeight=328&amp;originWidth=524&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8289&amp;status=done&amp;style=none&amp;taskId=uaf6acc9d-3a30-400a-b361-0bea1d87366&amp;title=&amp;width=524" alt="image.png" /><br /><a name="bm7kI"></a></p><h2 id="assignment-2-3"><a class="markdownIt-Anchor" href="#assignment-2-3"></a> assignment 2</h2><ol><li>debug将程序载入内存，设置CS:IP：程序所在内存段的段地址为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mi>S</mi><mo>=</mo><mn>075</mn><mi>C</mi></mrow><annotation encoding="application/x-tex">DS=075C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">7</span><span class="mord">5</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>，则PSP的地址为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>075</mn><mi>C</mi><mo>:</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">075C:0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">7</span><span class="mord">5</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，程序的地址为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>076</mn><mi>C</mi><mo>:</mo><mn>0</mn><mtext>  </mtext><mo stretchy="false">(</mo><mn>075</mn><mi>C</mi><mo>+</mo><mn>10</mn><mo>:</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">076C:0\;(075C+10:0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">7</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mord">7</span><span class="mord">5</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span>,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>S</mi><mo>:</mo><mi>I</mi><mi>P</mi><mo>=</mo><mn>076</mn><mi>C</mi><mo>:</mo><mn>0000</mn></mrow><annotation encoding="application/x-tex">CS:IP = 076C:0000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">7</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673682350829-98451696-0d75-4414-87c5-b527b5c96169.png#averageHue=%23111111&amp;clientId=ufc3ba72b-b1bc-4&amp;from=paste&amp;height=90&amp;id=u24027707&amp;name=image.png&amp;originHeight=90&amp;originWidth=583&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=3436&amp;status=done&amp;style=none&amp;taskId=u88d9a7fb-f08c-4035-82ab-48a67509d8f&amp;title=&amp;width=583" alt="image.png" /></p><ol start="2"><li>跟踪程序执行过程</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673682565168-917f19d2-8e0c-44ab-84e5-453c301bcda0.png#averageHue=%23111111&amp;clientId=ufc3ba72b-b1bc-4&amp;from=paste&amp;height=378&amp;id=u739eac5d&amp;name=image.png&amp;originHeight=378&amp;originWidth=593&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13977&amp;status=done&amp;style=none&amp;taskId=u7a4cf037-0141-418c-a6bc-3a455f22fa1&amp;title=&amp;width=593" alt="image.png" /><br />用P命令执行<code>INT 21</code><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673682678668-4d6f6ba6-a61b-408a-8aa9-f84fdd1abc8a.png#averageHue=%230d0d0d&amp;clientId=ufc3ba72b-b1bc-4&amp;from=paste&amp;height=386&amp;id=ue3d6f0ce&amp;name=image.png&amp;originHeight=386&amp;originWidth=620&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12637&amp;status=done&amp;style=none&amp;taskId=ud602a7a4-6c24-495c-b269-66ce57ddba3&amp;title=&amp;width=620" alt="image.png" /><br /><a name="fqp3r"></a></p><h2 id="assignment-3-2"><a class="markdownIt-Anchor" href="#assignment-3-2"></a> assignment 3</h2><ol><li>查看PSP的内容</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673682886059-386e1af8-2b73-480f-92b1-d2ea01cce40a.png#averageHue=%23161616&amp;clientId=ufc3ba72b-b1bc-4&amp;from=paste&amp;height=175&amp;id=ueb72f5b4&amp;name=image.png&amp;originHeight=175&amp;originWidth=625&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6346&amp;status=done&amp;style=none&amp;taskId=ufec3ae9d-8d07-4ba6-ae47-78454c6ed61&amp;title=&amp;width=625" alt="image.png" /></p><hr /><p><a name="eTiIA"></a></p><h1 id="实验4-bx和loop的使用"><a class="markdownIt-Anchor" href="#实验4-bx和loop的使用"></a> 实验4 [bx]和loop的使用</h1><p><a name="Ypsn2"></a></p><h2 id="assignment-1-4"><a class="markdownIt-Anchor" href="#assignment-1-4"></a> assignment 1</h2><ol><li>编写源程序</li></ol><pre class="line-numbers language-none"><code class="language-none">assume cs:codesgcodesg segmentmov ax, 0020Hmov ds, axmov bx, 0mov dx, 0mov cx, 64s: mov [bx],dxinc bxinc dxloop smov ax, 4c00h int 21hcodesg endsend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>编译，链接生成可执行文件</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673769654198-dcf5a11b-b298-4d67-ac52-e6412baa7953.png#averageHue=%230a0a0a&amp;clientId=ua6d781cd-6a2a-4&amp;from=paste&amp;height=308&amp;id=ucb1b0e3f&amp;name=image.png&amp;originHeight=308&amp;originWidth=563&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9162&amp;status=done&amp;style=none&amp;taskId=ud2798294-b700-4d36-9278-b89b6f31b7e&amp;title=&amp;width=563" alt="image.png" /></p><ol start="3"><li>查看载入内存的程序，可以看见标签s已被替换为地址<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>076</mn><mi>C</mi><mo>:</mo><mn>000</mn><mi>E</mi></mrow><annotation encoding="application/x-tex">076C:000E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">7</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673770040980-f6175097-5e41-41f0-a0d4-ed6dcc9e2d26.png#averageHue=%230f0f0f&amp;clientId=ua6d781cd-6a2a-4&amp;from=paste&amp;height=257&amp;id=ub7d89c02&amp;name=image.png&amp;originHeight=257&amp;originWidth=601&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9471&amp;status=done&amp;style=none&amp;taskId=u76baa400-787b-4ed1-b282-488abb7c243&amp;title=&amp;width=601" alt="image.png" /></p><ol start="4"><li>执行程序，验证结果，正确</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673770269260-0b535c86-7318-4bea-9b9b-151df8786503.png#averageHue=%23151515&amp;clientId=ua6d781cd-6a2a-4&amp;from=paste&amp;height=144&amp;id=u9760e10a&amp;name=image.png&amp;originHeight=144&amp;originWidth=480&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4621&amp;status=done&amp;style=none&amp;taskId=u407ff41a-3998-40b9-80e2-b904a9486e8&amp;title=&amp;width=480" alt="image.png" /><br /><a name="q95Oy"></a></p><h2 id="assignment-2-4"><a class="markdownIt-Anchor" href="#assignment-2-4"></a> assignment 2</h2><ol><li>编写源程序：将bx寄存器两用，即作偏移地址，又作操作数，可将程序缩短为9条指令</li></ol><pre class="line-numbers language-none"><code class="language-none">assume cs:codesgcodesg segmentmov ax, 0020Hmov ds, axmov bx, 0mov cx, 64s: mov [bx],bxinc bxloop smov ax, 4c00h int 21hcodesg endsend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>其它步骤与assigment 1一致，验证结果，正确</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673771416582-e853218d-46c6-4bf8-98d6-cacae4200dbb.png#averageHue=%231a1a1a&amp;clientId=u7cc11769-d150-4&amp;from=paste&amp;height=359&amp;id=u85d074a9&amp;name=image.png&amp;originHeight=373&amp;originWidth=490&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9679&amp;status=done&amp;style=none&amp;taskId=uca7996c4-5515-4485-9bd2-5bed6cf48b4&amp;title=&amp;width=472" alt="image.png" /><br /><a name="b3BKL"></a></p><h2 id="assignment-3-3"><a class="markdownIt-Anchor" href="#assignment-3-3"></a> assignment 3</h2><ol><li>复制的是什么：复制程序的第一条指令<code>mov ax,cs</code>到 <code>loop s</code> 指令至内存地址<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0020</mn><mo>:</mo><mn>0000</mn></mrow><annotation encoding="application/x-tex">0020:0000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">2</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>处</li><li>如何知道程序的字节数：首先可以确定第一个空应该填入CS，这是程序的段地址，其次在<code>mov cx,_____</code> 上先随意填一个1，用debug跟踪程序，用U命令查看程序所占地址范围：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>076</mn><mi>C</mi><mo>:</mo><mn>0000</mn><mo>→</mo><mn>076</mn><mi>C</mi><mo>:</mo><mn>0015</mn></mrow><annotation encoding="application/x-tex">076C:0000 \to 076C:0015</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">7</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">7</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">5</span></span></span></span>，共<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>16</mn><mi>H</mi><mtext> </mtext><mo stretchy="false">(</mo><mn>23</mn><mi>D</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">16H\,(23D)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mord">3</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mclose">)</span></span></span></span>个字节,因此第二个空应该填入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>16</mn><mi>H</mi></mrow><annotation encoding="application/x-tex">16H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span></span></span></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673774640766-de55642e-4594-4add-9f75-ac17f9cf3628.png#averageHue=%230d0d0d&amp;clientId=u7cc11769-d150-4&amp;from=paste&amp;height=282&amp;id=u704b4ac0&amp;name=image.png&amp;originHeight=282&amp;originWidth=616&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9580&amp;status=done&amp;style=none&amp;taskId=u46b6c23e-98fc-45b4-ad17-7f7d7bef327&amp;title=&amp;width=616" alt="image.png" /></p><hr /><p><a name="l6DRo"></a></p><h1 id="实验5-编写-调试具有多个段的程序"><a class="markdownIt-Anchor" href="#实验5-编写-调试具有多个段的程序"></a> 实验5 编写、调试具有多个段的程序</h1><p><a name="y07m5"></a></p><h2 id="assignment-1-5"><a class="markdownIt-Anchor" href="#assignment-1-5"></a> assignment 1</h2><ol><li>将程序载入内存后查看，可知data段段地址为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>076</mn><mi>C</mi></mrow><annotation encoding="application/x-tex">076C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">7</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>, stack段段地址为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>076</mn><mi>D</mi></mrow><annotation encoding="application/x-tex">076D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">7</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span>，code段段地址为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>076</mn><mi>E</mi></mrow><annotation encoding="application/x-tex">076E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">7</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673877104816-d24fcee5-293b-4965-a116-55b74e84812c.png#averageHue=%23101010&amp;clientId=u1b2351c9-0f42-4&amp;from=paste&amp;height=266&amp;id=u68a1fe4a&amp;name=image.png&amp;originHeight=266&amp;originWidth=619&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10189&amp;status=done&amp;style=none&amp;taskId=u25c1d019-e4f1-4cb3-9fef-a5363cacec8&amp;title=&amp;width=619" alt="image.png" /></p><ol start="2"><li>Q1：<code>G 001D</code>执行程序至程序返回前，用U命令查看data段内容: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0123</mn><mi>H</mi><mo separator="true">,</mo><mn>0456</mn><mi>H</mi><mo separator="true">,</mo><mn>0789</mn><mi>H</mi><mo separator="true">,</mo><mn>0</mn><mi>A</mi><mi>B</mi><mi>C</mi><mi>H</mi><mo separator="true">,</mo><mn>0</mn><mi>D</mi><mi>E</mi><mi>F</mi><mi>H</mi><mo separator="true">,</mo><mn>0</mn><mi>F</mi><mi>E</mi><mi>D</mi><mi>H</mi><mo separator="true">,</mo><mn>0</mn><mi>C</mi><mi>B</mi><mi>A</mi><mi>H</mi><mo separator="true">,</mo><mn>0987</mn><mi>H</mi></mrow><annotation encoding="application/x-tex">0123H,0456H,0789H,0ABCH,0DEFH,0FEDH,0CBAH,0987H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mord">1</span><span class="mord">2</span><span class="mord">3</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">4</span><span class="mord">5</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">7</span><span class="mord">8</span><span class="mord">9</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">9</span><span class="mord">8</span><span class="mord">7</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span></span></span>，与初状态(源程序)一致，该程序按顺序做了入栈和出栈操作，因此数据不变</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673877337524-5a528fcf-a7ec-47a7-ba04-6014616d76ff.png#averageHue=%231a1a1a&amp;clientId=u1b2351c9-0f42-4&amp;from=paste&amp;height=51&amp;id=u84a23991&amp;name=image.png&amp;originHeight=51&amp;originWidth=480&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1917&amp;status=done&amp;style=none&amp;taskId=u5609cee2-98bd-479e-9a89-84510ea0a9d&amp;title=&amp;width=480" alt="image.png" /></p><ol start="3"><li>Q2：R命令查看各个段寄存器的值  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo><mtext>  </mtext><mi>C</mi><mi>S</mi><mo>:</mo><mn>076</mn><mi>E</mi></mrow><annotation encoding="application/x-tex">\to \;CS:076E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">7</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span>、 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mi>S</mi><mo>:</mo><mn>076</mn><mi>C</mi></mrow><annotation encoding="application/x-tex">DS:076C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">7</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>S</mi><mo>:</mo><mn>076</mn><mi>D</mi></mrow><annotation encoding="application/x-tex">SS:076D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">7</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673877858110-72e7472f-1574-4c88-ae28-a064f40894e4.png#averageHue=%23131313&amp;clientId=u1b2351c9-0f42-4&amp;from=paste&amp;height=73&amp;id=u1f2d1ce2&amp;name=image.png&amp;originHeight=73&amp;originWidth=592&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=3486&amp;status=done&amp;style=none&amp;taskId=ub88918a8-2d91-4abe-b21e-299699ae7ce&amp;title=&amp;width=592" alt="image.png" /></p><ol start="4"><li>Q3：data段和stack段分别占16个字节，因此设code段段地址为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>，那么stack段段地址为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>−</mo><mn>1</mn><mi>H</mi></mrow><annotation encoding="application/x-tex">X-1H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span></span></span>，data段段地址为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>−</mo><mn>2</mn><mi>H</mi></mrow><annotation encoding="application/x-tex">X-2H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span></span></span>（做了assignment2后可以发现这里说法并不准确）<br /><a name="qSFne"></a></li></ol><h2 id="assignment-2-5"><a class="markdownIt-Anchor" href="#assignment-2-5"></a> assignment 2</h2><ol><li>步骤与assigment1 完全一致</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673878358257-7f67627a-48a8-45cf-bc4a-1f51e9552faa.png#averageHue=%230f0f0f&amp;clientId=u1b2351c9-0f42-4&amp;from=paste&amp;height=265&amp;id=u246ed639&amp;name=image.png&amp;originHeight=265&amp;originWidth=615&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;size=9903&amp;status=done&amp;style=none&amp;taskId=ud7500b3a-6b24-43c1-8498-3e220eabeef&amp;title=%E6%BA%90%E7%A8%8B%E5%BA%8F%E8%BD%BD%E5%85%A5%E5%86%85%E5%AD%98%E5%90%8E%E7%94%A8U%E5%91%BD%E4%BB%A4%E6%9F%A5%E7%9C%8B%EF%BC%8C%E5%8F%91%E7%8E%B0%E5%90%84%E4%B8%AA%E6%AE%B5%E7%9A%84%E5%9C%B0%E5%9D%80%E4%B8%8Eassignment1%E5%AE%8C%E5%85%A8%E4%B8%80%E8%87%B4&amp;width=615" alt="image.png" title="源程序载入内存后用U命令查看，发现各个段的地址与assignment1完全一致" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673878450151-f2a27665-630b-4784-9a07-7c364c930469.png#averageHue=%23111111&amp;clientId=u1b2351c9-0f42-4&amp;from=paste&amp;height=84&amp;id=u67d44730&amp;name=image.png&amp;originHeight=84&amp;originWidth=582&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;size=3313&amp;status=done&amp;style=none&amp;taskId=u45570d21-23d5-4112-8fa2-e8d2f41ad8a&amp;title=%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%87%B3%E7%A8%8B%E5%BA%8F%E8%BF%94%E5%9B%9E%E5%89%8D&amp;width=582" alt="image.png" title="执行程序至程序返回前" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673878510541-e58f6906-dc84-4df0-a6a2-59cfdf0b4a07.png#averageHue=%231a1a1a&amp;clientId=u1b2351c9-0f42-4&amp;from=paste&amp;height=54&amp;id=u68b4b398&amp;name=image.png&amp;originHeight=54&amp;originWidth=504&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;size=2010&amp;status=done&amp;style=none&amp;taskId=u823673f9-a9eb-4ebf-a4ee-ae34390d952&amp;title=%E6%9F%A5%E7%9C%8Bdata%E6%AE%B5%E6%95%B0%E6%8D%AE%EF%BC%8C%E4%B8%8E%E6%BA%90%E7%A8%8B%E5%BA%8F%E4%B8%80%E8%87%B4%EF%BC%8C%E6%9C%AA%E6%94%B9%E5%8F%98&amp;width=504" alt="image.png" title="查看data段数据，与源程序一致，未改变" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673878562565-32d00b48-a53b-4868-916e-9e7ddb4a279d.png#averageHue=%23131313&amp;clientId=u1b2351c9-0f42-4&amp;from=paste&amp;height=72&amp;id=udc9f18e6&amp;name=image.png&amp;originHeight=72&amp;originWidth=598&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;size=3334&amp;status=done&amp;style=none&amp;taskId=uf3897f64-0600-409f-903a-e0c60d2a195&amp;title=%E6%9F%A5%E7%9C%8B%E5%AF%84%E5%AD%98%E5%99%A8%E5%86%85%E5%AE%B9%EF%BC%8C%E5%90%84%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%86%85%E5%AE%B9%E4%B8%8Eassignment1%E5%AE%8C%E5%85%A8%E4%B8%80%E8%87%B4&amp;width=598" alt="image.png" title="查看寄存器内容，各段寄存器内容与assignment1完全一致" /></p><ol start="2"><li>得出结论：段无论大小，在源程序载入内存后，段所占内存大小一定为16的整数倍<br /><a name="AiceH"></a></li></ol><h2 id="assignment-3-4"><a class="markdownIt-Anchor" href="#assignment-3-4"></a> assignment 3</h2><ol><li>步骤与assignment1完全一致</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673879121558-74eaedb2-acd9-4a9c-a318-e028bba49db2.png#averageHue=%23101010&amp;clientId=u1b2351c9-0f42-4&amp;from=paste&amp;height=264&amp;id=u5b46f0b2&amp;name=image.png&amp;originHeight=264&amp;originWidth=583&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;size=9249&amp;status=done&amp;style=none&amp;taskId=uab9b0f8d-e010-40c9-ba7f-3de6b6e1d63&amp;title=%E8%B5%B7%E5%A7%8B%E6%AE%B5%E4%B8%BAcode%E6%AE%B5%20%28076C%29%EF%BC%8C%E5%90%8E%E9%9D%A2%E8%B7%9F%E7%9D%80data%E6%AE%B5%28076F%29%E5%92%8Cstack%E6%AE%B5%280770%29&amp;width=583" alt="image.png" title="起始段为code段 (076C)，后面跟着data段(076F)和stack段(0770)" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673879373761-d05b59a9-6591-4c25-8033-e83698bff61e.png#averageHue=%23171717&amp;clientId=u1b2351c9-0f42-4&amp;from=paste&amp;height=294&amp;id=u7e2149b7&amp;name=image.png&amp;originHeight=294&amp;originWidth=625&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;size=10607&amp;status=done&amp;style=none&amp;taskId=u25c23b4d-250b-45e7-aa47-be84b0e1458&amp;title=%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%87%B3%E7%A8%8B%E5%BA%8F%E8%BF%94%E5%9B%9E%E5%89%8D%EF%BC%8C%E6%9F%A5%E7%9C%8Bdata%E6%AE%B5%E5%86%85%E5%AE%B9%E5%92%8C%E5%90%84%E4%B8%AA%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E5%80%BC&amp;width=625" alt="image.png" title="执行程序至程序返回前，查看data段内容和各个段寄存器的值" /><br />2， 设code段段地址为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>，那么data段段地址为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>+</mo><mn>3</mn><mi>H</mi></mrow><annotation encoding="application/x-tex">X+3H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span></span></span>，stack段段地址为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>+</mo><mn>4</mn><mi>H</mi></mrow><annotation encoding="application/x-tex">X+4H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span></span></span><br /><a name="NxsNH"></a></p><h2 id="assignment-4-2"><a class="markdownIt-Anchor" href="#assignment-4-2"></a> assignment 4</h2><p>如果去掉通知编译器程序的入口的<code>end start </code>语句，那么唯一可正确运行的是起始段为code段的程序3<br /><a name="oVwXx"></a></p><h2 id="assignment-5"><a class="markdownIt-Anchor" href="#assignment-5"></a> assignment 5</h2><ol><li>编写源程序，注意在将段地址写入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">DS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span>时，要借助一个寄存器充当介质，因为立即数无法直接写入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">DS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></li></ol><pre class="line-numbers language-none"><code class="language-none">assume cs:codea segment db 1,2,3,4,5,6,7,8a endsb segmentdb 1,2,3,4,5,6,7,8b endsc segment db 0,0,0,0,0,0,0,0c endscode segmentstart:mov bx, 0mov cx, 8s:mov dx, amov ds,dxmov ax, [bx]mov dx, bmov ds,dxadd ax, [bx]mov dx, cmov ds,dxmov [bx], axinc bxloop smov ax,4c00Hint 21Hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>用debug跟踪程序，可以看到a段段地址：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>076</mn><mi>C</mi></mrow><annotation encoding="application/x-tex">076C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">7</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>、b段段地址：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>076</mn><mi>D</mi></mrow><annotation encoding="application/x-tex">076D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">7</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span>、c段段地址：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>076</mn><mi>E</mi></mrow><annotation encoding="application/x-tex">076E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">7</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673882442409-a3ef513e-eb43-4f18-abf5-ea6f262cc3f6.png#averageHue=%230e0e0e&amp;clientId=u1b2351c9-0f42-4&amp;from=paste&amp;height=333&amp;id=u80ddd30c&amp;name=image.png&amp;originHeight=333&amp;originWidth=603&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11543&amp;status=done&amp;style=none&amp;taskId=u0f76c72f-ed96-431c-8d71-352a3ca1f86&amp;title=&amp;width=603" alt="image.png" /></p><ol start="3"><li>执行程序，查看c段内容，正确</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673882790995-352f2b4b-203d-458a-b5a2-878acfd29335.png#averageHue=%231e1e1e&amp;clientId=u1b2351c9-0f42-4&amp;from=paste&amp;height=59&amp;id=uc023038f&amp;name=image.png&amp;originHeight=59&amp;originWidth=498&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;size=2633&amp;status=done&amp;style=none&amp;taskId=ucae589f2-04bc-4644-899d-6fdbd17e620&amp;title=%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F%E5%89%8D%EF%BC%8CC%E6%AE%B5%E5%86%85%E5%AE%B9&amp;width=498" alt="image.png" title="执行程序前，C段内容" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673882830219-1912f93e-456b-47b1-b06a-32816e308e07.png#averageHue=%23171717&amp;clientId=u1b2351c9-0f42-4&amp;from=paste&amp;height=95&amp;id=ud9a53aa1&amp;name=image.png&amp;originHeight=95&amp;originWidth=479&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;size=3576&amp;status=done&amp;style=none&amp;taskId=udb82a728-cd51-436e-9481-a8a6f072f71&amp;title=%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F%E5%90%8E%EF%BC%8CC%E6%AE%B5%E5%86%85%E5%AE%B9&amp;width=479" alt="image.png" title="执行程序后，C段内容" /><br /><a name="azFBM"></a></p><h2 id="assignment-6"><a class="markdownIt-Anchor" href="#assignment-6"></a> assignment 6</h2><ol><li>编写源程序，注意bx变化值应为2，因为push、pop操作是以字为单位的</li></ol><pre class="line-numbers language-none"><code class="language-none">assume cs:codea segmentdw 1,2,3,4,5,6,7,8,9,0ah,0bh,0ch,0dh,0eh,0fh,0ffha endsb segment dw 0,0,0,0,0,0,0,0b endscode segment start:mov ax, amov ds, axmov ax, b mov ss, axmov sp, 0010Hmov bx, 0mov cx, 8s:push [bx]add bx, 2loop smov ax, 4c00Hint 21Hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>用debug跟踪程序，可以看到a段段地址： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>076</mn><mi>C</mi></mrow><annotation encoding="application/x-tex">076C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">7</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span> 、 b段段地址：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>076</mn><mi>E</mi></mrow><annotation encoding="application/x-tex">076E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">7</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span>、code段段地址：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>076</mn><mi>F</mi></mrow><annotation encoding="application/x-tex">076F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">7</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673885232599-a5e6bf92-ae97-421b-ad5b-904f427aef76.png#averageHue=%230f0f0f&amp;clientId=u1b2351c9-0f42-4&amp;from=paste&amp;height=296&amp;id=ub52c7fd8&amp;name=image.png&amp;originHeight=296&amp;originWidth=590&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10267&amp;status=done&amp;style=none&amp;taskId=ub78885e9-2d92-486e-abce-ac5186f563b&amp;title=&amp;width=590" alt="image.png" /></p><ol start="3"><li>执行程序，查看b段内容，正确</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673885271367-eddf0cc8-98aa-4fe8-a38f-a014ed5f8179.png#averageHue=%231b1b1b&amp;clientId=u1b2351c9-0f42-4&amp;from=paste&amp;height=228&amp;id=ud387c905&amp;name=image.png&amp;originHeight=228&amp;originWidth=525&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10970&amp;status=done&amp;style=none&amp;taskId=u9df34674-6438-4f64-8810-2056308e5b5&amp;title=&amp;width=525" alt="image.png" /></p><hr /><p><a name="O7BgM"></a></p><h1 id="实验6-实践课程中的程序"><a class="markdownIt-Anchor" href="#实验6-实践课程中的程序"></a> 实验6 实践课程中的程序</h1><p><a name="dyxQS"></a></p><h2 id="assignment-1-6"><a class="markdownIt-Anchor" href="#assignment-1-6"></a> assignment 1</h2><ol><li>这里只实践了问题7.8的解决方案（用栈作数据缓冲区），如下</li></ol><pre class="line-numbers language-none"><code class="language-none">assume cs:codesg, ds:datasg, ss:stacksgdatasg segment db &#39;ibm             &#39;db &#39;dec             &#39;db &#39;dos             &#39;db &#39;vax             &#39;datasg endsstacksg segmentdw 0,0,0,0,0,0,0,0stacksg endscodesg segmentstart:mov ax, stacksgmov ss, axmov sp, 10Hmov ax, datasgmov ds, axmov bx, 0mov cx, 4s0:push cxmov si, 0mov cx, 3s:mov al, [bx+si]and al, 11011111Bmov [bx+si], alinc siloop s pop cxadd bx, 10Hloop s0mov ax, 4c00Hint 21Hcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>跟踪程序，查看data段内容</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673954476992-988989f0-7ba5-4132-8b53-011e5cfe1ce7.png#averageHue=%23111111&amp;clientId=ue12bca8e-25be-4&amp;from=paste&amp;height=332&amp;id=u6d512701&amp;name=image.png&amp;originHeight=332&amp;originWidth=619&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11651&amp;status=done&amp;style=none&amp;taskId=uac27a62a-e7e2-4573-8364-30a015779f0&amp;title=&amp;width=619" alt="image.png" /></p><ol start="3"><li>执行程序后，查看data段内容，正确</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673954644257-b63d5af0-f266-4057-b1e1-c513e09c9298.png#averageHue=%23151515&amp;clientId=ue12bca8e-25be-4&amp;from=paste&amp;height=114&amp;id=u73878512&amp;name=image.png&amp;originHeight=114&amp;originWidth=574&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4009&amp;status=done&amp;style=none&amp;taskId=u92fc65de-f6f5-42c1-84b2-350c1e4d948&amp;title=&amp;width=574" alt="image.png" /><br /><a name="pHbEJ"></a></p><h2 id="assignment-2-6"><a class="markdownIt-Anchor" href="#assignment-2-6"></a> assignment 2</h2><ol><li>编写源程序，双层循环中，进入第二层循环之后立马将cx压入栈中暂存，可避免双层循环在使用cx寄存器上的冲突</li></ol><pre class="line-numbers language-none"><code class="language-none">assume cs:codesg, ds:datasg, ss:stacksgstacksg segmentdw 0,0,0,0,0,0,0,0stacksg endsdatasg segment db &#39;1. display      &#39;db &#39;2. brows        &#39;db &#39;3. replace      &#39;db &#39;4. modify       &#39;datasg endscodesg segmentstart:mov ax, stacksgmov ss, axmov sp, 10H mov ax, datasgmov ds, axmov bx, 0mov cx, 4s0:push cxmov cx, 4mov si, 0s: mov al, [bx+3+si]and al, 11011111Bmov [bx+3+si], alinc siloop spop cxadd bx, 10Hloop s0mov ax, 4c00Hint 21Hcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>跟踪程序，查看data段内容</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673955793129-198d15a6-56f1-4375-a4c1-fa6d84e6aa7c.png#averageHue=%23111111&amp;clientId=ue12bca8e-25be-4&amp;from=paste&amp;height=311&amp;id=u5ce4b731&amp;name=image.png&amp;originHeight=311&amp;originWidth=623&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12680&amp;status=done&amp;style=none&amp;taskId=u132e706b-1ed7-4582-becb-0f6cd930428&amp;title=&amp;width=623" alt="image.png" /></p><ol start="3"><li>执行程序，查看data段内容，正确</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1673955864652-707fd6d7-d65d-4be6-b3f9-bbcbbc27484b.png#averageHue=%23151515&amp;clientId=ue12bca8e-25be-4&amp;from=paste&amp;height=110&amp;id=ubb174b39&amp;name=image.png&amp;originHeight=110&amp;originWidth=618&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5260&amp;status=done&amp;style=none&amp;taskId=u786ee51b-5382-4915-8eb1-9feeb54fdba&amp;title=&amp;width=618" alt="image.png" /></p><hr /><p><a name="MJU1z"></a></p><h1 id="实验7-寻址方式在结构化数据访问中的应用"><a class="markdownIt-Anchor" href="#实验7-寻址方式在结构化数据访问中的应用"></a> 实验7 寻址方式在结构化数据访问中的应用</h1><ol><li>编写源程序，用<code>word ptr / byte ptr</code>指定内存单元大小主要应用在<code>div</code>指令或用于向内存写入立即数</li></ol><pre class="line-numbers language-none"><code class="language-none">assume cs:codesgstack segmentdw 0,0,0,0,0,0,0,0stack endsdata segmentdb &#39;1975&#39;,&#39;1976&#39;, &#39;1977&#39;, &#39;1978&#39;, &#39;1979&#39;, &#39;1980&#39;, &#39;1981&#39;, &#39;1982&#39;,&#39;1983&#39;db &#39;1984&#39;, &#39;1985&#39;, &#39;1986&#39;, &#39;1987&#39;, &#39;1988&#39;, &#39;1989&#39;, &#39;1990&#39;, &#39;1991&#39;, &#39;1992&#39;db &#39;1993&#39;, &#39;1994&#39;, &#39;1995&#39;dd 16,22,382,1356,2390, 8000, 16000,24486,50065, 97479,140417,197514dd 345980,590827,803530,1183000,1843000,2759000, 3753000, 4649000,5937000dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793, 4037,5635, 8226dw 11542,14430,15257,17800data endstable segmentdb 21 dup (&#39;year summ ne ?? &#39;)table endscodesg segmentstart:mov ax, stack ;0776Cmov ss, axmov sp, 10Hmov ax, data ; 076Dmov es, axmov ax, table ; 077bmov ds, axmov bx,0mov si,0mov cx,21year:push cxmov cx, 4mov di, 0char:mov al, es:[si]mov [bx+di], alinc diinc siloop charpop cxadd bx, 10Hloop yearmov cx, 21mov bx, 0income:push cxmov cx, 2mov di, 0dwInt:mov ax, es:[si]mov [bx].5[di], axadd si, 2add di, 2loop dwIntpop cxadd bx, 10Hloop incomemov cx, 21mov bx, 0staff:mov ax, es:[si]mov [10+bx], axadd si, 2;add bx, 10Hloop staffmov cx, 21mov bx, 0average:mov dx, [bx+7]mov ax, [bx+5]div word ptr [bx+0AH]mov [bx+0Dh], axadd bx, 10Hloop averagemov ax, 4C00Hint 21Hcodesg endsend start <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>查看原始table段的内容</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1674054412418-905eb553-63b9-4352-8fd3-87d9c57ec955.png#averageHue=%231d1d1d&amp;clientId=u59b02d03-003e-4&amp;from=paste&amp;height=312&amp;id=ue1c1140e&amp;name=image.png&amp;originHeight=312&amp;originWidth=640&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=19887&amp;status=done&amp;style=none&amp;taskId=ue6fc1e9d-9b84-43c0-852e-a69d953b492&amp;title=&amp;width=640" alt="image.png" /></p><ol start="3"><li>执行程序后，查看table段的内容，正确</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1674054465034-493bafb1-d935-4da9-b3d0-07b0bdd54911.png#averageHue=%231b1b1b&amp;clientId=u59b02d03-003e-4&amp;from=paste&amp;height=378&amp;id=u98d88789&amp;name=image.png&amp;originHeight=378&amp;originWidth=630&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=21611&amp;status=done&amp;style=none&amp;taskId=u95e0d8ba-0b80-4cd2-9a0a-a3aaec2f835&amp;title=&amp;width=630" alt="image.png" /><br /><a name="wI3bu"></a></p><h1 id="实验8-分析一个奇怪的程序"><a class="markdownIt-Anchor" href="#实验8-分析一个奇怪的程序"></a> 实验8 分析一个奇怪的程序</h1><ol><li>程序从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">start</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">t</span></span></span></span>入口处开始执行，一个<code>nop</code>指令占一个字节并表示No operation，此处用了两个<code>nop</code>指令的目的是在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span></span></span></span>处预留两个字节的空间，程序执行<code>mov cs:[di], ax</code>之后<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span></span></span></span>处的两个字节被试图写入<code>jmp short s1</code>，接着程序向下执行<code>jmp short s</code>使得程序跳转回<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span></span></span></span>处开始执行。</li><li><code>jmp short s1</code>到底做了什么：修改IP使其前进十个字节。因为该指令本身的作用是使IP从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">s2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mord">2</span></span></span></span>跳转到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">s1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mord">1</span></span></span></span>，即从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">s2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mord">2</span></span></span></span>处的jmp指令的下一指令<code>nop</code><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>076</mn><mi>C</mi><mo>:</mo><mn>0022</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(076C:0022)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mord">7</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">2</span><span class="mord">2</span><span class="mclose">)</span></span></span></span>跳转到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">s1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mord">1</span></span></span></span>处的<code>mov ax, 0</code><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>076</mn><mi>C</mi><mo>:</mo><mn>0018</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(076C:0018)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mord">7</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">8</span><span class="mclose">)</span></span></span></span>，因为<code>jmp short 标号</code>是依据位移进行转移的指令，而此处位移大小为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0022</mn><mi>H</mi><mo>−</mo><mn>0018</mn><mi>H</mi><mo>=</mo><mo>−</mo><mn>10</mn><mi>D</mi><mo stretchy="false">(</mo><mi>F</mi><mn>6</mn><mi>H</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">0022H-0018H =-10D(F6H)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">2</span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">8</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mclose">)</span></span></span></span>，所以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span></span></span></span>处的<code>jmp short s</code>指令的机器码为<code>EBF6</code>（刚好占两个字节，因此可以被正确写入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span></span></span></span>处）</li><li>执行<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span></span></span></span>处的跳转指令，使得<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mi>P</mi><mo>=</mo><mi>I</mi><mi>P</mi><mo>+</mo><mo stretchy="false">(</mo><mo>−</mo><mn>10</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">IP = IP+(-10)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span><span class="mclose">)</span></span></span></span>,即向前移动十位，用debug跟踪程序，可以看到向前第十个指令为<code>mov ax, 4c00H</code><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>000</mn><mi>A</mi><mi>H</mi><mo>−</mo><mn>0010</mn><mi>H</mi><mo>=</mo><mn>0000</mn><mi>H</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(000AH-0010H=0000H)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mclose">)</span></span></span></span>，程序从此处开始向下执行，最终可以正确退出</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1674306714709-54439679-a96b-496d-97b1-de0f2c3abf77.png#averageHue=%230d0d0d&amp;clientId=u6f9c44da-f55a-4&amp;from=paste&amp;height=383&amp;id=u78c30e80&amp;name=image.png&amp;originHeight=383&amp;originWidth=595&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10505&amp;status=done&amp;style=none&amp;taskId=uae9cedf9-248f-4122-b32a-b23020dad5f&amp;title=&amp;width=595" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1674308784974-d476fbd5-6642-45a7-8e5a-a3db1e5ed646.png#averageHue=%230a0a0a&amp;clientId=u6f9c44da-f55a-4&amp;from=paste&amp;height=150&amp;id=ua98d7cca&amp;name=image.png&amp;originHeight=150&amp;originWidth=640&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=3506&amp;status=done&amp;style=none&amp;taskId=ufcfb45ef-5abd-4191-9c60-6ca3d7ac8c6&amp;title=&amp;width=640" alt="image.png" /><br /><a name="lZyJr"></a></p><h1 id="实验9-根据材料编程"><a class="markdownIt-Anchor" href="#实验9-根据材料编程"></a> 实验9 根据材料编程</h1><ol><li>编写源程序：最开始我试图用<code>mov address，data</code>的形式直接向显存中写入数据，并且比较蠢的一个字符一个字符的输入，但这种形式的mov指令对显存区域似乎并不奏效，实操之后发现显存内容未被修改为给定值，并且其内容还在动态的变化(?)。之后利用栈存储数据<code>welcome to masm!</code>，利用寄存器<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">ax</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span></span></span></span>作介质，用mov指令实现内存之间的内容交换，避免了重复手动输入数据</li></ol><pre class="line-numbers language-none"><code class="language-none">assume cs:codesgdata segmentdb &#39;welcome to masm!&#39;data endscodesg segmentstart: mov ax, datamov ds, axmov ax, 0B800Hmov es, axmov bx, 0mov si, 1824mov cx, 10Hs0:mov ah, 82Hmov al, [bx]mov es:[si], axinc bxadd si, 2loop s0mov bx, 0 mov si, 1984mov cx, 10Hs1:mov ah, 0A4Hmov al, [bx]mov es:[si], axinc bxadd si, 2loop s1mov bx, 0 mov si, 2144mov cx, 10Hs2:mov ah, 11110001Bmov al, [bx]mov es:[si], axinc bxadd si, 2loop s2mov ax, 4c00Hint 21Hcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>最终效果</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1674447541217-19494cef-6da4-4fd3-b28c-6ad18c755471.png#averageHue=%23080808&amp;clientId=u2be92af7-bf87-4&amp;from=paste&amp;height=400&amp;id=u7d46ece7&amp;name=image.png&amp;originHeight=400&amp;originWidth=640&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8808&amp;status=done&amp;style=none&amp;taskId=u5b2b0b44-a96d-458a-878e-8f9b74b9697&amp;title=&amp;width=640" alt="image.png" /></p><p><a name="zPzcC"></a></p><h1 id="实验10-编写子程序"><a class="markdownIt-Anchor" href="#实验10-编写子程序"></a> 实验10 编写子程序</h1><p><a name="Z9mXL"></a></p><h2 id="assignment-1-7"><a class="markdownIt-Anchor" href="#assignment-1-7"></a> assignment 1</h2><ol><li>编写源程序，在子程序的开始将所有子程序将用的寄存器保存在栈中（不论子程序是否修改寄存器或返回后主程序是否使用寄存器，都应当这样做），以便从子程序返回前再恢复（<strong>注意入栈顺序与出栈顺序相反</strong>）</li></ol><pre class="line-numbers language-none"><code class="language-none">assume cs:codedata segmentdb &quot;welcome to masm!&quot;, 0data endsstack segmentdw 16 dup (0)stack endscode segmentstart:mov dh, 8mov dl, 3mov cl, 2mov ax, datamov ds, axmov ax, stackmov sp, 20Hmov si, 0call show_strmov ax, 4C00Hint 21Hshow_str:push ax ; 保存子程序中所有将用到的寄存器的初始值，以便在返回前恢复push bxpush cxpush dxpush espush simov ax, 0B800H; 80×25彩色模式显示缓冲区mov es, axmov al, 160 ; 设置指定打印位置inc dh ; 行数从0开始mul dh ; 8位乘法，结果存储在ax中mov bx, axmov al, 2mul dladd bx, axmov ah, clprint:mov cl, [si] ; 设置cxmov ch, 0jcxz ok ;判断字符串是否结束mov al, cl ; 设置字符属性和值mov es:[bx],axinc siadd bx, 2jmp printok:pop sipop espop dxpop cxpop bxpop axret code endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>运行结果</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1674959885930-a6c4181a-e6a1-44cb-9ec8-cc5013b1314e.png#averageHue=%23141414&amp;clientId=ue48ee0fc-f4a6-4&amp;from=paste&amp;height=427&amp;id=u8c981b1c&amp;name=image.png&amp;originHeight=427&amp;originWidth=642&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12224&amp;status=done&amp;style=none&amp;taskId=u3854a69e-62d2-4b34-89c5-98dd0c0fb70&amp;title=&amp;width=642" alt="image.png" /><br /><a name="gCr3l"></a></p><h2 id="assignment-2-7"><a class="markdownIt-Anchor" href="#assignment-2-7"></a> assignment 2</h2><ol><li><p>编写源程序，利用除法溢出公式</p><pre><code>            $X/n = int(H/2)*65536 +[rem(H/n)*65536+L]/n$&lt;br /&gt;该公式的基本思想是将可能发生除法溢出的32位除法$X/n$，分解为两个十六位(实际运算时是32位，被除数高16位置0)的除法&lt;br /&gt;$(H/n)*65536 + (L/n)$&lt;br /&gt;**商（32位）：**&lt;br /&gt;高十六位为$int(H/2)*65536$,低十六为$int([rem(H/n)*65536+L]/n)$&lt;br /&gt;**余数（16位）：**&lt;br /&gt;$rem([rem(H/n)*65536+L]/n)$&lt;br /&gt;（注：对这个公式的理解有限）</code></pre></li></ol><pre class="line-numbers language-none"><code class="language-none">assume cs:codestack segmentdw 16 dup (0)stack endscode segmentstart:mov ax, stackmov ss, axmov sp, 20Hmov ax, 4240Hmov dx, 000FHmov cx, 0AHcall divdwmov ax, 4C00Hint 21Hdivdw:push bxmov bx, ax ; 暂存Lmov ax, dx ; H&#x2F;Nmov dx, 0div cx ; int(H&#x2F;N)在ax中，rem(H&#x2F;N)在dx中push ax ; 暂存int(H&#x2F;N)，除数mov ax, bx; dx and ax constitute rem(H&#x2F;N)*65535+Ldiv cx ; ax store the resultmov cx, dxpop dx ; int(H&#x2F;N)pop bxretcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>运行结果正确</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1675050216892-a6c856a5-19e3-42a9-9dae-62052e8d077c.png#averageHue=%23191919&amp;clientId=u68f84982-1dce-4&amp;from=paste&amp;height=427&amp;id=u69ef2d14&amp;name=image.png&amp;originHeight=427&amp;originWidth=642&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=16724&amp;status=done&amp;style=none&amp;taskId=u6de69850-12af-46ff-80ef-d1f8f4817f4&amp;title=&amp;width=642" alt="image.png" /><br /><a name="wHNVn"></a></p><h2 id="assignment-3-5"><a class="markdownIt-Anchor" href="#assignment-3-5"></a> assignment 3</h2><ol><li>编写源程序：由于是从数字尾部开始构造字符串，所以用栈来暂存数据再合适不过</li></ol><pre class="line-numbers language-none"><code class="language-none">assume cs:codedata segmentdb 10 dup(0)data endsstack segmentdw 16 dup(0)stack endscode segmentstart:mov ax, 12666mov bx, datamov ds, bxmov si, 0mov bx, stackmov ss, bxmov sp, 20Hcall dtocmov dh, 8mov dl, 3mov cl, 2call show_strmov ax, 4C00Hint 21Hdtoc:push axpush bxpush cxpush dxpush sipush dimov dx, 0 ; 被除数高16位 置0mov bx, 10mov di, 0 ; 字符计数divide:mov cx, ax jcxz overinc didiv bx ; 32位除法，商在ax，余数在dxadd dx, 30Hpush dxmov dx, 0jmp divideover:mov cx, dimove: pop bxmov [si], blinc siloop movepop dipop sipop dxpop cxpop bxpop axretshow_str:push ax ; 保存子程序中所有将用到的寄存器的初始值，以便在返回前恢复push bxpush cxpush dxpush espush simov ax, 0B800H; 80×25彩色模式显示缓冲区mov es, axmov al, 160 ; 设置指定打印位置inc dh ; 行数从0开始mul dh ; 8位乘法，结果存储在ax中mov bx, axmov dh, 0mov al, 2mul dladd bx, axmov ah, clprint:mov cl, [si] ; 设置cxmov ch, 0jcxz ok ;判断字符串是否结束mov al, cl ; 设置字符属性和值mov es:[bx],axinc siadd bx, 2jmp printok:pop sipop espop dxpop cxpop bxpop axret code endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>运行结果</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1675070403817-35e5aa0f-3d0c-42ab-803a-9d7dbf5bcb8a.png#averageHue=%231f1f1e&amp;clientId=u9270fba6-a6a8-4&amp;from=paste&amp;height=427&amp;id=uc1ace679&amp;name=image.png&amp;originHeight=427&amp;originWidth=642&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;size=16905&amp;status=done&amp;style=none&amp;taskId=uf4805ca7-fbac-43eb-a257-f1c820ade31&amp;title=%E6%AD%A3%E7%A1%AE%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE%E6%AE%B5&amp;width=642" alt="image.png" title="正确写入数据段" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1675070685747-6e72ffff-b062-418d-9d09-67596698a4ca.png#averageHue=%23141313&amp;clientId=u9270fba6-a6a8-4&amp;from=paste&amp;height=427&amp;id=ub539738e&amp;name=image.png&amp;originHeight=427&amp;originWidth=642&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;size=12534&amp;status=done&amp;style=none&amp;taskId=u448c5569-17ad-4eec-8879-9d56a9e0d67&amp;title=%E6%AD%A3%E7%A1%AE%E6%89%93%E5%8D%B0&amp;width=642" alt="image.png" title="正确打印" /><br /><a name="ww3wC"></a></p><h1 id="实验11-编写子程序"><a class="markdownIt-Anchor" href="#实验11-编写子程序"></a> 实验11 编写子程序</h1><ol><li>编写源程序：主要用到了<code>cmp</code>指令和条件转移指令组合形成的if逻辑</li></ol><pre class="line-numbers language-none"><code class="language-none">assume cs:codesgdatasg segmentdb &quot;Beginner&#39;s All-purpose Symbolic Instruction Code.&quot;,0datasg endscodesg segmentbegin:mov ax, datasgmov ds, axmov si, 0call lettercmov ax, 4C00Hint 21Hletterc:push axpush cxCapital:mov al, [si]mov cl, almov ch, 0jcxz OKcmp al, 97jb NOcmp al, 122ja NOand al, 11011111Bmov [si], alNO:inc sijmp short CapitalOK:pop cxpop axretcodesg endsend begin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>运行结果</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1675142887049-1e6b7958-8779-4745-81f5-c6a536a232ca.png#averageHue=%231d1d1d&amp;clientId=u14a9d0ea-1971-4&amp;from=paste&amp;height=427&amp;id=u9451414e&amp;name=image.png&amp;originHeight=427&amp;originWidth=642&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;size=18343&amp;status=done&amp;style=none&amp;taskId=u733f3e2b-82d2-436e-a8de-95b8faa1f07&amp;title=%E5%88%9D%E5%A7%8B%E7%8A%B6%E6%80%81&amp;width=642" alt="image.png" title="初始状态" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1675142878774-286c5ae3-e961-424a-96db-dae987c9a153.png#averageHue=%23212121&amp;clientId=u14a9d0ea-1971-4&amp;from=paste&amp;height=427&amp;id=ub5c49ec4&amp;name=image.png&amp;originHeight=427&amp;originWidth=642&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;size=19861&amp;status=done&amp;style=none&amp;taskId=u7a2a2568-c507-4078-a32b-b75eef2ec62&amp;title=%E5%85%A8%E9%83%A8%E5%A4%A7%E5%86%99&amp;width=642" alt="image.png" title="全部大写" /><br /><a name="bk4z5"></a></p><h1 id="实验12-编写0号中断的处理程序"><a class="markdownIt-Anchor" href="#实验12-编写0号中断的处理程序"></a> 实验12 编写0号中断的处理程序</h1><ol><li>编写源程序</li></ol><p>总体来说就3个任务：</p><ul><li>编写中断处理程序</li><li>复制中断处理程序至内存空闲区域(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0000</mn><mo>:</mo><mn>0200</mn><mi>H</mi><mo>→</mo><mn>0000</mn><mo>:</mo><mn>02</mn><mi>F</mi><mi>F</mi><mi>H</mi></mrow><annotation encoding="application/x-tex">0000:0200H\to0000:02FFH</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">2</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span></span></span>)</li><li>修改中断向量表（中断处理程序地址入口表）</li></ul><p>注意在用<code>jcxz</code>条件转移指令时，要<code>jmp short</code>回程序开头</p><pre class="line-numbers language-none"><code class="language-none">assume cs:codecode segmentstart:mov ax, csmov ds, axmov si, offset do0 ; 076C:0028mov ax, 0mov es, axmov di, 0200Hmov cx, offset do0end- offset do0; 0034Hcldrep movsb ; 复制程序到0:200mov word ptr es:[0], 0200Hmov word ptr es:[0+2], 0 ; 修改中断向量表mov ax, 4C00Hint 21Hdo0:jmp short do0startdb &quot;divide error&quot;,0 do0start:mov ax, 0B800Hmov es, axmov di, 160*12+34*2mov ax, csmov ds, axmov si, 202Hprint:mov cL, [si]mov ch, 0jcxz okmov ah, 04h ;redmov al, clmov es:[di], axinc siadd di, 2 jmp short printok:mov ax, 4C00Hint 21Hdo0end: ;005Cnopcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>运行结果(在debug中运行检测程序lab12T无法触发中断，直接执行却可以)</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1675159533550-89caf027-f6da-4345-aa8c-e03159df600e.png#averageHue=%23141414&amp;clientId=u2ec176e2-9874-4&amp;from=paste&amp;height=427&amp;id=u6679d84b&amp;name=image.png&amp;originHeight=427&amp;originWidth=642&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12440&amp;status=done&amp;style=none&amp;taskId=u7d87f433-7092-4f23-a3d6-b1339bf6fe9&amp;title=&amp;width=642" alt="image.png" /><br /><a name="YSdgF"></a></p><h1 id="实验13-编写-应用中断例程"><a class="markdownIt-Anchor" href="#实验13-编写-应用中断例程"></a> 实验13 编写、应用中断例程</h1><p><a name="HHw6N"></a></p><h2 id="assignment-1-8"><a class="markdownIt-Anchor" href="#assignment-1-8"></a> assignment 1</h2><ol><li>编写源程序：与lab10-1的show_str基本一致，只需将<code>call-ret</code>更改为 <code>int 7cH - iret</code></li></ol><pre class="line-numbers language-none"><code class="language-none">assume cs:codecode segmentstart:mov ax, csmov ds, axmov si, offset printmov ax, 0mov es, axmov di, 0200Hmov cx, offset printed - offset printcldrep  movsbmov word ptr es:[7cH*4], 0200Hmov word ptr es:[7cH*4+2], 0 mov ax, 4C00Hint 21Hprint:push bxpush cxpush espush sipush axpush dxmov ax, 0B800Hmov es, axmov al, 160inc dhmul dh ; 160*(10+1) in axmov bx, axmov al, 2mul dl ; 10*2 in axadd bx, axmov ah, clstPrint:mov ch, 0mov cl, [si]jcxz okmov al, clmov es:[bx], axadd bx, 2inc sijmp short stPrintok:pop dxpop axpop sipop espop cxpop bxiretprinted:nopcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>运行结果</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1675224733068-a783d5cd-5d35-46b5-8032-3c8938e8347a.png#averageHue=%23131313&amp;clientId=u8a54de4a-c425-4&amp;from=paste&amp;height=427&amp;id=u9672685d&amp;name=image.png&amp;originHeight=427&amp;originWidth=642&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12092&amp;status=done&amp;style=none&amp;taskId=u4599fb35-92fc-4ea1-b9cb-e60668d8629&amp;title=&amp;width=642" alt="image.png" /><br /><a name="LKaNX"></a></p><h2 id="assignment-2-8"><a class="markdownIt-Anchor" href="#assignment-2-8"></a> assignment 2</h2><ol><li>编写源程序</li></ol><p>用中断例程实现loop指令，主要需要解决三个问题</p><ul><li>怎么取得标号<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span>的段地址和偏移地址？</li></ul><p>有一对段地址<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">CS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span>和偏移地址<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mi>P</mi></mrow><annotation encoding="application/x-tex">IP</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>在中断过程时被压入栈，标号的段地址就是该CS，标号       的偏移地址可由该IP加上转移地址(<code>offset s - offset se</code>)得到</p><ul><li>得到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span>的段地址和偏移地址后，如何设置<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>S</mi><mo>:</mo><mi>I</mi><mi>P</mi></mrow><annotation encoding="application/x-tex">CS:IP</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></li></ul><p>用<code>iret</code>指令：<code>pop IP , pop CS ,  popf</code></p><pre class="line-numbers language-none"><code class="language-none">assume cs:codecode segmentstart:mov ax, csmov ds, axmov si, offset lpmov ax, 0mov es, axmov di, 0200Hmov cx, offset lped - offset lpcldrep  movsbmov word ptr es:[7cH*4], 0200Hmov word ptr es:[7cH*4+2], 0 mov ax, 4C00Hint 21Hlp:dec cxjcxz lpretpush bpmov bp, spadd [bp+2], bxlpret:pop bpiretlped:nopcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>运行结果</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1675237825483-f1ed3d6d-00cc-453b-91b3-757823355468.png#averageHue=%23171515&amp;clientId=ub529a018-e1a0-4&amp;from=paste&amp;height=427&amp;id=u272d8fd4&amp;name=image.png&amp;originHeight=427&amp;originWidth=642&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12787&amp;status=done&amp;style=none&amp;taskId=u38f1e876-6c89-499b-b704-a23609bf566&amp;title=&amp;width=642" alt="image.png" /><br /><a name="TCCAl"></a></p><h2 id="assignment-3-6"><a class="markdownIt-Anchor" href="#assignment-3-6"></a> assignment 3</h2><pre class="line-numbers language-none"><code class="language-none">assume cs:codecode segments1: db &#39;Good,better,best,&#39;,&#39;$&#39;s2: db &#39;Never let it rest,&#39;,&#39;$&#39; s3: db &#39;Till good is better,&#39;,&#39;$&#39;s4: db &#39;And better,best.&#39;, &#39;$&#39;s: dw offset s1, offset s2, offset s3, offset s4 row: db 2,4,6,8start:mov ax, cs mov ds, axmov bx, offset smov si, offset rowmov cx, 4ok:mov bh, 0 mov dh, [si]mov dl, 0mov ah, 2 ; BIOS中断例程--设置光标int 10h mov dx, [bx]                                           mov ah, 9 ; DOS中断例程--打印字符串int 21hinc siadd bx, 2loop okmov ax, 4C00H; DOS中断例程--程序返回，返回值在alint 21Hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="zGspx"></a></p><h1 id="实验14-访问-cmos-ram"><a class="markdownIt-Anchor" href="#实验14-访问-cmos-ram"></a> 实验14 访问 CMOS RAM</h1><ol><li>编写源程序</li></ol><pre class="line-numbers language-none"><code class="language-none">assume cs:codestack segmentdw 16 dup (0)stack endscode segmentstart:mov ax, stackmov ss, axmov sp, 20Hmov ax, 0B800Hmov ds, axmov al, 9mov bx, 160*12+36*2call GetAscillmov byte ptr [bx+4], &#39;&#x2F;&#39;mov al, 8add bx, 6call GetAscillmov byte ptr [bx+4], &#39;&#x2F;&#39;mov al, 7add bx, 6call GetAscillmov byte ptr [bx+4], &#39; &#39;mov al, 4add bx, 6call GetAscillmov byte ptr [bx+4], &#39;:&#39;mov al, 2add bx, 6call GetAscillmov byte ptr [bx+4], &#39;:&#39;mov al, 0add bx, 6call GetAscillmov ax, 4C00Hint 21HGetAscill:push axpush bxpush cxpush dxout 70H, alin al, 71Hmov ah, almov cl, 4shr ah, cland al, 00001111Badd ah, 30Hadd al, 30Hmov dx, 0B800Hmov es, dxmov es:[bx], ah mov byte ptr es:[bx+1], 02H ; greenmov es:[bx+2], almov byte ptr es:[bx+3], 02Hpop dxpop cxpop bxpop axretcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>运行结果</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1675253920788-8fc4fee5-abeb-4e49-93bf-97e3873b6599.png#averageHue=%23141413&amp;clientId=uf0bf1a62-8c66-4&amp;from=paste&amp;height=388&amp;id=u067d841f&amp;name=image.png&amp;originHeight=427&amp;originWidth=642&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11685&amp;status=done&amp;style=none&amp;taskId=u21f4afac-9bb2-4466-b21a-1a578f58efb&amp;title=&amp;width=583.6363509863864" alt="image.png" /><br /><a name="yTwL0"></a></p><h1 id="实验15-安装新的int-9-中断例程"><a class="markdownIt-Anchor" href="#实验15-安装新的int-9-中断例程"></a> 实验15 安装新的int 9 中断例程</h1><p><a name="TIrMX"></a></p><h2 id="前置练习1"><a class="markdownIt-Anchor" href="#前置练习1"></a> 前置练习1</h2><p>在屏幕中间依次显示<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>→</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">a\to z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span>,按Esc键后改变与颜色</p><ol><li>编写源程序：由于重新编写的int 9 例程与用于显示的程序在同时运行，所以不需要有安装程序。在编写int 9中断例程时，错把<code>call dword ptr ds:[0]</code>写成了<code>call word ptr ds:[0]</code>，导致整个系统没有正确的int 9中断例程，因此出现了错误。</li></ol><pre class="line-numbers language-none"><code class="language-none">assume cs:codestack segmentdb 64 dup(0)stack endsdata segmentdw 0,0data endscode segmentstart:mov ax, stackmov ss, axmov sp, 40Hmov ax, datamov ds, axmov ax, 0mov es, axpush es:[9*4]pop ds:[0]push es:[9*4+2]pop ds:[2] ; 保存原int 9中断例程的入口地址climov word ptr es:[9*4], offset int9mov es:[9*4+2], cs;设置新的入口地址stimov ax, 0B800Hmov es,axmov dh, &#39;a&#39;s:mov es:[160*12+40*2], dhcall delayinc dhcmp dh, &#39;z&#39;jna s ; 依次打印a~zmov ax, 0 mov es, axclipush ds:[0]pop es:[9*4]push ds:[2]pop es:[9*4+2] ;恢复原int 9中断例程的入口地址stimov ax, 4C00hint 21Hdelay:push axpush dxmov ax, 0mov dx, 10Hse:sub ax, 1 ; 不能用decsbb dx, 0cmp ax, 0jne secmp dx, 0jne sepop dxpop axret ; 延时int9:push axpush esin al, 60Hpushfcall dword ptr ds:[0]cmp al, 01Hjne int9retmov ax, 0B800Hmov es, axinc byte ptr es:[160*12+40*2+1] ; 修改字符属性int9ret:pop espop axiretcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>运行结果</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1675319548168-77f7b5a6-54bb-4526-b234-adb0e561004e.png#averageHue=%237ab44c&amp;clientId=u17647ab4-03d9-4&amp;from=paste&amp;height=388&amp;id=u49a1ed0a&amp;name=image.png&amp;originHeight=427&amp;originWidth=642&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;size=13571&amp;status=done&amp;style=none&amp;taskId=u61859af5-760b-45d0-8b8d-c62aa3a3245&amp;title=%E6%8C%89Esc%E6%94%B9%E5%8F%98%E9%A2%9C%E8%89%B21&amp;width=583.6363509863864" alt="image.png" title="按Esc改变颜色1" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1675319563355-013b242f-ab37-4a8f-a956-6222d6e1847c.png#averageHue=%238dd756&amp;clientId=u17647ab4-03d9-4&amp;from=paste&amp;height=388&amp;id=u9a049927&amp;name=image.png&amp;originHeight=427&amp;originWidth=642&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;size=13830&amp;status=done&amp;style=none&amp;taskId=u52c59e7d-a185-4177-8537-a05965e054e&amp;title=%E6%8C%89Esc%E6%94%B9%E5%8F%98%E9%A2%9C%E8%89%B22&amp;width=583.6363509863864" alt="image.png" title="按Esc改变颜色2" /><br /><a name="vlBjq"></a></p><h2 id="前置练习2"><a class="markdownIt-Anchor" href="#前置练习2"></a> 前置练习2</h2><p>在DOS下，按F1键后改变当前屏幕的显示颜色，其他的键照常处理</p><ol><li>编写源程序：原int 9的中断例程入口地址不能放在安装程序中，否则在进入新int 9中断例程后将丢失原int 9中断例程入口地址，导致无法调用原int 9中断例程。将原int 9中断例程入口地址放在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>:</mo><mn>0200</mn><mo>→</mo><mn>0</mn><mo>:</mo><mn>0203</mn></mrow><annotation encoding="application/x-tex">0:0200 \to 0:0203</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">2</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">2</span><span class="mord">0</span><span class="mord">3</span></span></span></span>,可在新int 9中断例程中通过<code>cs:[200H]</code>访问</li></ol><pre class="line-numbers language-none"><code class="language-none">assume cs:code, ss:stackstack segmentdb 32 dup(0)stack endscode segmentstart:mov ax, stackmov ss, axmov sp, 20Hmov ax, 0mov es, axmov di, 0204Hmov ax, csmov ds, axmov si, offset int9mov cx, offset int9ed - offset int9cldrep movsb; 安装push es:[9*4]pop es:[200H]push es:[9*4+2]pop es:[202H] ; 保存原int 9入口地址climov word ptr es:[9*4], 204Hmov word ptr es:[9*4+2], 0 ; 修改中断向量表stimov ax, 4C00Hint 21Hint9:push axpush cxpush espush diin al, 60Hpushfcall dword ptr cs:[200H] ; 调用原int 9cmp al, 3BHjne int9retmov ax, 0B800Hmov es, axmov di, 1mov cx, 2000s:inc byte ptr es:[di]add di, 2loop sint9ret:pop dipop espop cxpop axiretint9ed:nopcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>运行结果</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1675322759364-2785ad21-17c7-4499-b1a3-fe6726975b02.png#averageHue=%230d0d0d&amp;clientId=ud2f6d655-0b50-4&amp;from=paste&amp;height=388&amp;id=u4340ef70&amp;name=image.png&amp;originHeight=427&amp;originWidth=642&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;size=12813&amp;status=done&amp;style=none&amp;taskId=uc1c9e4ff-ae09-465d-a787-aba159b8b98&amp;title=%E6%8C%89%E4%B8%8BF1%201&amp;width=583.6363509863864" alt="image.png" title="按下F1 1" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1675322817620-9b94c323-5bcb-4465-ba63-7a2721ba4d46.png#averageHue=%23aeaeae&amp;clientId=ud2f6d655-0b50-4&amp;from=paste&amp;height=388&amp;id=u019e66f9&amp;name=image.png&amp;originHeight=427&amp;originWidth=642&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;size=8862&amp;status=done&amp;style=none&amp;taskId=ue0c4ae51-d75f-4e13-8d7c-a26ee51e20f&amp;title=%E6%8C%89%E4%B8%8BF1%202&amp;width=583.6363509863864" alt="image.png" title="按下F1 2" /><br /><a name="XyIu0"></a></p><h2 id="assignment-1-9"><a class="markdownIt-Anchor" href="#assignment-1-9"></a> assignment 1</h2><ol><li>编写源程序</li></ol><p>与前两个练习相差不大，判断字符条件不同而已：判断是否是字符A的断码<code>cmp aL, 1EH+80H</code></p><pre class="line-numbers language-none"><code class="language-none">assume cs:code, ss:stackstack segmentdb 32 dup(0)stack endscode segmentstart:mov ax, stackmov ss, axmov sp, 20Hmov ax, 0mov es, axmov di, 0204Hmov ax, csmov ds, axmov si, offset int9mov cx, offset int9ed - offset int9cldrep movsb; 安装push es:[9*4]pop es:[200H]push es:[9*4+2]pop es:[202H] ; 保存原int 9入口地址climov word ptr es:[9*4], 204Hmov word ptr es:[9*4+2], 0 ; 修改中断向量表stimov ax, 4C00Hint 21Hint9:push axpush cxpush espush diin aL,60hpushfcall dword ptr cs:[200H]cmp aL, 1EH+80Hjne int9retmov cx, 2000mov ax, 0B800Hmov es, axmov di, 0s:mov byte ptr es:[di], &#39;A&#39;mov byte ptr es:[di+1], 02Hadd di, 2loop sint9ret:pop dipop espop cxpop axiretint9ed:nopcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>运行结果</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1675329053483-60588212-d9b5-4cef-acf7-06c70f65db5f.png#averageHue=%23141313&amp;clientId=ud2f6d655-0b50-4&amp;from=paste&amp;height=388&amp;id=u7a90e8bd&amp;name=image.png&amp;originHeight=427&amp;originWidth=642&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;size=7755&amp;status=done&amp;style=none&amp;taskId=u3c74959a-2b05-4756-8089-500ac2f8893&amp;title=%E6%8C%89%E4%B8%8BA%E5%90%8E%E6%9D%BE%E5%BC%80&amp;width=583.6363509863864" alt="image.png" title="按下A后松开" /><br /><a name="YodIM"></a></p><h1 id="实验16-编写包含多个功能子程序的中断例程"><a class="markdownIt-Anchor" href="#实验16-编写包含多个功能子程序的中断例程"></a> 实验16 编写包含多个功能子程序的中断例程</h1><ol><li>编写源程序</li></ol><p>注意中断例程安装后，直接定址表table的偏移地址发生了变化，没有了前面安装程序带来的一截偏移，同时偏移地址增加200H</p><pre class="line-numbers language-none"><code class="language-none">assume cs:codecode segmentstart:mov ax, csmov ds, axmov si, offset int7chmov ax, 0mov es, axmov di, 0200Hmov cx, offset int7ched - offset int7chcldrep  movsbmov word ptr es:[7cH*4], 0200Hmov word ptr es:[7cH*4+2], 0 mov ax, 4C00Hint 21Hint7ch:jmp short int7chStarttable dw offset Sub1-offset int7ch+200H, offset Sub2-offset int7ch+200H, offset Sub3-offset int7ch+200H, offset Sub4-offset int7ch+200Hint7chStart:push axpush bxcmp ah, 3ja int7chRetmov bl, ahmov bh, 0add bx, bxcall word ptr cs:(table-int7ch+200H)[bx]int7chRet:pop bxpop axiretSub1:push axpush bxpush cxpush dsmov ax, 0B800Hmov ds, axmov cx, 2000mov bx, 0s1:mov byte ptr [bx], &#39; &#39;add bx, 2loop s1pop dspop cxpop bxpop axretSub2:push axpush bxpush cxpush dsmov bx, 0B800Hmov ds, bxmov cx, 2000mov bx, 1s2:and byte ptr [bx], 11111000B ; 只设置最后3位or byte ptr [bx], aladd bx, 2loop s2pop dspop cxpop bxpop axretSub3:push axpush bxpush cxpush dsmov bx, 0B800Hmov ds, bxmov cl, 4shl al, clmov cx, 2000mov bx, 1s3:and byte ptr [bx], 10001111Bor [bx], aladd bx, 2loop s3pop dspop cxpop bxpop axretSub4:push axpush bxpush cxpush dspush espush sipush dimov bx, 08B00Hmov es, bxmov ds, bxmov si, 160mov di, 0cldmov cx, 24s4:push cxmov cx, 160rep movsbpop cxloop s4mov cx, 80mov si, 0s41:mov byte ptr [160*24+si], &#39; &#39;add si ,2loop s41pop dipop sipop espop dspop cxpop bxpop axretint7ched:nopcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">assume cs:codecode segmentstart:mov ah,1 ; 0 2 3mov al,2int 7CHmov ax, 4C00Hint 21Hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>运行结果</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1675411618416-c6c100a2-f4d1-4bc9-b3e6-22f83fcdcaee.png#averageHue=%230d0d0d&amp;clientId=uaa2840e8-10be-4&amp;from=paste&amp;height=427&amp;id=u97049213&amp;name=image.png&amp;originHeight=427&amp;originWidth=620&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;size=5698&amp;status=done&amp;style=none&amp;taskId=udfd4d7d0-2546-4521-8884-82d74fe5421&amp;title=%E5%8A%9F%E8%83%BD1%EF%BC%9A%E6%B8%85%E5%B1%8F&amp;width=620" alt="image.png" title="功能1：清屏" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1675411466691-92faf4b3-fbd7-4859-b68b-e403f87d23e1.png#averageHue=%230e0e0d&amp;clientId=uaa2840e8-10be-4&amp;from=paste&amp;height=427&amp;id=u0af61a75&amp;name=image.png&amp;originHeight=427&amp;originWidth=642&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;size=11776&amp;status=done&amp;style=none&amp;taskId=ud7c332b2-9214-4185-917e-392d79cda17&amp;title=%E5%8A%9F%E8%83%BD2%EF%BC%9A%E8%AE%BE%E7%BD%AE%E5%89%8D%E6%99%AF%E8%89%B2&amp;width=642" alt="image.png" title="功能2：设置前景色" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1675411696534-79bed444-6b2a-4a77-ad72-027fb2081a4b.png#averageHue=%2300a900&amp;clientId=uaa2840e8-10be-4&amp;from=paste&amp;height=427&amp;id=ue6689a35&amp;name=image.png&amp;originHeight=427&amp;originWidth=642&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;size=11354&amp;status=done&amp;style=none&amp;taskId=u07994587-f0a4-4e4c-b31e-52a54f59cd3&amp;title=%E5%8A%9F%E8%83%BD3%EF%BC%9A%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E8%89%B2&amp;width=642" alt="image.png" title="功能3：设置背景色" /><br /><a name="IRx7s"></a></p><h1 id="实验17-编写包含多个功能子程序的中断例程"><a class="markdownIt-Anchor" href="#实验17-编写包含多个功能子程序的中断例程"></a> 实验17 编写包含多个功能子程序的中断例程</h1><p>第17章实验用BIOS提供的功能号分别为2, 3的中断例程int 13H实现对软盘扇区的读写，由于该实验大多是对mul，div的用法和中断例程安装程序的复习，且无法看见实验效果，所以就没做了<br /><a name="upigZ"></a></p><h2 id="练习17-1"><a class="markdownIt-Anchor" href="#练习17-1"></a> 练习17-1</h2><p>接受用户的键盘输入，输入&quot;r&quot;，“g”,“b”分别将屏幕上的字符设置为红色，绿色，蓝色</p><ol><li>编写源程序</li></ol><p>用功能号为0的int 16H中断例程读取键盘输入即可</p><pre class="line-numbers language-none"><code class="language-none">assume cs:codecode segmentstart:show:push axpush espush dimov ah, 0int 16Hmov bl, 1cmp al,&#39;b&#39;je showstshl bl, 1cmp al, &#39;g&#39;je showstshl bl, 1cmp al, &#39;r&#39;je showstjmp short FRetshowst:mov ax, 0B800Hmov es, axmov di, 1mov cx, 2000s:and byte ptr es:[di], 11111000Bor es:[di], bladd di, 2loop sFRet:mov ax, 4C00Hint 21Hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>运行结果</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1675431818731-db0edf92-bc54-4bfc-a35f-613c796dddda.png#averageHue=%230f0d0d&amp;clientId=uaa2840e8-10be-4&amp;from=paste&amp;height=427&amp;id=u2f889938&amp;name=image.png&amp;originHeight=427&amp;originWidth=642&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;size=8416&amp;status=done&amp;style=none&amp;taskId=u3c7affc7-f57c-470f-9cab-1a94bcb3c74&amp;title=r-red&amp;width=642" alt="image.png" title="r-red" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1675431840911-15621108-ffb6-42ce-94ab-603c36fe9540.png#averageHue=%230d0d0d&amp;clientId=uaa2840e8-10be-4&amp;from=paste&amp;height=427&amp;id=u1bb9ce94&amp;name=image.png&amp;originHeight=427&amp;originWidth=642&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;size=8174&amp;status=done&amp;style=none&amp;taskId=u26c95d33-ee9d-414a-9861-7aa91427bc6&amp;title=g-green&amp;width=642" alt="image.png" title="g-green" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1675431855013-727c9bbb-b9bf-43a5-9ca6-ea80957dfa92.png#averageHue=%230d0d0d&amp;clientId=uaa2840e8-10be-4&amp;from=paste&amp;height=427&amp;id=ucb1b0f24&amp;name=image.png&amp;originHeight=427&amp;originWidth=642&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;size=8133&amp;status=done&amp;style=none&amp;taskId=ub45cc602-bef7-4fba-9ec7-3d4b52f4485&amp;title=b-blue&amp;width=642" alt="image.png" title="b-blue" /><br /><a name="Wyllk"></a></p><h1 id="other"><a class="markdownIt-Anchor" href="#other"></a> Other</h1><p><a name="QMCD1"></a></p><h2 id="1-理解assume伪指令的作用"><a class="markdownIt-Anchor" href="#1-理解assume伪指令的作用"></a> 1. 理解assume伪指令的作用</h2><pre class="line-numbers language-none"><code class="language-none">assume cs:code, ds:datadata segmenta db 1,2,3,4,5,6,7,8b dw 0data endscode segmentstart:mov ax, datamov ds, axmov si, 0mov cx, 8s:mov ah, 0mov al, a[si]add b, axinc siloop smov ax, 4C00Hint 21Hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>assume ds:data ss:stack</code></li></ol><ul><li>assume是伪指令，不会被编译为机器指令，因此实际程序运行后，段寄存器<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mi>S</mi><mtext>、</mtext><mi>S</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">DS、SS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord cjk_fallback">、</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span>中不会存放data和stack的地址，要更改段寄存器的内容需要在程序中用指令实现:<code>mov ax, data ``mov ds, ax</code></li><li>assume是伪指令，用于指示编译器将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mi>S</mi><mtext>、</mtext><mi>S</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">DS、SS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord cjk_fallback">、</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span>分别与data段和stack段关联。①关联是什么意思呢？就是<strong>在编译时默认data段中的数据标号a、b的段地址在</strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">DS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span><strong>中</strong>，因此如果要正确访问到a、b的内容，必须用指令将data填入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">DS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span>中。②数据标号自身就有段地址和偏移地址为什么还需要一个默认的段寄存器呢？这说明在程序段中的数据标号，仅含有偏移地址信息，它的段地址信息需要从默认段寄存器中取得。③此外，定义段的段标号data也不指代完整的地址，而仅仅代表段地址，因此<code>mov ax, data</code>在编译器看来是<code>mov ax, data段段地址</code>，如果data是指代一个32bits的完整地址，那么它将不能赋值给16bits的ax</li></ul><p>如果在程序中省略<code>assume ds:data</code>，则会出现_不能用段寄存器寻址_的错误<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1675343108877-68cf68d3-97ef-4ecb-8b4f-6da330149c94.png#averageHue=%23161616&amp;clientId=u3f46bb08-d532-4&amp;from=paste&amp;height=388&amp;id=uffd0ec43&amp;name=image.png&amp;originHeight=427&amp;originWidth=642&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13264&amp;status=done&amp;style=none&amp;taskId=ud9fb02f3-e117-4559-bfe1-1659d6727ee&amp;title=&amp;width=583.6363509863864" alt="image.png" /></p><ol start="2"><li><code>assume cs:codesg</code></li></ol><p>将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">CS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span>与代码段关联，在程序加载时将代码段(codesg)的段地址放入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">CS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span>中. 如果去掉该语句，则程序编译不通过，因为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">CS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span>的值不确定<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1675341791119-4c9029f0-b9e3-4e2f-b1b9-aa5d02685f8f.png#averageHue=%230d0d0d&amp;clientId=u3f46bb08-d532-4&amp;from=paste&amp;height=276&amp;id=u952199f2&amp;name=image.png&amp;originHeight=304&amp;originWidth=640&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9905&amp;status=done&amp;style=none&amp;taskId=ud6cc6c48-9ce9-4df5-a654-02e53729a4d&amp;title=&amp;width=581.8181692076126" alt="image.png" /><br /><a name="wwfwW"></a></p><h2 id="2-理解数据标号"><a class="markdownIt-Anchor" href="#2-理解数据标号"></a> 2. 理解数据标号</h2><ol><li>数据标号与地址标号的不同</li></ol><p>地址标号仅指代了一个地址，而数据标号不仅指代一个地址，还指代了这个地址的数据单元长度(byte, word, double word)，进而我们可以说数据标号就代表一个内存单元（由地址和单元长度就足以确定一个单元）</p><pre class="line-numbers language-none"><code class="language-none">assume cs:code, es:datadata segmenta db 1,2,3,4,5,6,7,8b dw 0data endscode segmentstart:mov ax, datamov es, axmov si, 0mov cx, 8s:mov ah, 0mov al, a[si]add b, axinc siloop smov ax, 4C00Hint 21Hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的a和b分别指代了</p><ul><li><strong>地址为</strong><code>**seg data:0**</code><strong>, 长度为byte的字节单元</strong></li><li><strong>地址为</strong><code>**seg data:8**</code><strong>, 长度为word的字单元</strong></li></ul><ol start="2"><li>如何用数据标号以简洁形式访问内存中的数据</li></ol><p>在上一个程序中，我们用<code>mov al, a[si]</code> <code>add b, ax</code>访问了data段的内容，在编译器看来，这两条语句是这样的: <code>mov al, es:0[si]``add es:[8], ax</code><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1675409971871-70ff728a-fa74-48ac-a742-be8ec319d677.png#averageHue=%23191919&amp;clientId=uaa2840e8-10be-4&amp;from=paste&amp;height=427&amp;id=u6e4d3ff6&amp;name=image.png&amp;originHeight=427&amp;originWidth=642&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14859&amp;status=done&amp;style=none&amp;taskId=ua1726f99-29ec-46f7-ac48-ad448e15a63&amp;title=&amp;width=642" alt="image.png" /><br />我们现在用更熟悉的<code>mov al, [si+a]</code> <code>add b[0], ax</code>形式，从编译器角度来看，这两种形式没有区别<br />这说明了在指令中<strong>a等价于</strong><code>**byte ptr [0]**</code><strong>，b等价于</strong><code>**word ptr [8]**</code>（仅含偏移地址信息，默认段地址在es中，因为<code>assume es:data</code>）<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1675410379440-d032239f-bb7d-480f-a45d-f96f7d064cd3.png#averageHue=%231a1919&amp;clientId=uaa2840e8-10be-4&amp;from=paste&amp;height=427&amp;id=ubbac8493&amp;name=image.png&amp;originHeight=427&amp;originWidth=642&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=15290&amp;status=done&amp;style=none&amp;taskId=uce443a00-0b21-4ac2-89ac-bb7e70f3432&amp;title=&amp;width=642" alt="image.png" /></p><ol start="3"><li>将标号当作数据定义</li></ol><pre class="line-numbers language-none"><code class="language-none">assume cs:code, ds:datadata segmenta db 1,2,3,4,5,6,7,8b dw 0c dw a, bdata endscode segmentstart:mov ax, datamov ds, axmov dx, 2mov dx, cmov ax, c[1]mov ax, 4C00Hint 21Hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>c dw a, b</code>将数据标号当作数据定义，c指代地址为<code>seg data:000A</code>的字单元，<strong>该字单元的内容是a的偏移地址</strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0000</mn></mrow><annotation encoding="application/x-tex">0000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>，下面是验证<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1675409382345-20e1a2f2-8973-4150-992a-2a8acb141fa9.png#averageHue=%23191919&amp;clientId=uaa2840e8-10be-4&amp;from=paste&amp;height=427&amp;id=ud990b41d&amp;name=image.png&amp;originHeight=427&amp;originWidth=642&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=15496&amp;status=done&amp;style=none&amp;taskId=u9d64f540-f9d7-4f4d-a179-67094b0601b&amp;title=&amp;width=642" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/29536731/1675409496753-347acc0d-300d-4502-b228-e202ee4504a4.png#averageHue=%23101010&amp;clientId=uaa2840e8-10be-4&amp;from=paste&amp;height=400&amp;id=u97a8ca97&amp;name=image.png&amp;originHeight=400&amp;originWidth=640&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12100&amp;status=done&amp;style=none&amp;taskId=u65363c06-9a66-4677-9782-717ab71b1b6&amp;title=&amp;width=640" alt="image.png" /></p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Foundation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数据结构与算法C++》学习历程</title>
      <link href="/2022/10/25/D-A-C++/"/>
      <url>/2022/10/25/D-A-C++/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><a name="qIfKY"></a><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>以下记录了我2022年暑假开始学习数据结构的历程。从哈希表到图论，有着详细的思考过程。</p><span id="more"></span><hr /><p><a name="Aq9ue"></a></p><h1 id="chapter-1-listsstacks-and-queues"><a class="markdownIt-Anchor" href="#chapter-1-listsstacks-and-queues"></a> Chapter 1 Lists,Stacks and Queues</h1><p><a name="csZFb"></a></p><h3 id="1-对自制vector容器添加错误检查能力"><a class="markdownIt-Anchor" href="#1-对自制vector容器添加错误检查能力"></a> 1. 对自制vector容器添加错误检查能力</h3><blockquote><p>访问vector容器，可能会出现的错误的迭代器操作主要有两种</p><ol><li>错误的访存操作：迭代器未初始化，执行<code>*</code>操作</li><li>迭代器超出容器边界：迭代器在末尾执行<code>++iter/iter++</code>操作</li></ol></blockquote><p>另外，迭代器还会出现如<code>7</code>所述的失效的情况</p><p><a name="kxJtb"></a></p><h4 id="1处理错误操作在重载运算符和时检查current的值"><a class="markdownIt-Anchor" href="#1处理错误操作在重载运算符和时检查current的值"></a> 1.处理错误操作：在重载运算符<code>*</code>和<code>++</code>时检查current的值</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Object <span class="token keyword">operator</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>const_iterator<span class="token double-colon punctuation">::</span>current <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token comment">// Check boundary</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Error: iterator is NULL!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span>const_iterator<span class="token double-colon punctuation">::</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>iterator<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">++</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>const_iterator<span class="token double-colon punctuation">::</span>current <span class="token operator">==</span> objects<span class="token punctuation">[</span>theSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// Error:Cannot access objects</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Error: iterator is end!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>const_iterator<span class="token double-colon punctuation">::</span>current<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>iterator类与const_iterator类作为vector模板类的嵌套类，访问外部类的私有成员<code>objects</code>与<code>theSize</code>是一件比较困难的事情 <a href="https://stackoverflow.com/questions/486099/can-inner-classes-access-private-variables">StackOverFlow：Can inner classes access private variables?</a></p><blockquote><p>嵌套类与外部类之间没有访问特权</p></blockquote><p><a name="hHyA9"></a></p><h4 id="2处理失效的迭代器给迭代器添加一个数据成员用于指向当前表用一个函数用于判断迭代器是否指向正确的表-当发生扩容时原有的thevector指向的空间被释放-thevector-null感觉有点问题"><a class="markdownIt-Anchor" href="#2处理失效的迭代器给迭代器添加一个数据成员用于指向当前表用一个函数用于判断迭代器是否指向正确的表-当发生扩容时原有的thevector指向的空间被释放-thevector-null感觉有点问题"></a> 2.处理失效的迭代器：给迭代器添加一个数据成员用于指向当前表，用一个函数用于判断迭代器是否指向正确的表。当发生扩容时，原有的theVector指向的空间被释放。（<code>theVector == NULL</code>感觉有点问题）</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">const_iterator</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">protected</span><span class="token operator">:</span>    Object<span class="token operator">*</span> current<span class="token punctuation">;</span>    <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token operator">*</span> theVector<span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">assertIsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> theVector <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token string">"IteratorOutOfbounds"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="fgUkk"></a></p><h3 id="2-搜寻链表的注意点"><a class="markdownIt-Anchor" href="#2-搜寻链表的注意点"></a> 2. 搜寻链表的注意点</h3><p>在链表搜寻值为x的节点时，显然需要保存两个节点的信息：当前节点<code>current</code>和上一个节点<code>foreCurrent</code>,要注意对这两个值不同的初始化，搜寻的条件也不同。有以下两种模式：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">current <span class="token operator">=</span> head<span class="token operator">-></span>nextforeCurrent <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">&amp;&amp;</span> current<span class="token operator">-></span>data <span class="token operator">!=</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    foreCurrent <span class="token operator">=</span> current<span class="token punctuation">;</span>    current <span class="token operator">=</span> current<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Node<span class="token operator">*</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span> <span class="token comment">// Initially nullptr</span>Node<span class="token operator">*</span> foreCurrent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token operator">-></span>next<span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> current<span class="token operator">-></span>data <span class="token operator">!=</span> x <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>foreCurrent <span class="token operator">=</span> current<span class="token punctuation">;</span>current <span class="token operator">=</span> current<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：混淆这两种模式将出现访存错误，如以下情况</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Node<span class="token operator">*</span> current <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>Node<span class="token operator">*</span> foreCurrent <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token operator">-></span>next<span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> current<span class="token operator">-></span>data <span class="token operator">!=</span> x <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>foreCurrent <span class="token operator">=</span> current<span class="token punctuation">;</span>current <span class="token operator">=</span> current<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样会出现的问题是：当链表中仅有一个头节点时，初始<code>current=head-&gt;next</code>值为<code>nullptr</code>，第3行的<code>current-&gt;next</code>将执行失败（实现iterator类后，尽可能的使用该类，该类不存在以上问题）<br /><a name="hF7j1"></a></p><h3 id="3平衡符号"><a class="markdownIt-Anchor" href="#3平衡符号"></a> 3.平衡符号</h3><p>创建一个空栈后读取文件，当读取到开放字符<code>(,&#123;,[,/*</code>时压入栈，当读取到封闭字符<code>),&#125;,],*/</code>时从栈顶弹出字符。</p><blockquote><ol><li>读取到封闭字符时，栈为空，则封闭字符不匹配，报错</li><li>弹出的字符与封闭字符不匹配，报错</li><li>读取到文件尾后，栈不为空，则开放字符不匹配，报错</li></ol></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">balSymbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> current<span class="token punctuation">,</span> prev<span class="token punctuation">;</span>string <span class="token function">left</span><span class="token punctuation">(</span><span class="token string">"&#123;[(*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string <span class="token function">right</span><span class="token punctuation">(</span><span class="token string">"&#125;])"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ifstream <span class="token function">iFile</span><span class="token punctuation">(</span><span class="token string">"3_21Sample.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> check<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>iFile<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iFile <span class="token operator">>></span> current<span class="token punctuation">;</span>prev <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>iFile<span class="token punctuation">.</span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// push open symbol in stack</span><span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token operator">!=</span> string<span class="token double-colon punctuation">::</span>npos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>current <span class="token operator">!=</span><span class="token char">'*'</span><span class="token punctuation">)</span>check<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token char">'*'</span> <span class="token operator">&amp;&amp;</span> prev <span class="token operator">==</span> <span class="token char">'/'</span><span class="token punctuation">)</span> <span class="token comment">// push in '/*'</span><span class="token punctuation">&#123;</span>check<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// no push action for current =='*' prev !='/'</span><span class="token punctuation">&#125;</span><span class="token comment">// If it is a closed symbol and stack is not empty, the corresponding symbol will pop up</span><span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token char">'/'</span> <span class="token operator">&amp;&amp;</span> prev <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">)</span> <span class="token comment">// special for '/','/' can be left or right</span><span class="token punctuation">&#123;</span> <span class="token comment">// for '*/',no action for current =='/' and stack is empty (/*....),</span><span class="token keyword">if</span><span class="token punctuation">(</span>check<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//last mismatch closed symbol is a speical situation, which can not belong to error:eof()</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"closed symbol mismatch!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>check<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'/'</span><span class="token punctuation">)</span>check<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token operator">!=</span> string<span class="token double-colon punctuation">::</span>npos<span class="token punctuation">)</span>   <span class="token comment">// for (]&#125;</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>check<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// prevent top() error</span><span class="token punctuation">&#123;</span><span class="token comment">//last mismatch closed symbol is a speical situation, which can not belong to error:eof()</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"closed symbol mismatch!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token char">'&#125;'</span> <span class="token operator">&amp;&amp;</span> check<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'&#123;'</span><span class="token punctuation">)</span>check<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token char">']'</span> <span class="token operator">&amp;&amp;</span> check<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'['</span><span class="token punctuation">)</span>check<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token char">')'</span> <span class="token operator">&amp;&amp;</span> check<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'('</span><span class="token punctuation">)</span>check<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// error: top stack symbol mismatch → eof() is false</span><span class="token punctuation">&#125;</span>prev <span class="token operator">=</span> current<span class="token punctuation">;</span>iFile <span class="token operator">>></span> current<span class="token punctuation">;</span> <span class="token comment">// read next character in buffer</span><span class="token punctuation">&#125;</span><span class="token comment">// judge</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>iFile<span class="token punctuation">.</span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"closed symbol mismatch!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>check<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"open symbol mismatch!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Successful!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="JdH6s"></a></p><h3 id="4-中缀表达式转后缀表达式"><a class="markdownIt-Anchor" href="#4-中缀表达式转后缀表达式"></a> 4. 中缀表达式转后缀表达式</h3><p>1.为什么在向栈中压入运算符时，要先弹出优先级更高的运算符</p><blockquote><p>运算符的出栈顺序代表了运算符的执行顺序。显然的，优先级更高的运算符最先打印并出栈，即在后缀表达式中代表最早参与运算</p></blockquote><p>2.为什么直到碰到右括号<code>)</code>之前，不弹出左括号<code>(</code>，遇到右括号<code>)</code>后,弹出栈元素直到遇到<code>(</code></p><blockquote><p>该操作的意思是弹出括号内的所有运算符，显然的，括号内的各运算符优先级高于括号外的运算符</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">infixToPostFix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ifstream <span class="token function">iFile</span><span class="token punctuation">(</span><span class="token string">"3_23Sample.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>iFile<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string operators <span class="token operator">=</span> <span class="token string">"()+-/*"</span><span class="token punctuation">;</span>stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span>keepOptors<span class="token punctuation">;</span><span class="token keyword">char</span> current<span class="token punctuation">;</span>iFile <span class="token operator">>></span> current<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>iFile<span class="token punctuation">.</span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>operators<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token operator">!=</span> string<span class="token double-colon punctuation">::</span>npos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>keepOptors<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// initial</span>keepOptors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token char">'+'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>operators<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>keepOptors<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">!=</span> string<span class="token double-colon punctuation">::</span>npos<span class="token punctuation">)</span> <span class="token comment">//top item is +, -,* or /</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> keepOptors<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span>keepOptors<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>keepOptors<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>keepOptors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>current <span class="token operator">==</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>operators<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>keepOptors<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//top item is -,* or /</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> keepOptors<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span>keepOptors<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>keepOptors<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>keepOptors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token char">'*'</span> <span class="token operator">||</span> current <span class="token operator">==</span> <span class="token char">'('</span><span class="token punctuation">)</span>keepOptors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>keepOptors<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'('</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> keepOptors<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span>keepOptors<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>keepOptors<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// pop up '('</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span>cout <span class="token operator">&lt;&lt;</span> current <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>iFile <span class="token operator">>></span> current<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>keepOptors<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> keepOptors<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>keepOptors<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="Kvu8h"></a></p><h3 id="5-后缀表达式转中缀表达式"><a class="markdownIt-Anchor" href="#5-后缀表达式转中缀表达式"></a> 5. 后缀表达式转中缀表达式</h3><p>想法与计算后缀表达式差不多，注意两个地方</p><blockquote><p>1.优先参与运算的运算符的运算结果是下一个运算符的操作数，想想怎么把表达式连接成一个整体<br />2.为每个计算式加上括号，确保在最终的中缀表达式中能清晰的表达计算顺序，如 8<em>5+3 与 (8</em>(5+3))</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">postfixToInfix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>stack<span class="token operator">&lt;</span>string<span class="token operator">></span> expr<span class="token punctuation">;</span>ifstream <span class="token function">iFile</span><span class="token punctuation">(</span><span class="token string">"3_22Sample.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>iFile<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string first<span class="token punctuation">,</span> second<span class="token punctuation">;</span><span class="token keyword">char</span> current<span class="token punctuation">;</span>iFile <span class="token operator">>></span> current<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>iFile<span class="token punctuation">.</span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">48</span> <span class="token operator">&lt;=</span> current <span class="token operator">&amp;&amp;</span> current <span class="token operator">&lt;=</span> <span class="token number">57</span><span class="token punctuation">)</span>expr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>first <span class="token operator">=</span> expr<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>expr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>second <span class="token operator">=</span> expr<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>expr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">)</span>expr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">'('</span><span class="token operator">+</span>first <span class="token operator">+</span> <span class="token char">'*'</span><span class="token operator">+</span>second<span class="token operator">+</span><span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token char">'/'</span><span class="token punctuation">)</span>expr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">'('</span><span class="token operator">+</span>first <span class="token operator">+</span><span class="token char">'/'</span><span class="token operator">+</span> second <span class="token operator">+</span> <span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token char">'+'</span><span class="token punctuation">)</span>expr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">'('</span> <span class="token operator">+</span> first <span class="token operator">+</span> <span class="token char">'+'</span> <span class="token operator">+</span> second <span class="token operator">+</span> <span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span>expr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">'('</span> <span class="token operator">+</span> first <span class="token operator">+</span> <span class="token char">'-'</span> <span class="token operator">+</span> second <span class="token operator">+</span> <span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>iFile <span class="token operator">>></span> current<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> expr<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="OSFAk"></a></p><h3 id="6-逆向打印链表的两个方法"><a class="markdownIt-Anchor" href="#6-逆向打印链表的两个方法"></a> 6. 逆向打印链表的两个方法</h3><p><a name="UuJnf"></a></p><h4 id="1链表反转"><a class="markdownIt-Anchor" href="#1链表反转"></a> 1.链表反转</h4><p>改变单向链表的结构，反转其方向。需要用到三个结点的信息<code>prev、current、next</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">Reverse_List</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// O(1)</span><span class="token punctuation">&#123;</span>Node<span class="token operator">*</span> prev<span class="token punctuation">,</span> <span class="token operator">*</span>current<span class="token punctuation">,</span> <span class="token operator">*</span>cNext<span class="token punctuation">;</span>prev <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>current <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>cNext <span class="token operator">=</span> current<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cNext <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>current<span class="token operator">-></span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span> <span class="token comment">// reverse direction</span>prev <span class="token operator">=</span> current<span class="token punctuation">;</span>current <span class="token operator">=</span> cNext<span class="token punctuation">;</span>cNext <span class="token operator">=</span> current<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>current<span class="token operator">-></span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>head<span class="token operator">-></span>next <span class="token operator">=</span> current<span class="token punctuation">;</span> <span class="token comment">// head to tail</span><span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> current<span class="token operator">-></span>value <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>current <span class="token operator">=</span> current<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意同时声明多个指针时，不能写成<code>Node* prev, current, cNext</code>，这种声明下<code>current、cNext</code>是int型，只有一个<code>prev</code>是指针类型。应改为<code>Node* prev, *current, *cNext;</code></p></blockquote><p><a name="aAKjU"></a></p><h4 id="2利用栈"><a class="markdownIt-Anchor" href="#2利用栈"></a> 2.利用栈</h4><p>逆向打印可以利用栈先进后出的性质实现</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">Reverse_Print_With_Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//  O(N)</span><span class="token punctuation">&#123;</span>    stack<span class="token operator">&lt;</span>T<span class="token operator">></span> storage<span class="token punctuation">;</span>    Node<span class="token operator">*</span> p <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        storage<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token operator">-></span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>storage<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> storage<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>        storage<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="QwIKh"></a></p><h3 id="7-环形缓冲区的满vs空问题"><a class="markdownIt-Anchor" href="#7-环形缓冲区的满vs空问题"></a> 7. 环形缓冲区的满vs空问题</h3><p>用<strong>数组</strong>实现队列通常有两种方式</p><ol><li>head 指向队列头，即第一个元素，tail 指向新元素即将插入的位置，即最后一个元素的下一个位置，enque后tail+1 (初始状态：head = tail = 0)</li><li>head 指向队列头，tail指向最后一个元素，enque前tail+1 （初始状态：front = 0 , tail = -1）</li></ol><p>两种情况下，均要保持队列最后一个元素不能使用，(n-1) 长度队列可以用长度为 n 的数组创建</p><ol><li><br /></li></ol><p>empty：<code>head = tail  </code><br />full：<code>head = (tail+1) % maxSize</code>  <br />如果完全填充数组，那么会导致full和empty情况下，均满足<code>head = tail </code></p><ol start="2"><li><br /></li></ol><p>empty : <code>head = (tail+1) % maxSize</code>  <br />full：<code>head = (tail+2) % maxSize</code> ？<br />如果完全填充数组，那么会导致full和empty情况下,均满足<code>head = (tail+1) % maxSize</code><img src="https://cdn.nlark.com/yuque/0/2022/png/29536731/1660033289402-7374663e-99df-4e23-8d39-2bcb71e5622a.png" alt="image.png" /><br /><a name="mDKbV"></a></p><h3 id="8-判断链表是否有环的两个方法"><a class="markdownIt-Anchor" href="#8-判断链表是否有环的两个方法"></a> 8. 判断链表是否有环的两个方法</h3><blockquote><ol><li>用<code>hashset</code>存储遍历过的节点，用新节点对比，有重复则存在环</li><li>双指针遍历，速度不同，相遇则存在环</li></ol></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">detectloop</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Node<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">*</span> first<span class="token punctuation">,</span> <span class="token operator">*</span> second<span class="token punctuation">;</span>first <span class="token operator">=</span> second <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token comment">/*A walks faster than B, so only A is judged.If A is the last node, you need to judge A->next*/</span><span class="token keyword">while</span> <span class="token punctuation">(</span>first <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> first<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>first <span class="token operator">=</span> first<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment">// two step</span>second <span class="token operator">=</span> second<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment">// one step</span><span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> second<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"exist loop"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"no loop"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>涉及的算法：<a href="https://www.geeksforgeeks.org/floyds-cycle-finding-algorithm/">Floyd’s Cycle Finding Algorithm</a></p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/31401474">知乎：如何判断链表有环</a><br /><a href="https://leetcode.com/problems/linked-list-cycle/discuss/1829489/C%2B%2B-oror-Easy-To-Understand-oror-2-Pointer-oror-Fast-and-Slow">LeetCode：Linked List Cycle</a><br /><a name="qdbBD"></a></p><h2 id="other-questions"><a class="markdownIt-Anchor" href="#other-questions"></a> other questions：</h2><ol><li><strong>stackoverflow示例中总是出现的foo ，bar 是什么意思</strong></li></ol><p>foo：File or Object，文件或对象。它用于代替对象变量或文件名，用于代码演示<br />bar：与foo的作用一样，表示变量或文件，用于代码演示2.VS2019调出监视窗口的办法</p><ol start="2"><li><strong>vs2019中调式调出监视窗口</strong></li></ol><p>设置断点，运行程序<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/29536731/1658310883417-a80aaf32-ea48-40bb-b554-2c6d8960689b.png" alt="屏幕截图 2022-07-20 175431.png" /></p><ol start="3"><li><strong>git上传项目到github</strong></li></ol><p><a href="https://zhuanlan.zhihu.com/p/369486197">知乎：github基础教学</a><br /><a name="IthCG"></a></p><h2 id="remaining-problem"><a class="markdownIt-Anchor" href="#remaining-problem"></a> remaining problem</h2><ol><li><strong>在vector中实现erase(iterator pos)</strong></li></ol><p>涉及萃取</p><ol start="2"><li><strong>实现能够指定容器的stack类</strong></li><li><strong>STL stack: emplace() vs push()</strong></li></ol><p>涉及右值引用，移动构造(?)</p><ol start="4"><li><strong>判断链表是否有环，为什么不直接判断最后一个节点指向是否为nullptr</strong></li></ol><p>我认为可能的原因：当最后一个节点指向本身时，其next也不为nullptr，而此时单链表中不存在环，所以该方法不适用。</p><hr /><p><a name="oX3jS"></a></p><h1 id="chapter-2-trees"><a class="markdownIt-Anchor" href="#chapter-2-trees"></a> Chapter 2 Trees</h1><p><a name="JBUuP"></a></p><h2 id="record"><a class="markdownIt-Anchor" href="#record"></a> record:</h2><p><a name="oEiO6"></a></p><h3 id="1-二叉查找树类中为什么要额外添加功能与公有函数相同但参数不同的同名私有函数"><a class="markdownIt-Anchor" href="#1-二叉查找树类中为什么要额外添加功能与公有函数相同但参数不同的同名私有函数"></a> 1. 二叉查找树类中为什么要额外添加功能与公有函数相同，但参数不同的同名私有函数</h3><p>在类外调用公有函数，而公有函数内部需要递归处理左右子树，需要传入新的根节点，所以需要有额外的能传入根节点参数的函数，因为这类函数只被公有函数所使用，所以设置为私有（辅助函数）<br /><a href="https://stackoverflow.com/questions/4505938/when-why-to-make-function-private-in-class">stackoverflow：When/why to make function private in class?</a><br /><a name="DpaEu"></a></p><h3 id="2搜索二叉树的insert成员函数结点指针t必须引用传递的原因"><a class="markdownIt-Anchor" href="#2搜索二叉树的insert成员函数结点指针t必须引用传递的原因"></a> 2.搜索二叉树的insert成员函数结点指针t必须引用传递的原因</h3><p>如果采用值传递，那么函数insert中的指针将是实参的副本，在函数insert中修改该副本，不能达到修改结点p的成员变量left or right的目的, remove函数同理<br /><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/29536731/1661568230165-1e7336ea-23dc-443d-afa4-e35e7a5a4058.jpeg" alt="" /><br /><a name="WEgNR"></a></p><h3 id="3-平衡二叉树"><a class="markdownIt-Anchor" href="#3-平衡二叉树"></a> 3. 平衡二叉树</h3><p>对BST的find操作，其运行时间为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>d</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">d</span><span class="mclose">)</span></span></span></span>,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span>为结点的深度。给定一系列值，不同的插入序列对应不同的树结构，有着不同的平均结点深度，进而有不同的查找效率。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/29536731/1661156478689-efe3aeff-b060-4bc9-80ee-099b96f5aa02.png" alt="image.png" /><br />创建高度为h的AVL树所需的最少结点数为斐波那契数列第h+2项的值减1（高度和项数均从0计数）<br /><a name="FZLgt"></a></p><h2 id="remaining-problem-2"><a class="markdownIt-Anchor" href="#remaining-problem-2"></a> remaining problem</h2><p><a name="Le4pv"></a></p><h3 id="1-给定一系列值确定构造bst的方法个数"><a class="markdownIt-Anchor" href="#1-给定一系列值确定构造bst的方法个数"></a> 1. 给定一系列值，确定构造BST的方法个数</h3><p><a href="https://stackoverflow.com/questions/17119116/how-many-ways-can-you-insert-a-series-of-values-into-a-bst-to-form-a-specific-tr">stackoverflow：How many ways can you insert a series of values into a BST to form a specific tree?</a></p><hr /><p><a name="Cieup"></a></p><h1 id="chapter-3-hashing"><a class="markdownIt-Anchor" href="#chapter-3-hashing"></a> Chapter 3 Hashing</h1><p><a name="RQFF9"></a></p><h2 id="1-为什么哈希表只能惰性删除lazy-deletion"><a class="markdownIt-Anchor" href="#1-为什么哈希表只能惰性删除lazy-deletion"></a> 1. 为什么哈希表只能惰性删除(lazy deletion)</h2><p>答：在插入其它元素A时，A可能与待删除元素B发生过冲突(collision),即可能有<code>myhash(A) == myhash(B)</code>,也可能是A在向前探测的过程中与B发生过冲突。 如果删除元素B，那么在寻找A就会失败，因为此时B所在的位置是EMPTY，那么findPos(A)在B的位置上会返回currentPos,查找结束，但currentPos是EMPTY而不是A所在的值。<br /><a name="mwjke"></a></p><h2 id="2-为什么要有哈希表是怎么达到高效性的"><a class="markdownIt-Anchor" href="#2-为什么要有哈希表是怎么达到高效性的"></a> 2. 为什么要有哈希表？是怎么达到高效性的？</h2><p>为了在<strong>常数时间</strong>内高效实现对数据的插入，删除，查找操作。 通过<strong>哈希函数</strong>（通常是 <code>hash(x) % tableSize</code>,<code>hash(x)</code>的作用是将x转化为数字，由key类提供，如果x本身就是数字，那么hash(x) = x），让待插入数据<strong>直接定位</strong>到哈希表中的一个位置（哈希表是什么？ 一个固定大小的存储项的数组， 哈希 = 散列）<br /><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/29536731/1664794253808-1aee7326-a1c4-44c2-986e-5ca40efa4d87.jpeg" alt="" /><br /><a name="Hcjq3"></a></p><h2 id="3-冲突collision是什么怎么解决冲突的"><a class="markdownIt-Anchor" href="#3-冲突collision是什么怎么解决冲突的"></a> 3. 冲突(collision)是什么？怎么解决冲突的？</h2><p>不同的数据可能会被哈希函数映射到相同的位置，而一个位置只能属于一个数据，因此产生了冲突。为解决冲突，很简单是想法就是：<strong>既然原本属于它的位置被占用了，那就将数据移到可以存放的空位置</strong><br />如何找到这个空位置呢？有两种方法</p><ol><li><strong>分离链接法（separate chaining）:</strong></li></ol><p>既然冲突是因为一个位置只能存放一个数据，那么引入链表以实现一个位置能够存放多个数据，冲突便解决了。哈希表中的一个位置对应一条链表，显然的，在某个位置发生的冲突越多，那么这条链表就越长。无论是执行查找还是删除操作，都要先找到链表（由哈希函数得到），再在链表里面找到数据。</p><ol start="2"><li><strong>开放定址法（open addressing）：</strong></li></ol><p>往前探测（probe），形式化为公式就是<code>hashi(x) = (hash(x) + f(i))</code>,<strong>i表示向前探测的次数</strong>，f(i)称为冲突解决策略（collision resolution strategy）,显然<code>f(0)=0</code>。根据f(i)形式的不同，分为线性(Linear)探测:<code>f(i)=i</code>、平方(quadratic)探测:<code>f(i) = i2</code>、双(double)散列:<code>f(i) = i*hash2(x)</code><br />**线性探测会引起一次聚集（<strong>primary cluster</strong>），平方探测会引起二次聚集（<strong>Secondary Clustering</strong>），**关于这一点：<a href="https://stackoverflow.com/questions/27742285/what-is-primary-and-secondary-clustering-in-hash">stackoverflow：What is primary and secondary clustering in hash?</a> 说的很清楚<br />为什么一次聚集对性能的影响会比二次聚集更大呢？首先要知道，聚集之所以会影响性能，是因为聚集导致hashPos之后的位置大部分被占用，进而导致探测次数增加。一次聚集是无间隔的聚集，那么只要在这堆聚集的项中发生了冲突，就基本上要一步一步的探测完所有聚集项才能找到空位置。而二次聚集是有间隔的，一次两步的探测会减少探测的发生。这个具体的描述比较困难，但是很好想。<br />双散列，消除了聚集问题，它应用了另一个哈希函数<code>hash2(x)</code>（<strong>哈希结果不能为0，则f(i)将失去意义</strong>），使得探测更趋于随机化，而不是集中在哈希位置附近。<br />注意点：</p><ul><li>哈希表的**大小(tableSize)为素数(Prime)**能更好的减少冲突的发生</li><li><strong>tableSize为素数且λ&lt;0.5</strong>（有一半以上空项）时平方探测能保证插入成功。否则甚至不如线性探测，因为插入可能会失败（书上有证明）</li><li>当计算哈希值代价较高时，性能角度上，双散列较之平方探测不是一个更好的选择</li></ul><p><strong>两个方法的对比：</strong> 前者不如后者，因为分离链表法会因为插入而分配新内存，这将降低执行效率；其次，分离链表法等于是哈希表与链表的结合，等于要求实现了另一种数据结构(而不是哈希表)，提高了程序的复杂性</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">findPos</span><span class="token punctuation">(</span><span class="token keyword">const</span> hashedObj<span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> currentPos <span class="token operator">=</span> <span class="token function">myhash</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>currentPos<span class="token punctuation">]</span><span class="token punctuation">.</span>info <span class="token operator">!=</span> Empty <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>currentPos<span class="token punctuation">]</span><span class="token punctuation">.</span>element <span class="token operator">!=</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>currentPos <span class="token operator">+=</span> offset<span class="token punctuation">;</span>offset <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>currentPos <span class="token operator">>=</span> array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>currentPos <span class="token operator">-=</span> array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> currentPos<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="vpuOb"></a></p><h2 id="4-为什么要再散列rehashing再散列要怎么做"><a class="markdownIt-Anchor" href="#4-为什么要再散列rehashing再散列要怎么做"></a> 4. 为什么要再散列(rehashing)？再散列要怎么做？</h2><p>当哈希表过于满(too full，λ too big)，查找操作将会变得非常缓慢（如之前所说，探测次数会非常多），进而影响插入和删除操作。解决这个困境的办法就是扩大哈希表以降低λ。<br />做法是：创建一个表长为大于2倍当前长度的第一个素数的新表（如当前长度是7，扩大后为17），相应的也产生了新的哈希函数，接着把原表中的所有数据通过新的哈希函数映射到新表中。<br />怎么界定哈希表是否需要再散列，一个好的方法是：当λ到达某个界定值时</p><hr /><p><a name="OulqF"></a></p><h1 id="chapter-4-heap"><a class="markdownIt-Anchor" href="#chapter-4-heap"></a> Chapter 4 Heap</h1><p><a name="KirP0"></a></p><h2 id="1-为什么要有二叉堆binary-heap-是怎么达到高效的"><a class="markdownIt-Anchor" href="#1-为什么要有二叉堆binary-heap-是怎么达到高效的"></a> 1. 为什么要有二叉堆(Binary Heap)? 是怎么达到高效的？</h2><p>为了实现<strong>优先级队列(priority queue)</strong>，即根据不同对象间的优先级排列而形成的队列，如操作系统中进程的优先级队列。相比于用队列(Queue)实现的根据对象到来的时间属性而确定优先级队列(即First Come First Served), 我们希望有一种数据结构，它有着更加灵活的优先级批判标准，而不是只看任务的到达时间。不仅如此，为了高效性，我们希望这个数据结构能够快速的找出队列中优先级最大的那一个。<br />由此我们引出二叉堆，二叉堆是一个**底层为数组的完全二叉树(complete binary tree)，**有结构性质和堆序性质<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/29536731/1665135196819-0f05c687-059e-4b79-9c73-9c31e16de204.png" alt="image.png" /></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> Comparable<span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>heapSize <span class="token operator">==</span> array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>array<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> hole <span class="token operator">=</span> <span class="token operator">++</span>heapSize<span class="token punctuation">;</span>Comparable copy <span class="token operator">=</span> x<span class="token punctuation">;</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>copy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>hole <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> hole <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// percolate up</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>hole<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>hole <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>array<span class="token punctuation">[</span>hole<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">deleteMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>hole <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>Comparable x <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>heapSize<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> hole <span class="token operator">&lt;=</span> heapSize<span class="token punctuation">;</span> hole<span class="token operator">*=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// percolate down</span><span class="token punctuation">&#123;</span>child <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> hole<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">!=</span> heapSize <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>child <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">++</span>child<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> array<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">)</span>array<span class="token punctuation">[</span>hole<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>array<span class="token punctuation">[</span>hole<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> heapSize <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token function">percolateDown</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><p><a name="eHZpk"></a></p><h1 id="chapter-5-sorting"><a class="markdownIt-Anchor" href="#chapter-5-sorting"></a> Chapter 5 Sorting</h1><p><a name="SWGCy"></a></p><h2 id="insertion_sort"><a class="markdownIt-Anchor" href="#insertion_sort"></a> Insertion_Sort</h2><p><a name="Hw7N9"></a></p><h3 id="1-怎么插入的为什么结果能有序"><a class="markdownIt-Anchor" href="#1-怎么插入的为什么结果能有序"></a> 1. 怎么插入的？为什么结果能有序？</h3><p>对序列(Comparable)，假定第一个数据(array[0])是有序的，把从第二项到末尾的数据逐个插入到开头的有序序列中。<br />怎么插入的？将待插入项<code>tmp</code>与有序序列中的项逐个比较，遇到<code>array[i]&gt;tmp</code>(升序序列)，则将有序序列中的元素右移，为<code>tmp</code>提供插入位，接着插入<code>tmp</code>。等价于将位置为p的项放入前p+1项(从0开始索引)的正确位置(从小到大)。如果数组本身就比较有序，那么可以省去不少插入操作<br />为什么能有序？ straightforward，我觉得有些许减治法的感觉，先解决小问题，逐步解决大问题。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Comparable</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Comparable<span class="token operator">></span><span class="token operator">&amp;</span> array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> N <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> p <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Comparable tmp <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> tmp <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// j move right, p move left</span><span class="token punctuation">&#125;</span>array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="AXqXN"></a></p><h2 id="shell_sort"><a class="markdownIt-Anchor" href="#shell_sort"></a> Shell_Sort</h2><p><a name="NvzxL"></a></p><h3 id="1-为什么说希尔排序涉及了插入排序"><a class="markdownIt-Anchor" href="#1-为什么说希尔排序涉及了插入排序"></a> 1. 为什么说希尔排序涉及了插入排序？</h3><p>因为希尔排序先将序列分组，然后在组内进行插入排序<br /><a name="rqY4s"></a></p><h3 id="2-希尔排序是如何分组的"><a class="markdownIt-Anchor" href="#2-希尔排序是如何分组的"></a> 2. 希尔排序是如何分组的？</h3><p>使用一组增量h1，h2，h3， . . . , ht(就是代表了不同的跨度，h1 =1)。第一阶段，对任意位置i，把array[i]，array[i+ht]，array[i+2ht]…分为一组执行插入排序；第二阶段，对任意位置i，把array[i]，array[i+ht-1]，array[i+2ht-1]…分为一组执行插入排序。显然的，在最后阶段，使用增量h1=1时就是对整个序列执行插入排序。<br />选择合适的增量能使插入排序的时间复杂度低于插入排序，如 Hibbard增量： 1, 3, 7, . . . , 2k − 1。<br /><strong>执行一个增量为h<strong><strong>k</strong></strong>的排序(hk-Sort)，等价于对h<strong><strong>k</strong></strong>个子数组(subarray)执行插入排序(见下图)</strong>。<br /><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/29536731/1665481444552-78d1a034-c95c-462b-b080-475d22f10d1c.jpeg" alt="" /><br /><a name="yUWsx"></a></p><h3 id="3-希尔排序是如何改进插入排序的-执行名副其实的插入排序前h1分组的作用是什么"><a class="markdownIt-Anchor" href="#3-希尔排序是如何改进插入排序的-执行名副其实的插入排序前h1分组的作用是什么"></a> 3. 希尔排序是如何改进插入排序的? 执行名副其实的插入排序前(h1)，分组的作用是什么？</h3><p>分组的作用是对数组执行<a href="https://zhuanlan.zhihu.com/p/87781731">预排序</a>，即在执行真正的插入排序前先使数组比较有序，以减少执行插入操作的次数。显然插入排序在1.元素个数少 2. 数组比较有序 的情况下执行效率高。分组营造了前一个条件以高效排序子数组，并为逐步减少分组的增量(跨度)以排序数组中的更多元素提供了第二个条件。所以显然的，希尔排序优于插入排序。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Comparable</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">shell_Sort</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Comparable<span class="token operator">></span> array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> N <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">=</span> N<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// insertion Sort</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> p <span class="token operator">=</span> gap<span class="token punctuation">;</span> p <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>p<span class="token punctuation">)</span>   <span class="token comment">// point: ++p here</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> j <span class="token operator">=</span> p <span class="token operator">-</span> gap<span class="token punctuation">;</span>Comparable tmp <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>  array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> tmp<span class="token punctuation">;</span> j<span class="token operator">-=</span>gap<span class="token punctuation">)</span>array<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="ZZpJ6"></a></p><h2 id="heap_sort"><a class="markdownIt-Anchor" href="#heap_sort"></a> Heap_Sort</h2><p><a name="mMQHg"></a></p><h3 id="1-如何利用堆实现排序"><a class="markdownIt-Anchor" href="#1-如何利用堆实现排序"></a> 1. 如何利用堆实现排序</h3><p>要利用堆(heap)将一个乱序的数组变成有序的数组，显然的，要首先构造一个堆(build heap)，即利用heapify的方法将N个元素组成堆的结构(本质还是数组)；接着，对这个堆执行N-1次<code>deleteMax</code>(或<code>deleteMin</code>)操作，在每次执行删除操作时，将删除的元素填入刚刚空出来的最后一个元素的位置上；最后能得到一个递增序列(最大堆)或递减序列(最小堆)。<br />关键是要认识到，在本质上，对堆执行deleteMax操作，是将堆的最后一个元素(<code>array[HeapSize]</code>)填在根(<code>array[0]</code>)的位置(覆盖原有的根值),接着把这个结点通过下滤(percolate down)放在合适位置。较之堆删除，堆排序只改变了一个操作，那就是把这个覆盖的过程，变成一个交换(swap)的过程。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29536731/1665664167534-eee32f0c-0cba-487b-a1aa-b684f3f02866.png" alt="image.png" /></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Comparable</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Comparable<span class="token operator">></span> <span class="token operator">&amp;</span> objects<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// bulid heap</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> objects<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token function">percDown</span><span class="token punctuation">(</span>objects<span class="token punctuation">,</span> j<span class="token punctuation">,</span> objects<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//make a decreasing array</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> objects<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">swap</span><span class="token punctuation">(</span>objects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> objects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">percDown</span><span class="token punctuation">(</span>objects<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">int</span>  <span class="token function">leftChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Comparable</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">percDown</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Comparable<span class="token operator">></span> <span class="token operator">&amp;</span>objects <span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Comparable tmp <span class="token operator">=</span> <span class="token function">move</span><span class="token punctuation">(</span>objects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> child<span class="token punctuation">;</span><span class="token comment">// left child </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token function">leftChild</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">=</span> child<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>child <span class="token operator">=</span> <span class="token function">leftChild</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">!=</span> n<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> objects<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">&lt;</span> objects<span class="token punctuation">[</span>child <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">++</span>child<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">&lt;</span> objects<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">)</span>objects<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">move</span><span class="token punctuation">(</span>objects<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>objects<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">move</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="pNLGn"></a></p><h2 id="merge_sort"><a class="markdownIt-Anchor" href="#merge_sort"></a> Merge_Sort</h2><p><a name="cBdMT"></a></p><h3 id="1-归并排序是如何排序的为什么说体现了分而治之-divide-and-conquer的思想"><a class="markdownIt-Anchor" href="#1-归并排序是如何排序的为什么说体现了分而治之-divide-and-conquer的思想"></a> 1. 归并排序是如何排序的，为什么说体现了分而治之( divide-and-conquer)的思想？</h3><p>归并排序，最重要的基本操作就是<strong>将两个已排序的数组整合为一个</strong>，也就是Merge(合并)操作。要获取两个已排序的数组，首先将待排序的数组一分为二，然后对这两个子数组递归的调用归并排序（递归返回条件：子数组只剩一个元素<code> left &gt;= right</code>)。 <br />归并排序本质上是对<strong>逐步完成对子数组的排序进而完成大数组的排序</strong>。<br /><strong>divide：将数组一分为二    conquer：Merge</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Comparable</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Comparable<span class="token operator">></span><span class="token operator">&amp;</span> objects<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>Comparable<span class="token operator">></span><span class="token operator">&amp;</span> tmpA<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span> <span class="token comment">// recursive call's end condition : only one element </span><span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> center <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>objects<span class="token punctuation">,</span> tmpA<span class="token punctuation">,</span> left<span class="token punctuation">,</span> center<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// merge first half </span><span class="token function">mergeSort</span><span class="token punctuation">(</span>objects<span class="token punctuation">,</span> tmpA<span class="token punctuation">,</span> center <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// merge second half</span><span class="token function">merge</span><span class="token punctuation">(</span>objects<span class="token punctuation">,</span> tmpA<span class="token punctuation">,</span> left<span class="token punctuation">,</span> center <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// patch</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Comparable</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Comparable<span class="token operator">></span><span class="token operator">&amp;</span> objects<span class="token punctuation">)</span>  <span class="token comment">// driver</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span>Comparable<span class="token operator">></span> <span class="token function">tmpA</span><span class="token punctuation">(</span>objects<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>objects<span class="token punctuation">,</span> tmpA<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> objects<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Comparable</span><span class="token operator">></span> <span class="token comment">// merge two sorted array into one</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Comparable<span class="token operator">></span><span class="token operator">&amp;</span> objects<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>Comparable<span class="token operator">></span><span class="token operator">&amp;</span> tmpA<span class="token punctuation">,</span> <span class="token keyword">int</span> leftBegin<span class="token punctuation">,</span> <span class="token keyword">int</span> rightBegin<span class="token punctuation">,</span> <span class="token keyword">int</span> rightEnd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> leftEnd <span class="token operator">=</span> rightBegin <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> tmpAIndex <span class="token operator">=</span> leftBegin<span class="token punctuation">;</span><span class="token keyword">int</span> N <span class="token operator">=</span> rightEnd <span class="token operator">-</span> leftBegin <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>leftBegin <span class="token operator">&lt;=</span> leftEnd <span class="token operator">&amp;&amp;</span> rightBegin <span class="token operator">&lt;=</span> rightEnd<span class="token punctuation">)</span> <span class="token comment">// comparison between two halves</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>objects<span class="token punctuation">[</span>leftBegin<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> objects<span class="token punctuation">[</span>rightBegin<span class="token punctuation">]</span><span class="token punctuation">)</span>tmpA<span class="token punctuation">[</span>tmpAIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">move</span><span class="token punctuation">(</span>objects<span class="token punctuation">[</span>leftBegin<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span>tmpA<span class="token punctuation">[</span>tmpAIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">move</span><span class="token punctuation">(</span>objects<span class="token punctuation">[</span>rightBegin<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>leftBegin <span class="token operator">&lt;=</span> leftEnd<span class="token punctuation">)</span> <span class="token comment">// copy the remainder</span><span class="token punctuation">&#123;</span>tmpA<span class="token punctuation">[</span>tmpAIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">move</span><span class="token punctuation">(</span>objects<span class="token punctuation">[</span>leftBegin<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>rightBegin <span class="token operator">&lt;=</span> rightEnd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>tmpA<span class="token punctuation">[</span>tmpAIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">move</span><span class="token punctuation">(</span>objects<span class="token punctuation">[</span>rightBegin<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// how to write back to objects</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">,</span><span class="token operator">--</span>rightEnd <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>objects<span class="token punctuation">[</span>rightEnd<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">move</span><span class="token punctuation">(</span>tmpA<span class="token punctuation">[</span>rightEnd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/29536731/1672988373854-be3e4874-5705-410b-8800-ad92faa15a40.jpeg" alt="" /><br /><a name="dIPOD"></a></p><h2 id="quick_sort"><a class="markdownIt-Anchor" href="#quick_sort"></a> Quick_Sort</h2><p><a name="SkElc"></a></p><h3 id="1-快速排序是如何排序的"><a class="markdownIt-Anchor" href="#1-快速排序是如何排序的"></a> 1. 快速排序是如何排序的</h3><p>与归并排序类似，快速排序也有分割数组的操作，但不同于归并排序一分为二的做法**，快速排序会先在数组中选取一个枢纽元(pivot)，然后把剩下的元素根据大于/小于pivot分为两组(group)，**产生两个子数组，放在pivot前后，接着递归的对子数组调用快速排序。<br /><a name="Tfhnl"></a></p><h3 id="2-为什么选择三数中值median-of-three-作为pivot的效率最高"><a class="markdownIt-Anchor" href="#2-为什么选择三数中值median-of-three-作为pivot的效率最高"></a> 2. 为什么选择三数中值(Median-of-Three )作为pivot的效率最高</h3><p>这里的三数中值，指的是数组最左边<code>array[0]</code>，最右边<code>array[size-1]</code>，和中间<code>array[(left+right)/2]</code>这三个值中大小排中间的那个。<br /><strong>选取pivot的原则是取尽可能靠近数组的中值(第 ⌈N/2⌉大的值)，这样做的目的是让分组(partition)后产生了两个子数组如归并排序般尽可能均匀，进而减少递归的层次。<strong>不随机选取三个数取中值的原因在于random函数的代价较高，会影响性能(不随机去一个pivot的原因也是如此)。直接选取第一个元素作为pivot是一个欠妥的做法，这样会导致算法在数组有预排序的情况下做无用功。<br /><strong>为什么将三者的最小值放在</strong><code>**array[left]**</code></strong>？</strong> 因为最小值必然小于pivot，避免了一次多余的交换，同时这个left还能作为partition过程中<code>j</code>的哨兵(sentinel)，避免j越界。<br /><strong>为什么将三者的最大值放在</strong><code>**array[right]**</code>**？**同理，避免了交换，但此处没有起到做哨兵的作用，因为我们会在选取pivot时就将pivot放在<code>array[right-1]</code>的位置,而i与j遇到equal to pivot的值都会停止，所以pivot也作为了<code>i</code>的哨兵。<br /><a name="XXNbN"></a></p><h3 id="3-如何分组"><a class="markdownIt-Anchor" href="#3-如何分组"></a> 3. 如何分组？</h3><p>我们的目标是把小于pivot的值放在数组左边，大于pivot的值放在数组右边。<strong>采取的策略时</strong><code>**i**</code><strong>从数组左边开始遍历，遇到大于pivot的值就停止(该值不属于左边)；</strong><code>**j**</code><strong>从数组右边开始遍历，遇到小于pivot的值就停止。接着交换</strong><code>**i**</code><strong>和</strong><code>**j**</code><strong>所在位置的元素。当i和j交叉时，把</strong><code>**pivot**</code><strong>与</strong><code>**i**</code><strong>所在位置的值交换</strong>(为什么是<code>i</code>而不是<code>j</code>？因为pivot预先被放在数组右边right-1的位置，如果被放在右边那pivot就是和<code>j</code>交换位置)<br />**如何处理等于pivot的元素？**先说结论，<code>**i**</code><strong>和</strong><code>**j**</code><strong>遇到这样的元素都要停下</strong>。<br />接着在极端情况(所有元素都一样)情况下讨论其它做法的低效性<br />**为什么不一个停下而另一个继续前进？**如果<code>i</code>停下而<code>j</code>不停下，则<code>i``j</code>交叉的位置会偏向左侧，而pivot要与i最后在的位置交换值，这样显然会导致子数组的大小不平衡。<br />**为什么不两个都不停下？**首先<code>i</code>，<code>j</code>显然可能会出界，即使存在<code>i``j</code>出界的代码，这样做会导致i最后所处的位置在靠近最右边的位置(取决于具体实现)，而pivot要与<code>i</code>交换位置，进而导致产生的子数组很不平衡，降低了算法效率<br /><a name="mt8ir"></a></p><h3 id="4-递归结束条件是什么什么是cutoff为什么要结合插入排序"><a class="markdownIt-Anchor" href="#4-递归结束条件是什么什么是cutoff为什么要结合插入排序"></a> 4. 递归结束条件是什么？什么是cutoff？为什么要结合插入排序？</h3><p>快速排序或许应该像归并排序那样，当子数组仅剩一个元素时递归返回。但是实际上并不这样设置递归返回条件，因为存在这样一个事实：<strong>当数组元素个数很少(5~20)时，快速排序的效率还不如插入排序。因此在partition之后如果子数组的大小小于某一界限(cutoff)，就停止递归调用，转而对子数组调用插入排序,进而提升算法的整体效率</strong><br />这里提到了<a href="https://stackoverflow.com/questions/70402/why-is-quicksort-better-than-mergesort">快速排序与归并排序的区别</a>，还有的区别点是快速排序不占用额外的内存，快速排序使用的是<a href="https://stackoverflow.com/questions/33923/what-is-tail-recursion">尾递归</a>等</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Comparable</span><span class="token operator">></span><span class="token keyword">const</span> Comparable <span class="token function">Median</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Comparable<span class="token operator">></span> <span class="token operator">&amp;</span> array<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> center <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>center<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>center<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// keep left is min among three values</span><span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>center<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>center<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// keep right is max among three values</span><span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>center<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// put pivot into position right-1 </span><span class="token keyword">return</span> array<span class="token punctuation">[</span>right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Comparable</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Comparable<span class="token operator">></span><span class="token operator">&amp;</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> range <span class="token operator">=</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>range <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// cutoff = 10</span><span class="token punctuation">&#123;</span>Comparable pivot <span class="token operator">=</span> <span class="token function">Median</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// partition</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> <span class="token keyword">int</span> j <span class="token operator">=</span> right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// increase before check , details see stackoverflow </span><span class="token keyword">while</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token operator">--</span>j<span class="token punctuation">]</span> <span class="token operator">></span> pivot<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// recursion</span><span class="token function">quickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">quickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token function">insertionSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//Driver</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Comparable</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Comparable<span class="token operator">></span><span class="token operator">&amp;</span> array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">quickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="wPOyJ"></a></p><h1 id="chapter-6-disjoint-sets"><a class="markdownIt-Anchor" href="#chapter-6-disjoint-sets"></a> Chapter 6 Disjoint Sets</h1><p><a name="AHMCd"></a></p><h2 id="1-什么是不相交集什么是unionfind操作"><a class="markdownIt-Anchor" href="#1-什么是不相交集什么是unionfind操作"></a> 1. 什么是不相交集？什么是union/find操作？</h2><p>对于一个集合S，由一个关系R可将S划分为多个<a href="https://www.zhihu.com/question/276100093/answer/388155191">等价类</a>(equivalence class)，在一个等价类中的所有元素之间均存在关系R(即任意a，b ∈ S, a~b)。显然的，要判断任意给定的S中的元素a，b是否有关系，只需判断a,b是否属于同一个等价类，这也说明了<strong>等价类概念的提出是为了给出一个快速判断a,b是否存在关系的方法(我的理解)</strong>。显然的，等价类是S的一个子集(set)，一个元素也只属于一个等价类，<strong>不同的等价类们就是本章要讨论的不相交集(disjoint sets）</strong><br />什么是union/find操作？先查找元素a和b所在的等价类(find操作)，然后判断是不是同一个等价类(find(a) == find(b) ？ ),that is，<strong>判断a,b是否有关系。如果没有，就将a,b联系起来，也就是变得有关系</strong>，即将a,b的等价类合并为一个新的等价类(注意关系的传递性(Transitive)，a,b如果有关系，那么两者原来所在集合的所有元素间也存在了关系)，合并的过程就是union操作。如果本身就有关系，就不用操作了。<br /><a name="x95GB"></a></p><h2 id="2-如何表示不相交集"><a class="markdownIt-Anchor" href="#2-如何表示不相交集"></a> 2. 如何表示不相交集？</h2><p>初始状态，对于N个元素的集合S，假设N个元素间均不存在关系，因此有N个不相交集(每个集合仅有一个元素)。因为不存在comparison操作，所以我们并不在意元素的值是多少，因此我们<strong>把N个元素以0~N-1编号</strong>。<br />我们<strong>用树来表示一个集合，并把树的根作为集合的名字</strong>(某个元素编号)。初始状态时，每个集合名统一表示为-1。<br /><strong>树形态的不相交集不具备完全二叉树(堆)那样的规整性，为什么可以用数组来实现？<strong>因为对于每个元素我们只关心它所在的集合是哪个，即它所在的树的根是哪个，因此</strong>对于每个元素，我们仅需知道它所在的树的根值</strong>即可。不仅如此，数组的从0开始下标也与我们的编号符合，因此可以<strong>用大小为N的数组存储0~N-1个元素的父节点（即对第i个数组项，array[i]存储了编号i的父结点），提供了一个由任意结点开始向上遍历即可获取根结点（that is ，任意结点所在集合名）的途径。</strong><br /><a name="XuWqo"></a></p><h2 id="3-unionfind-如何执行"><a class="markdownIt-Anchor" href="#3-unionfind-如何执行"></a> 3. Union/find 如何执行 ？</h2><p>find操作要找到元素A所在树的根，即对A结点沿根节点方向向上遍历，直到数组值为 -1(<code>sets[i] &lt; 0</code>)，说明此数组编号为根节点(<code>return x</code>)。这其实就是一个不断获取父节点的过程，可使用递归。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token keyword">const</span>  <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sets<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>sets<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// recursive</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Union操作<strong>要合并两个集合，只需要将一个集合的根结点，链接到另一个集合的根节点上</strong>，因为在我们的方法中，根节点才是集合的唯一标识。具体来说，假设root1(同样的，是一个编号)是某个集合的根结点(即，集合名)，root2是另一个集合的根节点，执行Union，就是执行array[root1] = root2 (执行前：array[root1] == array[root2] == -1 ; 执行后：array[root1] == root2 , array[root2] == -1)<br />如果实参不是根，而是元素编号，则需额外执行两次find</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">unions</span><span class="token punctuation">(</span><span class="token keyword">int</span> root1<span class="token punctuation">,</span> <span class="token keyword">int</span> root2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sets<span class="token punctuation">[</span>root2<span class="token punctuation">]</span> <span class="token operator">=</span> root1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>显然的，因为数组是一个支持随机存取的数据结构，则获取set[x]的值是常数时间(that is O(1) )，find操作真正耗时的是向上探索的过程，也就是说<strong>影响find操作的主要是结点所在的深度</strong>。<br /><a name="xnSpG"></a></p><h2 id="4-如何改进union"><a class="markdownIt-Anchor" href="#4-如何改进union"></a> 4. 如何改进Union</h2><p>上述合并是有问题的，把两颗相同高度的树合并，或通过把一颗高树(larger height)根节点链接到一颗矮树的根节点以实现两颗不同高度树的合并，均<strong>会使新树的高度比原来最大的那颗还要多一，即增加了各结点的深度，这样会极大影响find的效率(根节点最大高度为N-1)</strong>。因此我们需要改进合并的方法。<br />很自然的想法就是<strong>把矮树的根节点链接到高树的根节点</strong>(注意本章所用的树不是二叉树，而是一颗多路树)，这样新树的高度还会保持与原来高树的一致；如果两棵树高度相同，那么谁链接到谁都可以，结果都会使新树高度增1(所以根节点最大高度为log2N)<br />如何确定高树和矮树？显然的，<strong>我们需要跟踪每棵树的高度，可以用现有的数组存储，原先根节点的数组值为-1，现在将其改写为其所代表集合的高度的负数</strong>(为什么是负数？或许是为了方便find函数的判断语句更好编写:<code>if (sets[x] &lt; 0 return x;</code>注意之前提到设置各集合初始值为-1，也与这里符合)<br />也可以根据数的大小(size)决定谁链接到谁，但显然由高度做决定更好</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">unionSets</span><span class="token punctuation">(</span><span class="token keyword">int</span> root1<span class="token punctuation">,</span> <span class="token keyword">int</span> root2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sets<span class="token punctuation">[</span>root2<span class="token punctuation">]</span> <span class="token operator">&lt;</span> sets<span class="token punctuation">[</span>root1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// set[root] keep track of height(negative)</span>sets<span class="token punctuation">[</span>root1<span class="token punctuation">]</span> <span class="token operator">=</span> root2<span class="token punctuation">;</span> <span class="token comment">// root2 is deeper</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sets<span class="token punctuation">[</span>root2<span class="token punctuation">]</span> <span class="token operator">==</span> sets<span class="token punctuation">[</span>root1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">--</span>sets<span class="token punctuation">[</span>root1<span class="token punctuation">]</span><span class="token punctuation">;</span>sets<span class="token punctuation">[</span>root2<span class="token punctuation">]</span> <span class="token operator">=</span> root1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="unJoe"></a></p><h2 id="5-如何改进find"><a class="markdownIt-Anchor" href="#5-如何改进find"></a> 5. 如何改进find</h2><p>在寻找编号为x的元素的根的过程中，我们使用<strong>路径压缩(Path Compression)<strong>的方法(自调整)，即</strong>把从x到root之间所有结点的父节点均改为根节点。</strong><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/29536731/1666421236514-c4f89687-71a5-42a4-b5fe-19f8f379487a.png" alt="image.png" /><br />具体做法是<strong>递归的将根节点的编号赋值给路径上的结点</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sets<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> sets<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>sets<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="fO0SW"></a></p><h1 id="chapter-7-graph-algorithms"><a class="markdownIt-Anchor" href="#chapter-7-graph-algorithms"></a> Chapter 7 Graph Algorithms</h1><p><a name="TOgKc"></a></p><h2 id="graph-implement"><a class="markdownIt-Anchor" href="#graph-implement"></a> <a href="https://stackoverflow.com/questions/5493474/graph-implementation-c">Graph implement</a></h2><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/29536731/1666956918039-3ebc54cf-6c4e-4feb-8f90-6473899dc634.jpeg" alt="" /></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">vertex</span><span class="token punctuation">&#123;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vertex<span class="token operator">*</span> <span class="token operator">></span> ve<span class="token punctuation">;</span><span class="token keyword">int</span> name<span class="token punctuation">;</span> <span class="token keyword">int</span> seq<span class="token punctuation">;</span><span class="token comment">// serial number</span><span class="token keyword">int</span> ind<span class="token punctuation">;</span> <span class="token comment">// indegree</span>    <span class="token keyword">int</span> addition <span class="token comment">// additional Message </span>vector<span class="token operator">&lt;</span>ve<span class="token operator">></span> adj<span class="token punctuation">;</span> <span class="token comment">// adjacent list:cost of edge, destination vertex</span><span class="token function">vertex</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">name</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">seq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ind</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Graph</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">typedef</span> map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vertex<span class="token operator">*</span><span class="token operator">></span> vmap<span class="token punctuation">;</span>vmap graph<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> from<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> to<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">int</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">addVertex</span><span class="token punctuation">(</span><span class="token keyword">int</span> newSeq<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token class-name">Graph</span><span class="token double-colon punctuation">::</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> from<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> to<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> weight<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vertex<span class="token operator">*</span> f <span class="token operator">=</span> graph<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token operator">-></span>second<span class="token punctuation">;</span>vertex<span class="token operator">*</span> t <span class="token operator">=</span> graph<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token operator">-></span>second<span class="token punctuation">;</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vertex<span class="token operator">*</span><span class="token operator">></span> edge <span class="token operator">=</span> <span class="token function">make_pair</span><span class="token punctuation">(</span>weight<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token operator">-></span>adj<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">++</span><span class="token punctuation">(</span>t<span class="token operator">-></span>ind<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">Graph</span><span class="token double-colon punctuation">::</span><span class="token function">addVertex</span><span class="token punctuation">(</span><span class="token keyword">int</span> newSeq<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> iter <span class="token operator">=</span> graph<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>newSeq<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>iter <span class="token operator">!=</span> graph<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vertex <span class="token operator">*</span> v<span class="token punctuation">;</span>v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">vertex</span><span class="token punctuation">(</span>newSeq<span class="token punctuation">)</span><span class="token punctuation">;</span>graph<span class="token punctuation">[</span>newSeq<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token class-name">Graph</span><span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> graph<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">InitialGraph</span><span class="token punctuation">(</span>Graph<span class="token operator">&amp;</span> myGraph<span class="token punctuation">)</span>  <span class="token comment">// a instance</span><span class="token punctuation">&#123;</span>myGraph<span class="token punctuation">.</span><span class="token function">addVertex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myGraph<span class="token punctuation">.</span><span class="token function">addVertex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myGraph<span class="token punctuation">.</span><span class="token function">addVertex</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> myGraph<span class="token punctuation">.</span><span class="token function">addVertex</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myGraph<span class="token punctuation">.</span><span class="token function">addVertex</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myGraph<span class="token punctuation">.</span><span class="token function">addVertex</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myGraph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// as unweighted graph , weight = 1</span>myGraph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myGraph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myGraph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myGraph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> myGraph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myGraph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="JeoiH"></a></p><h2 id="topological-sort"><a class="markdownIt-Anchor" href="#topological-sort"></a> Topological Sort</h2><p><a name="ueS0P"></a></p><h3 id="1-什么是拓扑排序意义是什么"><a class="markdownIt-Anchor" href="#1-什么是拓扑排序意义是什么"></a> 1. 什么是拓扑排序？意义是什么？</h3><p>首先先理解拓扑的含义：the way the parts of sth are arranged and related. 形象的来说：比如说一个人要自学计算机科学知识(sth)，而该领域知识由很多板块的内容(parts)构成，这些内容又相互关联(在学懂A课程前必须有B课程的基础，related)，那么他就面临一个问题，怎么安排学习顺序(路径，arranged)？一个显然不合理的安排是在学习操作系统先于数据结构与算法，因为数据结构与算法是学习OS的前置课程。<strong>一个不违反前置条件的学习路径就是一个拓扑排序，其意义就是得到一条合理的学习路径。<strong>说的更广泛一点，拓扑排序就是得到一个合理的处理顺序。<br />如果我们把各板块内容之间铺垫关系画成一张图，各板块为顶点，有向边作为关联(如 Vertex数据结构与算法指向Vertex操作系统)，那么</strong>拓扑排序在这个图中体现为一条沿着有向边方向的路径</strong>(即路径中任意一段单位路径u到v,不存在边(v,u))<br />显然，<strong>存在拓扑排序的图一定是有向无环图</strong>( directed acyclic graph，DAG),<a href="https://www.quora.com/Why-must-a-graph-with-a-topological-sort-be-acyclic-and-why-must-an-acyclic-graph-have-a-topological-sort">如果图是有环的，那么就找不到符合要求的路径，因为总会违反前置条件</a><br /><a name="yLpq8"></a></p><h3 id="2-如何实现拓扑排序算法怎样使其更高效"><a class="markdownIt-Anchor" href="#2-如何实现拓扑排序算法怎样使其更高效"></a> 2. 如何实现拓扑排序算法？怎样使其更高效？</h3><p>对于我们要选择的第一个顶点，显然的，它必须没有前置条件，即没有顶点指向它，入度(indegree为0)。我们选择这样一个点，然后<strong>在图中抹去该点和它的边</strong>(显然的，都是由它发出的边，与它相关的顶点入度也随之更新)，在剩下的图中重复这个步骤，直到图为空(如果找不到入度为0的顶点而图不为空，说明图不是DAG，存在环)。顶点被抹去的顺序，就是拓扑排序。<br />如何快速寻找到入度为0的点呢？如果通过遍历顶点集的方式，那么开销是很大的，特别是如果图很稀疏(边很少，sparse)，那么要去除的边也是很少的，因此每一步被影响到入度的顶点的数量也是很少的，即大部分的顶点入度是一直没变的，反复的遍历它们是pointless行为。<br />提升效率方法是<strong>将入度为0的点单独拿出来，我们可以用栈或队列来存储。在每次去掉顶点和边之后，我们将更新后入度变为0的顶点加入到队列中</strong>。显然的，队列的出队顺序就是我们要求的拓扑排序。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"Graph.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TopologicalSort</span><span class="token punctuation">(</span>Graph<span class="token operator">&amp;</span> myGraph<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> queue<span class="token operator">&lt;</span>vertex<span class="token operator">*</span><span class="token operator">></span> zero<span class="token punctuation">;</span><span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> N <span class="token operator">=</span> myGraph<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> iter <span class="token operator">:</span>myGraph<span class="token punctuation">.</span>graph<span class="token punctuation">)</span> <span class="token comment">// initalize vertexSet which indegree is zero</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span>second<span class="token operator">-></span>ind <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>zero<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>iter<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>zero<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vertex<span class="token operator">*</span> v <span class="token operator">=</span> zero<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>zero<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token operator">-></span>seq <span class="token operator">=</span> <span class="token operator">++</span>counter<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token operator">-></span>name <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span><span class="token keyword">int</span> adjN <span class="token operator">=</span> v<span class="token operator">-></span>adj<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> adjN<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span><span class="token punctuation">(</span>v<span class="token operator">-></span>adj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token operator">-></span>ind<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>zero<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token operator">-></span>adj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>counter <span class="token operator">!=</span> N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="Ms2lL"></a></p><h2 id="shortest-path-algorithms"><a class="markdownIt-Anchor" href="#shortest-path-algorithms"></a> Shortest-Path Algorithms</h2><p><a name="TdCMl"></a></p><h3 id="1-什么是单源最短路径问题"><a class="markdownIt-Anchor" href="#1-什么是单源最短路径问题"></a> 1. 什么是单源最短路径问题？</h3><p>单源最短路径问题(Single-Source Shortest-Path Problem): <strong>给定一个有权图(weighted graph,可以有环)中的一个点</strong><code>**v**</code><strong>，求出</strong><code>**v**</code><strong>到其它所有顶点的最短路径</strong>，that is ,在答案所呈现的结果图中，<code>v</code>到结果图中任意一个顶点<code>w</code>的路径，其长度是<code>v</code>与<code>w</code>之间存在的所有路径中，长度最短的那条。<br />也可以从另一个角度理解这个问题，即如果把边长视为开销，那么<strong>该问题就是要以最小的开销，从源顶点开始，覆盖整张图的顶点</strong><br /><a name="q5MIP"></a></p><h3 id="2为什么breadth-first-search可以解决unweighted-shortest-paths"><a class="markdownIt-Anchor" href="#2为什么breadth-first-search可以解决unweighted-shortest-paths"></a> 2.为什么Breadth-First Search可以解决Unweighted Shortest-Paths?</h3><p>为了理解SSSP问题，我们先考虑无权图，无权图可视为权重为1的有权图<br />我们先设置问题的初始状态：<code>v</code>到任意<code>w</code>的距离都是无穷大，任意<code>w</code>的状态都是unknown(<code>v</code>到该<code>w</code>的最短路径还未确定)。<br />我们首先能确定的是<code>v</code>能直接到达的点(<code>v</code>的邻接点)，因为v只有唯一途径能到达这些点，所以这个唯一途径就是最短路径。我们把这些点称为第一层，其最短路径均为1。接着，我们能确定的点显然是第一层的邻接点，<strong>因为</strong><code>**v**</code><strong>能通过第一层的点去访问只有这些点</strong>，我们把这些点称为第二层，其最短路径自然为2。按照这样的一个广度优先搜索的逻辑，我们便能确定所有点的最短路径。<br />因为是无权图，所以不存在对路径长度的多次更新（关于该点可见后续讨论中的例子：不存在将s-&gt;w1-&gt;w3更改为s-&gt;w2-&gt;w3的可能），对每个顶点的处理，只需简单的将其distance信息设置为前一个顶点的distance+1即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">Graph</span><span class="token double-colon punctuation">::</span><span class="token function">unweighted_Shortest_Path_with_queue</span><span class="token punctuation">(</span>vertex<span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>queue<span class="token operator">&lt;</span>vertex<span class="token operator">*</span><span class="token operator">></span> q<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> iter <span class="token operator">:</span> graph<span class="token punctuation">)</span>iter<span class="token punctuation">.</span>second<span class="token operator">-></span>dist <span class="token operator">=</span> INFINITY<span class="token punctuation">;</span>s<span class="token punctuation">.</span>dist <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vertex v <span class="token operator">=</span> <span class="token operator">*</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// priority '.' > '*'</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> adjac <span class="token operator">:</span> v<span class="token punctuation">.</span>adj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>adjac<span class="token punctuation">.</span>second<span class="token operator">-></span>dist <span class="token operator">=</span> v<span class="token punctuation">.</span>dist <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> adjac<span class="token punctuation">.</span>second<span class="token operator">-></span>path <span class="token operator">=</span> v<span class="token punctuation">.</span>name<span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>adjac<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">Graph</span><span class="token double-colon punctuation">::</span><span class="token function">unweighted_Shortest_Path</span><span class="token punctuation">(</span>vertex<span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> NUM_VERTICES <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> iter <span class="token operator">:</span> graph<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>iter<span class="token punctuation">.</span>second<span class="token operator">-></span>dist <span class="token operator">=</span> INFINITY<span class="token punctuation">;</span>iter<span class="token punctuation">.</span>second<span class="token operator">-></span>known <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>s<span class="token punctuation">.</span>dist <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> currDist <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> currDist <span class="token operator">&lt;</span> NUM_VERTICES<span class="token punctuation">;</span> <span class="token operator">++</span>currDist<span class="token punctuation">)</span> <span class="token comment">// double for loops:inefficiency</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> iter <span class="token operator">:</span> graph<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>iter<span class="token punctuation">.</span>second<span class="token operator">-></span>known <span class="token operator">&amp;&amp;</span> iter<span class="token punctuation">.</span>second<span class="token operator">-></span>dist <span class="token operator">==</span> currDist<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>iter<span class="token punctuation">.</span>second<span class="token operator">-></span>known <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> adjac <span class="token operator">:</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span>second<span class="token operator">-></span>adj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>adjac<span class="token punctuation">.</span>second<span class="token operator">-></span>dist <span class="token operator">=</span> currDist <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// update distance</span>adjac<span class="token punctuation">.</span>second<span class="token operator">-></span>path <span class="token operator">=</span> iter<span class="token punctuation">.</span>second<span class="token operator">-></span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="YjF5L"></a></p><h3 id="3为什么dijkstra-algorithm每一步要选择最近的结点为什么该算法可以解决single-source-weighted"><a class="markdownIt-Anchor" href="#3为什么dijkstra-algorithm每一步要选择最近的结点为什么该算法可以解决single-source-weighted"></a> 3.为什么Dijkstra Algorithm每一步要选择最近的结点，为什么该算法可以解决Single-Source Weighted？</h3><p>与上一问一样，要找到<code>v</code>到所有顶点的最短路径，我们总得先知道<code>v</code>能到达哪些点。所以我们在用Dijkstra解决SSSP的时候，我们似乎也应该按照这样的结点选择顺序：首先找的是<code>v</code>的邻接点，然后再邻接点… 。但是我们需要注意，<strong>我们实际选择结点的顺序(选择结点即把结点变为known，说明找到了到它的最短路径)，是不断的选取未确定结点中离</strong><code>**v**</code><strong>距离最近的那一个，而不是像无权图中那样邻接点接着邻接点的广度搜索。</strong><br /><strong>为什么要选择最近的那一个？</strong><br />举个最简单的例子：在这个图中，我们首先探索了源顶点的邻接点w1,w2，更新其dist为ds+dcost，那么w1.dist=1，w2.dist =3。那么下一轮我们选择那个顶点进行探索(其邻接点)呢？显然是w1，因为在当前条件下，我们只知道源顶点离w1更近一些，那么到w3(后续未知结点)的最短路径自然更可能的在w1这边(我们还不知道后续顶点的dist信息)。<strong>因此我们在每次选择一个顶点以探索他的邻接点(更新dist信息)，都要选择当前距离v最近的那个，因为经过这样一个点的路径才最有可能是(到后续顶点)最短路径/开销可能最少。</strong><br />为什么在无权图中不用这样做？<br />无权图的边长权重都为1，开销的是一样的。<br /><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/29536731/1667390674960-21e67dd1-f11c-4336-a168-c237056626fe.jpeg" alt="" /><br />我们要有一个认知：<strong>源顶点</strong><code>**v**</code><strong>到某一目标顶点</strong><code>**w****t**</code><strong>之间的最短路径①上存在着几个中间顶点，那么v到任意一个中间结点</strong><code>**w****i**</code>**的最短路径②一定与①重合。**或者说v到目标顶点的最短路径，是目标顶点在该路径的上一个顶点的最短路径延长了一个边长所得到的。<br /><strong>因此我们逐步找到各顶点的最短路径，并从之前找到的最短路径(以开销最少的方式)延展到其它顶点上，便可以找到到所有顶点的最短路径。</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">Graph</span><span class="token double-colon punctuation">::</span><span class="token function">Dijkstra_Algorithm</span><span class="token punctuation">(</span>vertex<span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> iter <span class="token operator">:</span> graph<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>iter<span class="token punctuation">.</span>second<span class="token operator">-></span>dist <span class="token operator">=</span> INFINITY<span class="token punctuation">;</span>iter<span class="token punctuation">.</span>second<span class="token operator">-></span>known <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>s<span class="token punctuation">.</span>dist <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">existUnknown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//there is an unknown vertex</span><span class="token punctuation">&#123;</span> vertex<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">smallestUnknown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// smallest unknown distance vertex</span>v<span class="token operator">-></span>known <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> iter <span class="token operator">:</span> v<span class="token operator">-></span>adj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>dist <span class="token operator">+</span> iter<span class="token punctuation">.</span>first <span class="token operator">&lt;</span> iter<span class="token punctuation">.</span>second<span class="token operator">-></span>dist<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>iter<span class="token punctuation">.</span>second<span class="token operator">-></span>dist <span class="token operator">=</span> v<span class="token operator">-></span>dist <span class="token operator">+</span> iter<span class="token punctuation">.</span>first<span class="token punctuation">;</span> <span class="token comment">// update</span>iter<span class="token punctuation">.</span>second<span class="token operator">-></span>path <span class="token operator">=</span> v<span class="token operator">-></span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token class-name">Graph</span><span class="token double-colon punctuation">::</span> <span class="token function">existUnknown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> iter <span class="token operator">:</span> graph<span class="token punctuation">)</span>  <span class="token comment">// iteration </span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>iter<span class="token punctuation">.</span>second<span class="token operator">-></span>known<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vertex<span class="token operator">*</span> <span class="token class-name">Graph</span><span class="token double-colon punctuation">::</span><span class="token function">smallestUnknown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vertex<span class="token operator">*</span> min <span class="token operator">=</span> graph<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>second<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> iter <span class="token operator">:</span> graph<span class="token punctuation">)</span>  <span class="token comment">// iteration </span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>iter<span class="token punctuation">.</span>second<span class="token operator">-></span>known <span class="token operator">&amp;&amp;</span> iter<span class="token punctuation">.</span>second<span class="token operator">-></span>dist <span class="token operator">&lt;</span> min<span class="token operator">-></span>dist<span class="token punctuation">)</span>min <span class="token operator">=</span> iter<span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> min<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="b4gnk"></a></p><h3 id="4为什么dijkstra-algorithm不适用于有负权值边的图"><a class="markdownIt-Anchor" href="#4为什么dijkstra-algorithm不适用于有负权值边的图"></a> 4.为什么Dijkstra Algorithm不适用于有负权值边的图</h3><p>在Dijkstra算法中，我们<strong>一旦将一个顶点</strong><code>**v**</code><strong>由unknown标记为known，就说明由</strong><code>**s**</code><strong>到</strong><code>**v**</code><strong>的最短路径已经找到，且不会再改变，即算法不会在后续过程中回头(look back)修改到</strong><code>**v**</code><strong>的最短路程这一信息</strong>。如果我们用Dijkstra算法在图中确定了<code>v</code>的最短路径，然后发现<code>v</code>到某个邻接点<code>u</code>(状态为unknown)的边权值为负，那么此时<code>s</code>到<code>v</code>的实际最短路径就发生了变化：s-&gt;v-&gt;w-&gt;v，然而因为Dijkstra算法不会look back，所以算法继续保持之前的最短路径，因此会产生与事实不符的结果。<br /><a name="wzqMO"></a></p><h2 id="critical-path-problems"><a class="markdownIt-Anchor" href="#critical-path-problems"></a> Critical Path Problems</h2><p><a name="MCV9V"></a></p><h3 id="1-如何理解关键路径关键路径是什么"><a class="markdownIt-Anchor" href="#1-如何理解关键路径关键路径是什么"></a> 1. 如何理解关键路径？关键路径是什么？</h3><p>一个项目由多个可独立完成工作(jobs)组成，各工作之间存在优先级限制关系(precedence constraint)，即某一项工作必须在完成另一项(或多项)工作后才能启动。①如何确定项目的最快(早)完成时间？②如何确定某些工作的可延迟时间 (that is,slack time 松弛时间) 以不至于增加整个项目的完成时间？<br /><strong>关键路径这样一组工作序列：该工作序列可以用来确定项目的最快完成时间。对第二点，关键路径上的所有工作的可延迟时间均为0，关键路径上的任何一个工作被延迟，都会增加整个项目的完成时间，这也是为什么称之为&quot;关键&quot;。</strong><br />这样的项目可以体现在有向无环图中。为什么一定是无环？与拓扑排序一样的道理，如果有几个工作成环状相互制约，那就无法开启任何一项工作，因为总是违反其优先级限制关系。<strong>关键路径在这样的图中体现为从开始到结束的最长路径(longest path)</strong><br />注意路径的长度由边的权值(工作完成所需时间)决定而不是边的数量<br /><a name="oj5FV"></a></p><h3 id="2-为什么图的最长路径就是关键路径"><a class="markdownIt-Anchor" href="#2-为什么图的最长路径就是关键路径"></a> 2. 为什么图的最长路径就是关键路径？</h3><blockquote><p>关键路径是通过识别最长的相关活动并测量从开始到结束完成它们所需的时间来确定的 -wikipedia</p></blockquote><p>我们首先要理解一条路径上的各个工作节点之间存在着严格的先后关系，即优先级限制关系。这就说明<strong>各工作只能串行的执行</strong>，哪怕你有很多处理器(processors)也必须等待高优先级的工作执行完毕后再开启新的工作。互不关联(不在同一路径)的工作可以并行的执行，所以<strong>在最长路径上的最后一个工作执行完毕时，其它路径也一定执行完毕，即整个项目执行完毕。因此最长路径决定了项目的完成时间，不延迟的执行最长路径(上的工作)所花的时间，就是项目的最快完成时间。</strong><br /><a name="Aa03a"></a></p><h2 id="network-flow-problems"><a class="markdownIt-Anchor" href="#network-flow-problems"></a> Network Flow Problems</h2><p><a name="RBuq3"></a></p><h3 id="1-如何理解网络流问题"><a class="markdownIt-Anchor" href="#1-如何理解网络流问题"></a> 1. 如何理解网络流问题？</h3><p>网络流问题就是从一个端<code>s</code>往另一个端<code>t</code>发送流(Flow,如通水，运货，发送数据包等)，要经过数个中间节点，各节点间的边的传输容量是有限的(如水管的阈值，超过了这个值水管会破裂)，问从s发送到t的最大流(the maximum amount of ﬂow)是多少。显然的要找出这个最大流，<strong>我们要解决的根本问题是如何正确安排运输方案(即路径选择)以最大化流</strong>。<br /><strong>如何计算图中流的数量(the amount of ﬂow)？</strong> <strong>只需看从端</strong><code>**s**</code><strong>发出了多少流即可</strong>(端<code>t</code>肯定接受同样数量的流，除非“漏水”了)<br />**怎么验证我们得到的流的数量是最大的？**把图分割(cut)为两个部分，一部分包含s，另一部分包含t(其余结点随意，因此存在多种切割方式)，<strong>经过切割线上的边的容量总和决定了最大流的界限，容量总和的最小值即为图所能承受的最大流的值(the minimum cut capacity is exactly equal to the maximum ﬂow)</strong><br />由此我们可以看出，<strong>解决最大流问题的目的不是为了得到最大流的值，而是知道能达到最大流的运输方案</strong><br /><a href="https://www.youtube.com/watch?v=6DFWUgV5Osc&amp;list=PLvOO0btloRnsbnIIbX6ywvD8OZUTT0_ID&amp;index=8"><strong>网络流问题基础 Network Flow Problems</strong></a><br /><a name="LytbY"></a></p><h3 id="2-如何得到最大流"><a class="markdownIt-Anchor" href="#2-如何得到最大流"></a> 2. 如何得到最大流？</h3><p>首先考虑简单的算法(naive algorithm )，我们随机的选择路径( free to choose any path from s to t)，直到Gr中不存在s到t的路径，看能否得到最大流，事实证明，这样是不可靠的，得到的方案可能会使我们会得到一个小于最大流的值。<strong>该方法存在的缺陷是，一旦在某一步选中了错误的路径(不属于最大流方案的路径)，算法无法纠正错误，因此找不到最大流。</strong><br />我们改进一下这个算法，<strong>在每次进行一次路径选择(即在G<strong><strong>r</strong></strong>图中相应边执行了减法)之后，接着在相应边上加上一条方向相反的边，其权值就等于刚刚该边减去的值。称为Ford–Fulkerson algorithm</strong><br /><strong>这样做的目的，是让算法有了撤销(undo)的能力，可以把不好的路径撤销掉，因此该算法总能找到正确的路径，进而找到最大流。</strong><br /><a href="https://www.youtube.com/watch?v=8sLON0DqLZo&amp;list=PLvOO0btloRnsbnIIbX6ywvD8OZUTT0_ID&amp;index=9">**Ford-Fulkerson Algorithm 寻找网络最大流  -Dr Wang **</a></p>]]></content>
      
      
      <categories>
          
          <category> Data structure and Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Foundation </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
